{"version":3,"file":"vwo-fme-javascript-sdk.min.js","mappings":"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","sources":["webpack://vwoSdk/webpack/universalModuleDefinition","webpack://vwoSdk/./node_modules/murmurhash/murmurhash.js","webpack://vwoSdk/./lib/VWO.ts","webpack://vwoSdk/./lib/VWOBuilder.ts","webpack://vwoSdk/./lib/VWOClient.ts","webpack://vwoSdk/./lib/api/GetFlag.ts","webpack://vwoSdk/./lib/api/SetAttribute.ts","webpack://vwoSdk/./lib/api/TrackEvent.ts","webpack://vwoSdk/./lib/constants/Url.ts","webpack://vwoSdk/./lib/constants/index.ts","webpack://vwoSdk/./lib/decorators/StorageDecorator.ts","webpack://vwoSdk/./lib/enums/ApiEnum.ts","webpack://vwoSdk/./lib/enums/CampaignTypeEnum.ts","webpack://vwoSdk/./lib/enums/EventEnum.ts","webpack://vwoSdk/./lib/enums/HeadersEnum.ts","webpack://vwoSdk/./lib/enums/HttpMethodEnum.ts","webpack://vwoSdk/./lib/enums/PlatformEnum.ts","webpack://vwoSdk/./lib/enums/StatusEnum.ts","webpack://vwoSdk/./lib/enums/StorageEnum.ts","webpack://vwoSdk/./lib/enums/UrlEnum.ts","webpack://vwoSdk/./lib/enums/log-messages/index.ts","webpack://vwoSdk/./lib/models/campaign/CampaignModel.ts","webpack://vwoSdk/./lib/models/campaign/FeatureModel.ts","webpack://vwoSdk/./lib/models/campaign/ImpactCampaignModel.ts","webpack://vwoSdk/./lib/models/campaign/MetricModel.ts","webpack://vwoSdk/./lib/models/campaign/RuleModel.ts","webpack://vwoSdk/./lib/models/campaign/VariableModel.ts","webpack://vwoSdk/./lib/models/campaign/VariationModel.ts","webpack://vwoSdk/./lib/models/schemas/SettingsSchemaValidation.ts","webpack://vwoSdk/./lib/models/settings/SettingsModel.ts","webpack://vwoSdk/./lib/models/user/ContextModel.ts","webpack://vwoSdk/./lib/models/user/ContextVWOModel.ts","webpack://vwoSdk/./lib/packages/decision-maker/index.ts","webpack://vwoSdk/./lib/packages/logger/LogMessageBuilder.ts","webpack://vwoSdk/./lib/packages/logger/Logger.ts","webpack://vwoSdk/./lib/packages/logger/core/LogManager.ts","webpack://vwoSdk/./lib/packages/logger/core/TransportManager.ts","webpack://vwoSdk/./lib/packages/logger/enums/LogLevelEnum.ts","webpack://vwoSdk/./lib/packages/logger/index.ts","webpack://vwoSdk/./lib/packages/logger/transports/ConsoleTransport.ts","webpack://vwoSdk/./lib/packages/network-layer/client/NetworkBrowserClient.ts","webpack://vwoSdk/./lib/packages/network-layer/handlers/RequestHandler.ts","webpack://vwoSdk/./lib/packages/network-layer/index.ts","webpack://vwoSdk/./lib/packages/network-layer/manager/NetworkManager.ts","webpack://vwoSdk/./lib/packages/network-layer/models/GlobalRequestModel.ts","webpack://vwoSdk/./lib/packages/network-layer/models/RequestModel.ts","webpack://vwoSdk/./lib/packages/network-layer/models/ResponseModel.ts","webpack://vwoSdk/./lib/packages/segmentation-evaluator/core/SegmentationManger.ts","webpack://vwoSdk/./lib/packages/segmentation-evaluator/enums/SegmentOperandRegexEnum.ts","webpack://vwoSdk/./lib/packages/segmentation-evaluator/enums/SegmentOperandValueEnum.ts","webpack://vwoSdk/./lib/packages/segmentation-evaluator/enums/SegmentOperatorValueEnum.ts","webpack://vwoSdk/./lib/packages/segmentation-evaluator/evaluators/SegmentEvaluator.ts","webpack://vwoSdk/./lib/packages/segmentation-evaluator/evaluators/SegmentOperandEvaluator.ts","webpack://vwoSdk/./lib/packages/segmentation-evaluator/index.ts","webpack://vwoSdk/./lib/packages/segmentation-evaluator/utils/SegmentUtil.ts","webpack://vwoSdk/./lib/packages/storage/Connector.ts","webpack://vwoSdk/./lib/packages/storage/Storage.ts","webpack://vwoSdk/./lib/packages/storage/index.ts","webpack://vwoSdk/./lib/services/CampaignDecisionService.ts","webpack://vwoSdk/./lib/services/HooksService.ts","webpack://vwoSdk/./lib/services/SettingsService.ts","webpack://vwoSdk/./lib/services/StorageService.ts","webpack://vwoSdk/./lib/utils/CampaignUtil.ts","webpack://vwoSdk/./lib/utils/DataTypeUtil.ts","webpack://vwoSdk/./lib/utils/DecisionUtil.ts","webpack://vwoSdk/./lib/utils/FunctionUtil.ts","webpack://vwoSdk/./lib/utils/GatewayServiceUtil.ts","webpack://vwoSdk/./lib/utils/ImpressionUtil.ts","webpack://vwoSdk/./lib/utils/LogMessageUtil.ts","webpack://vwoSdk/./lib/utils/MegUtil.ts","webpack://vwoSdk/./lib/utils/NetworkUtil.ts","webpack://vwoSdk/./lib/utils/PromiseUtil.ts","webpack://vwoSdk/./lib/utils/RuleEvaluationUtil.ts","webpack://vwoSdk/./lib/utils/SettingsUtil.ts","webpack://vwoSdk/./lib/utils/UrlUtil.ts","webpack://vwoSdk/./lib/utils/UuidUtil.ts","webpack://vwoSdk/./lib/utils/XMLUtil.ts","webpack://vwoSdk/./node_modules/uuid/dist/commonjs-browser/index.js","webpack://vwoSdk/./node_modules/uuid/dist/commonjs-browser/md5.js","webpack://vwoSdk/./node_modules/uuid/dist/commonjs-browser/native.js","webpack://vwoSdk/./node_modules/uuid/dist/commonjs-browser/nil.js","webpack://vwoSdk/./node_modules/uuid/dist/commonjs-browser/parse.js","webpack://vwoSdk/./node_modules/uuid/dist/commonjs-browser/regex.js","webpack://vwoSdk/./node_modules/uuid/dist/commonjs-browser/rng.js","webpack://vwoSdk/./node_modules/uuid/dist/commonjs-browser/sha1.js","webpack://vwoSdk/./node_modules/uuid/dist/commonjs-browser/stringify.js","webpack://vwoSdk/./node_modules/uuid/dist/commonjs-browser/v1.js","webpack://vwoSdk/./node_modules/uuid/dist/commonjs-browser/v3.js","webpack://vwoSdk/./node_modules/uuid/dist/commonjs-browser/v35.js","webpack://vwoSdk/./node_modules/uuid/dist/commonjs-browser/v4.js","webpack://vwoSdk/./node_modules/uuid/dist/commonjs-browser/v5.js","webpack://vwoSdk/./node_modules/uuid/dist/commonjs-browser/validate.js","webpack://vwoSdk/./node_modules/uuid/dist/commonjs-browser/version.js","webpack://vwoSdk/./node_modules/vwo-fme-sdk-log-messages/index.js","webpack://vwoSdk/./node_modules/superstruct/lib/index.cjs","webpack://vwoSdk/webpack/bootstrap","webpack://vwoSdk/./lib/index.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\t// CommonJS2\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\t// AMD\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\t// CommonJS\n\telse if(typeof exports === 'object')\n\t\texports[\"vwoSdk\"] = factory();\n\t// Root\n\telse\n\t\troot[\"vwoSdk\"] = factory();\n})(this, () => {\nreturn ","(function(){\n  const _global = this;\n\n  const createBuffer = (val) => new TextEncoder().encode(val)\n\n  /**\n   * JS Implementation of MurmurHash2\n   *\n   * @author <a href=\"mailto:gary.court@gmail.com\">Gary Court</a>\n   * @see http://github.com/garycourt/murmurhash-js\n   * @author <a href=\"mailto:aappleby@gmail.com\">Austin Appleby</a>\n   * @see http://sites.google.com/site/murmurhash/\n   *\n   * @param {Uint8Array | string} str ASCII only\n   * @param {number} seed Positive integer only\n   * @return {number} 32-bit positive integer hash\n   */\n  function MurmurHashV2(str, seed) {\n    if (typeof str === 'string') str = createBuffer(str);\n    let\n      l = str.length,\n      h = seed ^ l,\n      i = 0,\n      k;\n\n    while (l >= 4) {\n      k =\n        ((str[i] & 0xff)) |\n        ((str[++i] & 0xff) << 8) |\n        ((str[++i] & 0xff) << 16) |\n        ((str[++i] & 0xff) << 24);\n\n      k = (((k & 0xffff) * 0x5bd1e995) + ((((k >>> 16) * 0x5bd1e995) & 0xffff) << 16));\n      k ^= k >>> 24;\n      k = (((k & 0xffff) * 0x5bd1e995) + ((((k >>> 16) * 0x5bd1e995) & 0xffff) << 16));\n\n    h = (((h & 0xffff) * 0x5bd1e995) + ((((h >>> 16) * 0x5bd1e995) & 0xffff) << 16)) ^ k;\n\n      l -= 4;\n      ++i;\n    }\n\n    switch (l) {\n    case 3: h ^= (str[i + 2] & 0xff) << 16;\n    case 2: h ^= (str[i + 1] & 0xff) << 8;\n    case 1: h ^= (str[i] & 0xff);\n            h = (((h & 0xffff) * 0x5bd1e995) + ((((h >>> 16) * 0x5bd1e995) & 0xffff) << 16));\n    }\n\n    h ^= h >>> 13;\n    h = (((h & 0xffff) * 0x5bd1e995) + ((((h >>> 16) * 0x5bd1e995) & 0xffff) << 16));\n    h ^= h >>> 15;\n\n    return h >>> 0;\n  };\n\n  /*\n   * JS Implementation of MurmurHash3 (r136) (as of May 20, 2011)\n   *\n   * @author <a href=\"mailto:gary.court@gmail.com\">Gary Court</a>\n   * @see http://github.com/garycourt/murmurhash-js\n   * @author <a href=\"mailto:aappleby@gmail.com\">Austin Appleby</a>\n   * @see http://sites.google.com/site/murmurhash/\n   *\n   * @param {Uint8Array | string} key ASCII only\n   * @param {number} seed Positive integer only\n   * @return {number} 32-bit positive integer hash\n   */\n  function MurmurHashV3(key, seed) {\n    if (typeof key === 'string') key = createBuffer(key);\n\n    let remainder, bytes, h1, h1b, c1, c1b, c2, c2b, k1, i;\n\n    remainder = key.length & 3; // key.length % 4\n    bytes = key.length - remainder;\n    h1 = seed;\n    c1 = 0xcc9e2d51;\n    c2 = 0x1b873593;\n    i = 0;\n\n    while (i < bytes) {\n        k1 =\n          ((key[i] & 0xff)) |\n          ((key[++i] & 0xff) << 8) |\n          ((key[++i] & 0xff) << 16) |\n          ((key[++i] & 0xff) << 24);\n      ++i;\n\n      k1 = ((((k1 & 0xffff) * c1) + ((((k1 >>> 16) * c1) & 0xffff) << 16))) & 0xffffffff;\n      k1 = (k1 << 15) | (k1 >>> 17);\n      k1 = ((((k1 & 0xffff) * c2) + ((((k1 >>> 16) * c2) & 0xffff) << 16))) & 0xffffffff;\n\n      h1 ^= k1;\n          h1 = (h1 << 13) | (h1 >>> 19);\n      h1b = ((((h1 & 0xffff) * 5) + ((((h1 >>> 16) * 5) & 0xffff) << 16))) & 0xffffffff;\n      h1 = (((h1b & 0xffff) + 0x6b64) + ((((h1b >>> 16) + 0xe654) & 0xffff) << 16));\n    }\n\n    k1 = 0;\n\n    switch (remainder) {\n      case 3: k1 ^= (key[i + 2] & 0xff) << 16;\n      case 2: k1 ^= (key[i + 1] & 0xff) << 8;\n      case 1: k1 ^= (key[i] & 0xff);\n\n      k1 = (((k1 & 0xffff) * c1) + ((((k1 >>> 16) * c1) & 0xffff) << 16)) & 0xffffffff;\n      k1 = (k1 << 15) | (k1 >>> 17);\n      k1 = (((k1 & 0xffff) * c2) + ((((k1 >>> 16) * c2) & 0xffff) << 16)) & 0xffffffff;\n      h1 ^= k1;\n    }\n\n    h1 ^= key.length;\n\n    h1 ^= h1 >>> 16;\n    h1 = (((h1 & 0xffff) * 0x85ebca6b) + ((((h1 >>> 16) * 0x85ebca6b) & 0xffff) << 16)) & 0xffffffff;\n    h1 ^= h1 >>> 13;\n    h1 = ((((h1 & 0xffff) * 0xc2b2ae35) + ((((h1 >>> 16) * 0xc2b2ae35) & 0xffff) << 16))) & 0xffffffff;\n    h1 ^= h1 >>> 16;\n\n    return h1 >>> 0;\n  }\n\n  const murmur = MurmurHashV3;\n  murmur.v2 = MurmurHashV2;\n  murmur.v3 = MurmurHashV3;\n\n  if (typeof(module) != 'undefined') {\n    module.exports = murmur;\n  } else {\n    const _previousRoot = _global.murmur;\n    murmur.noConflict = function() {\n      _global.murmur = _previousRoot;\n      return murmur;\n    }\n    _global.murmur = murmur;\n  }\n}());\n","/**\n * Copyright 2024 Wingify Software Pvt. Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { VWOBuilder } from './VWOBuilder';\nimport { IVWOClient } from './VWOClient';\nimport { IVWOOptions } from './models/VWOOptionsModel';\nimport { SettingsModel } from './models/settings/SettingsModel';\nimport { dynamic } from './types/Common';\nimport { isObject, isString } from './utils/DataTypeUtil';\nimport { Deferred } from './utils/PromiseUtil';\n\nimport { InfoLogMessagesEnum, ErrorLogMessagesEnum } from './enums/log-messages';\nimport { buildMessage } from './utils/LogMessageUtil';\nimport { PlatformEnum } from './enums/PlatformEnum';\n\nexport class VWO {\n  private static vwoBuilder: VWOBuilder;\n  private static instance: dynamic;\n\n  /**\n   * Constructor for the VWO class.\n   * Initializes a new instance of VWO with the provided options.\n   * @param {Record<string, dynamic>} options - Configuration options for the VWO instance.\n   * @returns The instance of VWO.\n   */\n  constructor(options: IVWOOptions) {\n    return VWO.setInstance(options);\n  }\n\n  /**\n   * Sets the singleton instance of VWO.\n   * Configures and builds the VWO instance using the provided options.\n   * @param {Record<string, dynamic>} options - Configuration options for setting up VWO.\n   * @returns A Promise resolving to the configured VWO instance.\n   */\n  private static setInstance(options: IVWOOptions): Promise<IVWOClient> {\n    const optionsVWOBuilder: any = options?.vwoBuilder;\n    this.vwoBuilder = optionsVWOBuilder || new VWOBuilder(options);\n\n    this.instance = this.vwoBuilder\n      .setLogger() // Sets up logging for debugging and monitoring.\n      .setSettingsService() // Sets the settings service for configuration management.\n      .setStorage() // Configures storage for data persistence.\n      .setNetworkManager() // Configures network management for API communication.\n      .setSegmentation() // Sets up segmentation for targeted functionality.\n      // .initBatching()        // Initializes batching for bulk data processing.\n      .initPolling(); // Starts polling mechanism for regular updates.\n    // .setAnalyticsCallback() // Sets up analytics callback for data analysis.\n\n    return this.vwoBuilder.getSettings().then((settings: SettingsModel) => {\n      return this.vwoBuilder.build(settings); // Builds the VWO instance with the fetched settings.\n    });\n  }\n\n  /**\n   * Gets the singleton instance of VWO.\n   * @returns The singleton instance of VWO.\n   */\n  static get Instance(): dynamic {\n    return this.instance;\n  }\n}\n\nlet _global: Record<string, any> = {};\n/**\n * Initializes a new instance of VWO with the provided options.\n * @param options Configuration options for the VWO instance.\n * @property {string} sdkKey - The SDK key for the VWO account.\n * @property {string} accountId - The account ID for the VWO account.\n * @property {GatewayServiceModel} gatewayService - The gateway service configuration.\n * @property {StorageService} storage - The storage configuration.\n * @returns\n */\n\nexport async function init(options: IVWOOptions): Promise<IVWOClient> {\n  const apiName = 'init';\n  const date = new Date().toISOString();\n\n  try {\n    if (!isObject(options)) {\n      const msg = buildMessage(ErrorLogMessagesEnum.INIT_OPTIONS_ERROR, {\n        date,\n      });\n      console.error(msg); // Ensures options is an object.\n    }\n\n    if (!options?.sdkKey || !isString(options?.sdkKey)) {\n      const msg = buildMessage(ErrorLogMessagesEnum.INIT_OPTIONS_SDK_KEY_ERROR, {\n        date,\n      });\n      console.error(msg); // Validates sdkKey presence and type.\n    }\n\n    if (!options.accountId) {\n      const msg = buildMessage(ErrorLogMessagesEnum.INIT_OPTIONS_ACCOUNT_ID_ERROR, {\n        date,\n      });\n      console.error(msg); // Validates accountId presence and type.\n    }\n\n    if (typeof process.env === 'undefined') {\n      options.platform = PlatformEnum.CLIENT;\n    } else {\n      options.platform = PlatformEnum.SERVER;\n    }\n\n    const instance: any = new VWO(options); // Creates a new VWO instance with the validated options.\n\n    _global = {\n      vwoInitDeferred: new Deferred(),\n      isSettingsFetched: false,\n      instance: null,\n    };\n\n    return instance.then((_vwoInstance) => {\n      _global.isSettingsFetched = true;\n      _global.instance = _vwoInstance;\n      _global.vwoInitDeferred.resolve(_vwoInstance);\n\n      return _vwoInstance;\n    });\n  } catch (err) {\n    const msg = buildMessage(ErrorLogMessagesEnum.API_THROW_ERROR, {\n      apiName,\n      err,\n    });\n\n    console.info(`[INFO]: VWO-SDK ${new Date().toISOString()} ${msg}`);\n  }\n}\n\nexport async function onInit() {\n  const apiName = 'onInit';\n\n  try {\n    _global.vwoInitDeferred = new Deferred();\n    const date = new Date().toISOString();\n\n    // If settings are already fetched, resolve the promise\n    if (_global.isSettingsFetched) {\n      const msg = buildMessage(InfoLogMessagesEnum.ON_INIT_ALREADY_RESOLVED, {\n        date,\n        apiName,\n      });\n\n      console.info(msg);\n      _global.vwoInitDeferred.resolve(_global.instance);\n    } else {\n      // wait for five seconds, else reject the promise\n      setTimeout(() => {\n        if (_global.isSettingsFetched) {\n          return;\n        }\n\n        const msg = buildMessage(InfoLogMessagesEnum.ON_INIT_SETTINGS_FAILED, {\n          date,\n        });\n\n        console.error(msg);\n        _global.vwoInitDeferred.reject(new Error('VWO settings could not be fetched'));\n      }, 5000);\n    }\n\n    return _global.vwoInitDeferred.promise;\n  } catch (err) {\n    const msg = buildMessage(ErrorLogMessagesEnum.API_THROW_ERROR, {\n      apiName,\n      err,\n    });\n\n    console.info(`[INFO]: VWO-SDK ${new Date().toISOString()} ${msg}`);\n  }\n}\n","/**\n * Copyright 2024 Wingify Software Pvt. Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { dynamic } from './types/Common';\n\nimport { ILogManager, LogManager } from './packages/logger';\nimport { NetworkManager } from './packages/network-layer';\nimport { SegmentationManager } from './packages/segmentation-evaluator';\n\nimport { Storage } from './packages/storage';\n\nimport { IVWOClient, VWOClient } from './VWOClient';\nimport { SettingsModel } from './models/settings/SettingsModel';\nimport { SettingsService } from './services/SettingsService';\n\nimport { DebugLogMessagesEnum, ErrorLogMessagesEnum, InfoLogMessagesEnum } from './enums/log-messages';\nimport { IVWOOptions } from './models/VWOOptionsModel';\nimport { isNumber } from './utils/DataTypeUtil';\nimport { cloneObject } from './utils/FunctionUtil';\nimport { buildMessage } from './utils/LogMessageUtil';\nimport { Deferred } from './utils/PromiseUtil';\nimport { setSettingsAndAddCampaignsToRules } from './utils/SettingsUtil';\nimport { getRandomUUID } from './utils/UuidUtil';\n\nexport interface IVWOBuilder {\n  settings: SettingsModel; // Holds the configuration settings for the VWO client\n  storage: Storage; // Interface for storage management\n  logManager: ILogManager; // Manages logging across the VWO SDK\n  isSettingsFetchInProgress: boolean; // Flag to check if settings fetch is in progress\n  vwoInstance: IVWOClient;\n\n  build(settings: SettingsModel): IVWOClient; // Builds and returns a new VWOClient instance\n\n  fetchSettings(): Promise<SettingsModel>; // Asynchronously fetches settings from the server\n  setSettingsService(): this; // Sets up the settings manager with provided options\n  getSettings(force: boolean): Promise<dynamic>; // Fetches settings, optionally forcing a refresh\n  setStorage(): this; // Sets up the storage connector based on provided options\n  setNetworkManager(): this; // Configures the network manager with client and mode\n  // initBatching(): this; // Initializes event batching with provided configuration\n  // setAnalyticsCallback(): this; // Configures the analytics callback based on provided options\n  initPolling(): this; // Sets up polling for settings at a specified interval\n  setLogger(): this; // Sets up the logger with specified options\n  setSegmentation(): this; // Configures the segmentation evaluator with provided options\n}\n\nexport class VWOBuilder implements IVWOBuilder {\n  readonly sdkKey: string;\n  readonly options: IVWOOptions;\n\n  private settingFileManager: SettingsService;\n\n  settings: SettingsModel;\n  storage: Storage;\n  logManager: ILogManager;\n  originalSettings: dynamic;\n  isSettingsFetchInProgress: boolean;\n  vwoInstance: IVWOClient;\n\n  constructor(options: IVWOOptions) {\n    this.options = options;\n  }\n\n  /**\n   * Sets the network manager with the provided client and development mode options.\n   * @returns {this} The instance of this builder.\n   */\n  setNetworkManager(): this {\n    const networkInstance = NetworkManager.Instance;\n    // Attach the network client from options\n    networkInstance.attachClient(this.options?.network?.client);\n\n    LogManager.Instance.debug(\n      buildMessage(DebugLogMessagesEnum.SERVICE_INITIALIZED, {\n        service: `Network Layer`,\n      }),\n    );\n    // Set the development mode based on options\n    networkInstance.getConfig().setDevelopmentMode(this.options?.isDevelopmentMode);\n    return this;\n  }\n\n  /**\n   * Sets the segmentation evaluator with the provided segmentation options.\n   * @returns {this} The instance of this builder.\n   */\n  setSegmentation(): this {\n    SegmentationManager.Instance.attachEvaluator(this.options?.segmentation);\n    LogManager.Instance.debug(\n      buildMessage(DebugLogMessagesEnum.SERVICE_INITIALIZED, {\n        service: `Segmentation Evaluator`,\n      }),\n    );\n    return this;\n  }\n\n  /**\n   * Fetches settings asynchronously, ensuring no parallel fetches.\n   * @param {boolean} [force=false] - Force fetch ignoring cache.\n   * @returns {Promise<SettingsModel>} A promise that resolves to the fetched settings.\n   */\n  fetchSettings(force?: boolean): Promise<SettingsModel> {\n    const deferredObject = new Deferred();\n\n    // Check if a fetch operation is already in progress\n    if (!this.isSettingsFetchInProgress) {\n      this.isSettingsFetchInProgress = true;\n      this.settingFileManager.getSettings(force).then((settings: SettingsModel) => {\n        // if force is false, update original settings, if true the request is from polling and no need to update original settings\n        if (!force) {\n          this.originalSettings = settings;\n        }\n\n        this.isSettingsFetchInProgress = false;\n        deferredObject.resolve(settings);\n      });\n\n      return deferredObject.promise;\n    } else {\n      // Avoid parallel fetches by recursively calling fetchSettings\n      return this.fetchSettings(force);\n    }\n  }\n\n  /**\n   * Gets the settings, fetching them if not cached or if forced.\n   * @param {boolean} [force=false] - Force fetch ignoring cache.\n   * @returns {Promise<SettingsModel>} A promise that resolves to the settings.\n   */\n  getSettings(force?: boolean): Promise<SettingsModel> {\n    const deferredObject = new Deferred();\n\n    try {\n      // Use cached settings if available and not forced to fetch\n      if (!force && this.settings) {\n        LogManager.Instance.info('Using already fetched and cached settings');\n        deferredObject.resolve(this.settings);\n      } else {\n        // Fetch settings if not cached or forced\n        this.fetchSettings(force).then((settings: SettingsModel) => {\n          deferredObject.resolve(settings);\n        });\n      }\n    } catch (err) {\n      LogManager.Instance.error('Failed to fetch settings. Error: ' + err);\n      deferredObject.resolve({});\n    }\n    return deferredObject.promise;\n  }\n\n  /**\n   * Sets the storage connector based on the provided storage options.\n   * @returns {this} The instance of this builder.\n   */\n  setStorage(): this {\n    if (this.options.storage) {\n      // Attach the storage connector from options\n      this.storage = Storage.Instance.attachConnector(this.options.storage);\n    } else {\n      // Set storage to null if no storage options provided\n      this.storage = null;\n    }\n\n    return this;\n  }\n\n  /**\n   * Sets the settings manager with the provided options.\n   * @returns {this} The instance of this builder.\n   */\n  setSettingsService(): this {\n    this.settingFileManager = new SettingsService(this.options);\n\n    return this;\n  }\n\n  /**\n   * Sets the logger with the provided logger options.\n   * @returns {this} The instance of this builder.\n   */\n  setLogger(): this {\n    this.logManager = new LogManager(this.options.logger || {});\n\n    LogManager.Instance.debug(\n      buildMessage(DebugLogMessagesEnum.SERVICE_INITIALIZED, {\n        service: `Logger`,\n      }),\n    );\n    return this;\n  }\n\n  /**\n   * Sets the analytics callback with the provided analytics options.\n   * @returns {this} The instance of this builder.\n   */\n  /* setAnalyticsCallback(): this {\n    if (!isObject(this.options.analyticsEvent)) {\n      // TODO: add logging here\n      return this;\n    }\n\n    if (!isFunction(this.options.analyticsEvent.eventCallback)) {\n      // TODO: add logging here\n      return this;\n    }\n\n    if (\n      this.options.analyticsEvent.isBatchingSupported &&\n      !isBoolean(this.options.analyticsEvent.isBatchingSupported)\n    ) {\n      // TODO:- add logging here\n      return this;\n    }\n\n    // AnalyticsEvent.Instance.attachCallback(\n    //   this.options.analyticsEvent.eventCallback,\n    //   this.options.analyticsEvent.isBatchingSupported\n    // );\n    return this;\n  } */\n\n  /**\n   * Generates a random user ID based on the provided API key.\n   * @returns {string} The generated random user ID.\n   */\n  getRandomUserId(): string {\n    const apiName = 'getRandomUserId';\n    try {\n      LogManager.Instance.debug(\n        buildMessage(DebugLogMessagesEnum.API_CALLED, {\n          apiName,\n        }),\n      );\n\n      return getRandomUUID(this.options.sdkKey);\n    } catch (err) {\n      LogManager.Instance.error(\n        buildMessage(ErrorLogMessagesEnum.API_THROW_ERROR, {\n          apiName,\n          err,\n        }),\n      );\n    }\n  }\n\n  /**\n   * Initializes the batching with the provided batch events options.\n   * @returns {this} The instance of this builder.\n   */\n  /* initBatching(): this {\n    if (!isObject(this.options.batchEvents)) {\n      // TODO:- add logging here\n      return this;\n    }\n\n    if (\n      isObject(this.options.batchEvents) &&\n      (!(\n        (isNumber(this.options.batchEvents.eventsPerRequest) &&\n          this.options.batchEvents.eventsPerRequest > 0 &&\n          this.options.batchEvents.eventsPerRequest <= Constants.MAX_EVENTS_PER_REQUEST) ||\n        (isNumber(this.options.batchEvents.requestTimeInterval) && this.options.batchEvents.requestTimeInterval >= 1)\n      ) ||\n        !isFunction(this.options.batchEvents.flushCallback))\n    ) {\n      LogManager.Instance.error('Invalid batchEvents config');\n      // throw new Error('Invalid batchEvents config');\n      return this;\n    }\n\n    // BatchEventsQueue.Instance.setBatchConfig(this.options.batchEvents, this.options.sdkKey); // TODO\n\n    return this;\n  } */\n\n  /**\n   * Initializes the polling with the provided poll interval.\n   * @returns {this} The instance of this builder.\n   */\n  initPolling(): this {\n    if (!this.options.pollInterval) {\n      return this;\n    }\n\n    if (this.options.pollInterval && !isNumber(this.options.pollInterval)) {\n      LogManager.Instance.error(\n        buildMessage(ErrorLogMessagesEnum.INIT_OPTIONS_INVALID, {\n          key: 'pollInterval',\n          correctType: 'number',\n        }),\n      );\n      return this;\n    }\n\n    if (this.options.pollInterval && this.options.pollInterval < 1000) {\n      LogManager.Instance.error(\n        buildMessage(ErrorLogMessagesEnum.INIT_OPTIONS_INVALID, {\n          key: 'pollInterval',\n          correctType: 'number',\n        }),\n      );\n      return this;\n    }\n\n    this.checkAndPoll();\n\n    return this;\n  }\n\n  /**\n   * Builds a new VWOClient instance with the provided settings.\n   * @param {SettingsModel} settings - The settings for the VWOClient.\n   * @returns {VWOClient} The new VWOClient instance.\n   */\n  build(settings: SettingsModel): IVWOClient {\n    this.vwoInstance = new VWOClient(settings, this.options);\n\n    return this.vwoInstance;\n  }\n\n  /**\n   * Checks and polls for settings updates at the provided interval.\n   */\n  checkAndPoll(): void {\n    const pollingInterval = this.options.pollInterval;\n\n    setInterval(() => {\n      this.getSettings(true)\n        .then((latestSettings: SettingsModel) => {\n          const lastSettings = JSON.stringify(this.originalSettings);\n          const stringifiedLatestSettings = JSON.stringify(latestSettings);\n          if (stringifiedLatestSettings !== lastSettings) {\n            this.originalSettings = latestSettings;\n            const clonedSettings = cloneObject(latestSettings);\n\n            LogManager.Instance.info(InfoLogMessagesEnum.POLLING_SET_SETTINGS);\n            setSettingsAndAddCampaignsToRules(clonedSettings, this.vwoInstance);\n          } else {\n            LogManager.Instance.info(InfoLogMessagesEnum.POLLING_NO_CHANGE_IN_SETTINGS);\n          }\n        })\n        .catch(() => {\n          LogManager.Instance.error(ErrorLogMessagesEnum.POLLING_FETCH_SETTINGS_FAILED);\n        });\n    }, pollingInterval);\n  }\n}\n","/**\n * Copyright 2024 Wingify Software Pvt. Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { LogManager } from './packages/logger';\nimport { Storage } from './packages/storage';\n\nimport { FlagApi } from './api/GetFlag';\nimport { SetAttributeApi } from './api/SetAttribute';\nimport { TrackApi } from './api/TrackEvent';\n\nimport { DebugLogMessagesEnum, ErrorLogMessagesEnum, InfoLogMessagesEnum } from './enums/log-messages';\nimport { SettingsModel } from './models/settings/SettingsModel';\n\nimport { dynamic } from './types/Common';\n// import { BatchEventsQueue } from './services/batchEventsQueue';\n\nimport { SettingsSchema } from './models/schemas/SettingsSchemaValidation';\nimport { ContextModel } from './models/user/ContextModel';\nimport HooksService from './services/HooksService';\nimport { UrlUtil } from './utils/UrlUtil';\n\nimport { getType, isBoolean, isNumber, isObject, isString } from './utils/DataTypeUtil';\n\nimport { buildMessage } from './utils/LogMessageUtil';\nimport { Deferred } from './utils/PromiseUtil';\n\nimport { IVWOOptions } from './models/VWOOptionsModel';\nimport { setSettingsAndAddCampaignsToRules } from './utils/SettingsUtil';\n\nexport interface IVWOClient {\n  readonly options?: IVWOOptions;\n  settings: SettingsModel;\n\n  getFlag(featureKey: string, context: Record<string, any>): Record<any, any>;\n  trackEvent(\n    eventName: string,\n    context: Record<string, any>,\n    eventProperties: Record<string, dynamic>,\n  ): Promise<Record<string, boolean>>;\n  setAttribute(attributeKey: string, attributeValue: boolean | string | number, context: Record<string, any>): void;\n}\n\nexport class VWOClient implements IVWOClient {\n  settings: SettingsModel;\n  originalSettings: Record<any, any>;\n  storage: Storage;\n\n  constructor(settings: SettingsModel, options: IVWOOptions) {\n    this.options = options;\n\n    setSettingsAndAddCampaignsToRules(settings, this);\n\n    UrlUtil.init({\n      collectionPrefix: this.settings.getCollectionPrefix(),\n    });\n\n    LogManager.Instance.info(InfoLogMessagesEnum.CLIENT_INITIALIZED);\n    return this;\n  }\n  options?: IVWOOptions;\n  /**\n   * Retrieves the value of a feature flag for a given feature key and context.\n   * This method validates the feature key and context, ensures the settings are valid, and then uses the FlagApi to get the flag value.\n   *\n   * @param {string} featureKey - The key of the feature to retrieve.\n   * @param {ContextModel} context - The context in which the feature flag is being retrieved, must include a valid user ID.\n   * @returns {Promise<Record<any, any>>} - A promise that resolves to the feature flag value.\n   */\n  getFlag(featureKey: string, context: Record<string, any>): Record<any, any> {\n    const apiName = 'getFlag';\n    const deferredObject = new Deferred();\n    const errorReturnSchema = {\n      isEnabled: (): boolean => false,\n      getVariables: (): Array<Record<string, dynamic>> => [],\n      getVariable: (_key: string, defaultValue: any): dynamic => defaultValue,\n    };\n\n    try {\n      const hooksService = new HooksService(this.options);\n\n      LogManager.Instance.debug(\n        buildMessage(DebugLogMessagesEnum.API_CALLED, {\n          apiName,\n        }),\n      );\n\n      // Validate featureKey is a string\n      if (!isString(featureKey)) {\n        LogManager.Instance.error(\n          buildMessage(ErrorLogMessagesEnum.API_INVALID_PARAM, {\n            apiName,\n            key: 'featureKey',\n            type: getType(featureKey),\n            correctType: 'string',\n          }),\n        );\n\n        throw new TypeError('TypeError: featureKey should be a string');\n      }\n\n      // Validate settings are loaded and valid\n      if (!new SettingsSchema().isSettingsValid(this.originalSettings)) {\n        LogManager.Instance.error(ErrorLogMessagesEnum.API_SETTING_INVALID);\n        throw new Error('TypeError: Invalid Settings');\n      }\n\n      // Validate user ID is present in context\n      if (!context || !context.id) {\n        LogManager.Instance.error(ErrorLogMessagesEnum.API_CONTEXT_INVALID);\n        throw new TypeError('TypeError: Invalid context');\n      }\n\n      const contextModel = new ContextModel().modelFromDictionary(context);\n\n      new FlagApi()\n        .get(featureKey, this.settings, contextModel, hooksService)\n        .then((data: any) => {\n          deferredObject.resolve(data);\n        })\n        .catch(() => {\n          deferredObject.resolve(errorReturnSchema);\n        });\n    } catch (err) {\n      LogManager.Instance.info(\n        buildMessage(ErrorLogMessagesEnum.API_THROW_ERROR, {\n          apiName,\n          err,\n        }),\n      );\n\n      deferredObject.resolve(errorReturnSchema);\n    }\n\n    return deferredObject.promise;\n  }\n\n  /**\n   * Tracks an event with specified properties and context.\n   * This method validates the types of the inputs and ensures the settings and user context are valid before proceeding.\n   *\n   * @param {string} eventName - The name of the event to track.\n   * @param {ContextModel} context - The context in which the event is being tracked, must include a valid user ID.\n   * @param {Record<string, dynamic>} eventProperties - The properties associated with the event.\n   * @returns {Promise<Record<string, boolean>>} - A promise that resolves to the result of the tracking operation.\n   */\n  trackEvent(\n    eventName: string,\n    context: Record<string, any>,\n    eventProperties: Record<string, dynamic> = {},\n  ): Promise<Record<string, boolean>> {\n    const apiName = 'trackEvent';\n    const deferredObject = new Deferred();\n\n    try {\n      const hooksService = new HooksService(this.options);\n\n      // Log the API call\n      LogManager.Instance.debug(\n        buildMessage(DebugLogMessagesEnum.API_CALLED, {\n          apiName,\n        }),\n      );\n\n      // Validate eventName is a string\n      if (!isString(eventName)) {\n        LogManager.Instance.error(\n          buildMessage(ErrorLogMessagesEnum.API_INVALID_PARAM, {\n            apiName,\n            key: 'eventName',\n            type: getType(eventName),\n            correctType: 'string',\n          }),\n        );\n\n        throw new TypeError('TypeError: Event-name should be a string');\n      }\n\n      // Validate eventProperties is an object\n      if (!isObject(eventProperties)) {\n        LogManager.Instance.error(\n          buildMessage(ErrorLogMessagesEnum.API_INVALID_PARAM, {\n            apiName,\n            key: 'eventProperties',\n            type: getType(eventProperties),\n            correctType: 'object',\n          }),\n        );\n\n        throw new TypeError('TypeError: eventProperties should be an object');\n      }\n\n      // Validate settings are loaded and valid\n      if (!new SettingsSchema().isSettingsValid(this.originalSettings)) {\n        LogManager.Instance.error(ErrorLogMessagesEnum.API_SETTING_INVALID);\n        throw new Error('TypeError: Invalid Settings');\n      }\n\n      // Validate user ID is present in context\n      if (!context || !context.id) {\n        LogManager.Instance.error(ErrorLogMessagesEnum.API_CONTEXT_INVALID);\n        throw new TypeError('TypeError: Invalid context');\n      }\n\n      const contextModel = new ContextModel().modelFromDictionary(context);\n\n      // Proceed with tracking the event\n      new TrackApi()\n        .track(this.settings, eventName, contextModel, eventProperties, hooksService)\n        .then((data) => {\n          deferredObject.resolve(data);\n        })\n        .catch(() => {\n          deferredObject.resolve({ [eventName]: false });\n        });\n    } catch (err) {\n      // Log any errors encountered during the operation\n      LogManager.Instance.info(\n        buildMessage(ErrorLogMessagesEnum.API_THROW_ERROR, {\n          apiName,\n          err,\n        }),\n      );\n\n      deferredObject.resolve({ [eventName]: false });\n    }\n\n    return deferredObject.promise;\n  }\n\n  /**\n   * Sets an attribute for a user in the context provided.\n   * This method validates the types of the inputs before proceeding with the API call.\n   *\n   * @param {string} attributeKey - The key of the attribute to set.\n   * @param {string} attributeValue - The value of the attribute to set.\n   * @param {ContextModel} context - The context in which the attribute should be set, must include a valid user ID.\n   */\n  setAttribute(attributeKey: string, attributeValue: boolean | string | number, context: Record<string, any>): void {\n    const apiName = 'setAttribute';\n\n    try {\n      // Log the API call\n      LogManager.Instance.debug(\n        buildMessage(DebugLogMessagesEnum.API_CALLED, {\n          apiName,\n        }),\n      );\n\n      // Validate attributeKey is a string\n      if (!isString(attributeKey)) {\n        LogManager.Instance.error(\n          buildMessage(ErrorLogMessagesEnum.API_INVALID_PARAM, {\n            apiName,\n            key: 'attributeKey',\n            type: getType(attributeKey),\n            correctType: 'string',\n          }),\n        );\n\n        throw new TypeError('TypeError: attributeKey should be a string');\n      }\n      // Validate attributeValue is a string\n      if (!isString(attributeValue) && !isNumber(attributeValue) && !isBoolean(attributeValue)) {\n        LogManager.Instance.error(\n          buildMessage(ErrorLogMessagesEnum.API_INVALID_PARAM, {\n            apiName,\n            key: 'attributeValue',\n            type: getType(attributeValue),\n            correctType: 'boolean | string | number',\n          }),\n        );\n\n        throw new TypeError('TypeError: attributeValue should be a string');\n      }\n\n      // Validate user ID is present in context\n      if (!context || !context.id) {\n        LogManager.Instance.error(ErrorLogMessagesEnum.API_CONTEXT_INVALID);\n        throw new TypeError('TypeError: Invalid context');\n      }\n\n      const contextModel = new ContextModel().modelFromDictionary(context);\n\n      // Proceed with setting the attribute if validation is successful\n      new SetAttributeApi().setAttribute(this.settings, attributeKey, attributeValue, contextModel);\n    } catch (err) {\n      // Log any errors encountered during the operation\n      LogManager.Instance.info(\n        buildMessage(ErrorLogMessagesEnum.API_THROW_ERROR, {\n          apiName,\n          err,\n        }),\n      );\n    }\n  }\n}\n","/**\n * Copyright 2024 Wingify Software Pvt. Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FeatureModel } from '../models/campaign/FeatureModel';\nimport { SettingsModel } from '../models/settings/SettingsModel';\n\nimport { StorageDecorator } from '../decorators/StorageDecorator';\nimport { ApiEnum } from '../enums/ApiEnum';\nimport { CampaignTypeEnum } from '../enums/CampaignTypeEnum';\nimport { DebugLogMessagesEnum, ErrorLogMessagesEnum, InfoLogMessagesEnum } from '../enums/log-messages';\nimport { CampaignModel } from '../models/campaign/CampaignModel';\nimport { VariableModel } from '../models/campaign/VariableModel';\nimport { VariationModel } from '../models/campaign/VariationModel';\nimport { ContextModel } from '../models/user/ContextModel';\nimport { LogManager } from '../packages/logger';\nimport { SegmentationManager } from '../packages/segmentation-evaluator';\nimport IHooksService from '../services/HooksService';\nimport { StorageService } from '../services/StorageService';\nimport { getVariationFromCampaignKey } from '../utils/CampaignUtil';\nimport { isObject } from '../utils/DataTypeUtil';\nimport { evaluateTrafficAndGetVariation } from '../utils/DecisionUtil';\nimport { getAllExperimentRules, getFeatureFromKey, getSpecificRulesBasedOnType } from '../utils/FunctionUtil';\nimport { createAndSendImpressionForVariationShown } from '../utils/ImpressionUtil';\nimport { buildMessage } from '../utils/LogMessageUtil';\nimport { Deferred } from '../utils/PromiseUtil';\nimport { evaluateRule } from '../utils/RuleEvaluationUtil';\n\ninterface IGetFlag {\n  get(\n    featureKey: string,\n    settings: SettingsModel,\n    context: ContextModel,\n    hooksService: IHooksService,\n  ): Promise<FeatureModel>;\n}\n\nexport class FlagApi implements IGetFlag {\n  async get(\n    featureKey: string,\n    settings: SettingsModel,\n    context: ContextModel,\n    hooksService: IHooksService,\n  ): Promise<FeatureModel> {\n    let isEnabled = false;\n    let rolloutVariationToReturn = null;\n    let experimentVariationToReturn = null;\n    let shouldCheckForExperimentsRules = false;\n\n    const passedRulesInformation = {}; // for storing and integration callback\n    const deferredObject = new Deferred();\n    const evaluatedFeatureMap: Map<string, any> = new Map();\n\n    // get feature object from feature key\n    const feature = getFeatureFromKey(settings, featureKey);\n    const decision = {\n      featureName: feature?.getName(),\n      featureId: feature?.getId(),\n      featureKey: feature?.getKey(),\n      userId: context?.getId(),\n      api: ApiEnum.GET_FLAG,\n    };\n\n    const storageService = new StorageService();\n    const storedData: Record<any, any> = await new StorageDecorator().getFeatureFromStorage(\n      featureKey,\n      context,\n      storageService,\n    );\n\n    if (storedData?.experimentVariationId) {\n      if (storedData.experimentKey) {\n        const variation: VariationModel = getVariationFromCampaignKey(\n          settings,\n          storedData.experimentKey,\n          storedData.experimentVariationId,\n        );\n\n        if (variation) {\n          LogManager.Instance.info(\n            buildMessage(InfoLogMessagesEnum.STORED_VARIATION_FOUND, {\n              variationKey: variation.getKey(),\n              userId: context.getId(),\n              experimentType: 'experiment',\n              experimentKey: storedData.experimentKey,\n            }),\n          );\n          deferredObject.resolve({\n            isEnabled: () => true,\n            getVariables: () => variation?.getVariables(),\n            getVariable: (\n              key: string,\n              defaultValue: string, // loop over all variables object and return the value where key is equal to given key else return given default value\n            ) =>\n              variation\n                ?.getVariables()\n                .find((variable) => new VariableModel().modelFromDictionary(variable).getKey() === key)\n                ?.getValue() || defaultValue,\n          });\n\n          return deferredObject.promise;\n        }\n      }\n    } else if (storedData?.rolloutKey && storedData?.rolloutId) {\n      const variation: VariationModel = getVariationFromCampaignKey(\n        settings,\n        storedData.rolloutKey,\n        storedData.rolloutVariationId,\n      );\n      if (variation) {\n        LogManager.Instance.info(\n          buildMessage(InfoLogMessagesEnum.STORED_VARIATION_FOUND, {\n            variationKey: variation.getKey(),\n            userId: context.getId(),\n            experimentType: 'rollout',\n            experimentKey: storedData.rolloutKey,\n          }),\n        );\n\n        LogManager.Instance.debug(\n          buildMessage(DebugLogMessagesEnum.EXPERIMENTS_EVALUATION_WHEN_ROLLOUT_PASSED, {\n            userId: context.getId(),\n          }),\n        );\n\n        isEnabled = true;\n        shouldCheckForExperimentsRules = true;\n        rolloutVariationToReturn = variation;\n        const featureInfo = {\n          rolloutId: storedData.rolloutId,\n          rolloutKey: storedData.rolloutKey,\n          rolloutVariationId: storedData.rolloutVariationId,\n        };\n        evaluatedFeatureMap.set(featureKey, featureInfo);\n        Object.assign(passedRulesInformation, featureInfo);\n      }\n    }\n\n    if (!isObject(feature) || feature === undefined) {\n      LogManager.Instance.error(\n        buildMessage(ErrorLogMessagesEnum.FEATURE_NOT_FOUND, {\n          featureKey,\n        }),\n      );\n\n      deferredObject.reject({});\n\n      return deferredObject.promise;\n    }\n\n    // TODO: remove await from here, need not wait for gateway service at the time of calling getFlag\n    await SegmentationManager.Instance.setContextualData(settings, feature, context);\n\n    const rollOutRules = getSpecificRulesBasedOnType(feature, CampaignTypeEnum.ROLLOUT); // get all rollout rules\n\n    if (rollOutRules.length > 0 && !isEnabled) {\n      const rolloutRulesToEvaluate = [];\n\n      for (const rule of rollOutRules) {\n        const { preSegmentationResult, updatedDecision } = await evaluateRule(\n          settings,\n          feature,\n          rule,\n          context,\n          evaluatedFeatureMap,\n          null,\n          storageService,\n          decision,\n        );\n\n        Object.assign(decision, updatedDecision);\n\n        if (preSegmentationResult) {\n          // if pre segment passed, then break the loop and check the traffic allocation\n          rolloutRulesToEvaluate.push(rule);\n\n          evaluatedFeatureMap.set(featureKey, {\n            rolloutId: rule.getId(),\n            rolloutKey: rule.getKey(),\n            rolloutVariationId: rule.getVariations()[0]?.getId(),\n          });\n\n          break;\n        }\n\n        continue; // if rule does not satisfy, then check for other ROLLOUT rules\n      }\n\n      if (rolloutRulesToEvaluate.length > 0) {\n        const passedRolloutCampaign = new CampaignModel().modelFromDictionary(rolloutRulesToEvaluate[0]);\n        const variation = evaluateTrafficAndGetVariation(settings, passedRolloutCampaign, context.getId());\n\n        if (isObject(variation) && Object.keys(variation).length > 0) {\n          isEnabled = true;\n          shouldCheckForExperimentsRules = true;\n          rolloutVariationToReturn = variation;\n\n          _updateIntegrationsDecisionObject(passedRolloutCampaign, variation, passedRulesInformation, decision);\n\n          createAndSendImpressionForVariationShown(settings, passedRolloutCampaign.getId(), variation.getId(), context);\n        }\n      }\n    } else if (rollOutRules.length === 0) {\n      LogManager.Instance.debug(DebugLogMessagesEnum.EXPERIMENTS_EVALUATION_WHEN_NO_ROLLOUT_PRESENT);\n      shouldCheckForExperimentsRules = true;\n    }\n\n    if (shouldCheckForExperimentsRules) {\n      const experimentRulesToEvaluate = [];\n\n      // if rollout rule is passed, get all ab and Personalize rules\n      const experimentRules = getAllExperimentRules(feature);\n      const megGroupWinnerCampaigns: Map<number, number> = new Map();\n\n      for (const rule of experimentRules) {\n        const { preSegmentationResult, whitelistedObject, updatedDecision } = await evaluateRule(\n          settings,\n          feature,\n          rule,\n          context,\n          evaluatedFeatureMap,\n          megGroupWinnerCampaigns,\n          storageService,\n          decision,\n        );\n\n        Object.assign(decision, updatedDecision);\n\n        if (preSegmentationResult) {\n          if (whitelistedObject === null) {\n            // whitelistedObject will be null if pre segment passed but whitelisting failed\n            experimentRulesToEvaluate.push(rule);\n          } else {\n            isEnabled = true;\n            experimentVariationToReturn = whitelistedObject.variation;\n            Object.assign(passedRulesInformation, {\n              experimentId: rule.getId(),\n              experimentKey: rule.getKey(),\n              experimentVariationId: whitelistedObject.variationId,\n            });\n          }\n\n          break;\n        }\n        continue;\n      }\n\n      if (experimentRulesToEvaluate.length > 0) {\n        const campaign = new CampaignModel().modelFromDictionary(experimentRulesToEvaluate[0]);\n        const variation = evaluateTrafficAndGetVariation(settings, campaign, context.getId());\n\n        if (isObject(variation) && Object.keys(variation).length > 0) {\n          isEnabled = true;\n          experimentVariationToReturn = variation;\n\n          _updateIntegrationsDecisionObject(campaign, variation, passedRulesInformation, decision);\n\n          createAndSendImpressionForVariationShown(settings, campaign.getId(), variation.getId(), context);\n        }\n      }\n    }\n\n    // If flag is enabled, store it in data\n    if (isEnabled) {\n      // set storage data\n      new StorageDecorator().setDataInStorage(\n        {\n          featureKey,\n          context,\n          ...passedRulesInformation,\n        },\n        storageService,\n      );\n    }\n\n    // call integration callback, if defined\n    hooksService.set(decision);\n    hooksService.execute(hooksService.get());\n\n    // Send data for Impact Campaign, if defined\n    if (feature.getImpactCampaign()?.getCampaignId()) {\n      LogManager.Instance.info(\n        buildMessage(InfoLogMessagesEnum.IMPACT_ANALYSIS, {\n          userId: context.getId(),\n          featureKey,\n          status: isEnabled ? 'enabled' : 'disabled',\n        }),\n      );\n\n      createAndSendImpressionForVariationShown(\n        settings,\n        feature.getImpactCampaign()?.getCampaignId(),\n        isEnabled ? 2 : 1, // 2 is for Variation(flag enabled), 1 is for Control(flag disabled)\n        context,\n      );\n    }\n\n    const variablesForEvaluatedFlag =\n      experimentVariationToReturn?.variables ?? rolloutVariationToReturn?.variables ?? [];\n\n    deferredObject.resolve({\n      isEnabled: () => isEnabled,\n      getVariables: () => variablesForEvaluatedFlag,\n      getVariable: (\n        key: string,\n        defaultValue: string, // loop over all variables object and return the value where key is equal to given key else return given default value\n      ) => {\n        const variable = variablesForEvaluatedFlag.find((variable) => variable.key === key);\n\n        return variable?.value ?? defaultValue;\n      },\n    });\n\n    return deferredObject.promise;\n  }\n}\n\n// Not PRIVATE methods but helper methods. If need be, move them to some util file to be reused by other API(s)\n\nfunction _updateIntegrationsDecisionObject(\n  campaign: CampaignModel,\n  variation: VariationModel,\n  passedRulesInformation: any,\n  decision: any,\n): void {\n  if (campaign.getType() === CampaignTypeEnum.ROLLOUT) {\n    Object.assign(passedRulesInformation, {\n      rolloutId: campaign.getId(),\n      rolloutKey: campaign.getKey(),\n      rolloutVariationId: variation.getId(),\n    });\n  } else {\n    Object.assign(passedRulesInformation, {\n      experimentId: campaign.getId(),\n      experimentKey: campaign.getKey(),\n      experimentVariationId: variation.getId(),\n    });\n  }\n  Object.assign(decision, passedRulesInformation);\n}\n","/**\n * Copyright 2024 Wingify Software Pvt. Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ContextModel } from '../models/user/ContextModel';\nimport { EventEnum } from '../enums/EventEnum';\nimport { getEventsBaseProperties, getAttributePayloadData, sendPostApiRequest } from '../utils/NetworkUtil';\nimport { SettingsModel } from '../models/settings/SettingsModel';\n\ninterface ISetAttribute {\n  /**\n   * Sets an attribute for a user.\n   * @param settings Configuration settings.\n   * @param attributeKey The key of the attribute to set.\n   * @param attributeValue The value of the attribute.\n   * @param context Context containing user information.\n   */\n  setAttribute(settings: SettingsModel, attributeKey: string, attributeValue: any, context: ContextModel): void;\n}\n\nexport class SetAttributeApi implements ISetAttribute {\n  /**\n   * Implementation of setAttribute to create an impression for a user attribute.\n   * @param settings Configuration settings.\n   * @param attributeKey The key of the attribute to set.\n   * @param attributeValue The value of the attribute.\n   * @param context Context containing user information.\n   */\n  setAttribute(settings: SettingsModel, attributeKey: string, attributeValue: any, context: ContextModel): void {\n    createImpressionForAttribute(settings, attributeKey, attributeValue, context);\n  }\n}\n\n/**\n * Creates an impression for a user attribute and sends it to the server.\n * @param settings Configuration settings.\n * @param attributeKey The key of the attribute.\n * @param attributeValue The value of the attribute.\n * @param user User details.\n */\nconst createImpressionForAttribute = async (\n  settings: SettingsModel,\n  attributeKey: string,\n  attributeValue: any,\n  context: ContextModel,\n) => {\n  // Retrieve base properties for the event\n  const properties = getEventsBaseProperties(\n    settings,\n    EventEnum.VWO_SYNC_VISITOR_PROP,\n    encodeURIComponent(context.getUserAgent()),\n    context.getIpAddress(),\n  );\n  // Construct payload data for the attribute\n  const payload = getAttributePayloadData(\n    settings,\n    context.getId(),\n    EventEnum.VWO_SYNC_VISITOR_PROP,\n    attributeKey,\n    attributeValue,\n    context.getUserAgent(),\n    context.getIpAddress(),\n  );\n\n  // Send the constructed payload via POST request\n  sendPostApiRequest(properties, payload);\n};\n","/**\n * Copyright 2024 Wingify Software Pvt. Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ApiEnum } from '../enums/ApiEnum';\nimport { ErrorLogMessagesEnum } from '../enums/log-messages';\nimport { SettingsModel } from '../models/settings/SettingsModel';\nimport { ContextModel } from '../models/user/ContextModel';\nimport { LogManager } from '../packages/logger';\nimport IHooksService from '../services/HooksService';\nimport { dynamic } from '../types/Common';\nimport { doesEventBelongToAnyFeature } from '../utils/FunctionUtil';\nimport { buildMessage } from '../utils/LogMessageUtil';\nimport { getEventsBaseProperties, getTrackGoalPayloadData, sendPostApiRequest } from '../utils/NetworkUtil';\n\ninterface ITrack {\n  /**\n   * Tracks an event with given properties and context.\n   * @param settings Configuration settings for the tracking.\n   * @param eventName Name of the event to track.\n   * @param context Contextual information like user details.\n   * @param eventProperties Properties associated with the event.\n   * @param hooksService Manager for handling hooks and callbacks.\n   * @returns A promise that resolves to a record indicating the success or failure of the event tracking.\n   */\n  track(\n    settings: SettingsModel,\n    eventName: string,\n    context: ContextModel,\n    eventProperties: Record<string, dynamic>,\n    hooksService: IHooksService,\n  ): Promise<Record<string, boolean>>;\n}\n\nexport class TrackApi implements ITrack {\n  /**\n   * Implementation of the track method to handle event tracking.\n   * Checks if the event exists, creates an impression, and executes hooks.\n   */\n  async track(\n    settings: SettingsModel,\n    eventName: string,\n    context: ContextModel,\n    eventProperties: any,\n    hooksService: IHooksService,\n  ): Promise<Record<string, boolean>> {\n    if (doesEventBelongToAnyFeature(eventName, settings)) {\n      // Create an impression for the track event\n      createImpressionForTrack(settings, eventName, context, eventProperties);\n      // Set and execute integration callback for the track event\n      hooksService.set({ eventName: eventName, api: ApiEnum.TRACK });\n      hooksService.execute(hooksService.get());\n\n      return { [eventName]: true };\n    }\n    // Log an error if the event does not exist\n    LogManager.Instance.error(\n      buildMessage(ErrorLogMessagesEnum.EVENT_NOT_FOUND, {\n        eventName,\n      }),\n    );\n\n    return { [eventName]: false };\n  }\n}\n\n/**\n * Creates an impression for a track event and sends it via a POST API request.\n * @param settings Configuration settings for the tracking.\n * @param eventName Name of the event to track.\n * @param user User details.\n * @param eventProperties Properties associated with the event.\n */\nconst createImpressionForTrack = async (\n  settings: SettingsModel,\n  eventName: string,\n  context: ContextModel,\n  eventProperties: any,\n) => {\n  // Get base properties for the event\n  const properties = getEventsBaseProperties(\n    settings,\n    eventName,\n    encodeURIComponent(context.getUserAgent()),\n    context.getIpAddress(),\n  );\n  // Prepare the payload for the track goal\n  const payload = getTrackGoalPayloadData(\n    settings,\n    context.getId(),\n    eventName,\n    eventProperties,\n    context?.getUserAgent(),\n    context?.getIpAddress(),\n  );\n  // Send the prepared payload via POST API request\n  sendPostApiRequest(properties, payload);\n};\n","/**\n * Copyright 2024 Wingify Software Pvt. Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport const HTTP = 'http';\nexport const HTTPS = 'https';\n\nexport const SEED_URL = 'https://vwo.com';\nexport const HTTP_PROTOCOL = `${HTTP}://`;\nexport const HTTPS_PROTOCOL = `${HTTPS}://`;\nexport const BASE_URL = 'dev.visualwebsiteoptimizer.com';\n","/**\n * Copyright 2024 Wingify Software Pvt. Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* global SDK_VERSION */\nimport { PlatformEnum } from '../enums/PlatformEnum';\nimport { SEED_URL, HTTP_PROTOCOL, HTTPS_PROTOCOL } from './Url';\n\nlet packageFile;\nlet platform;\n\n// For client-side SDK, to keep the build size low\n// avoid adding the whole package file in the bundle\nif (typeof process.env === 'undefined') {\n  packageFile = {\n    name: 'vwo-fme-javascript-sdk', // will be replaced by webpack for browser build\n    // @ts-expect-error This will be relaved by webpack at the time of build for browser\n    version: SDK_VERSION, // will be replaced by webpack for browser build\n  };\n\n  platform = PlatformEnum.CLIENT;\n} else {\n  packageFile = require('../../package.json');\n  platform = PlatformEnum.SERVER;\n}\n\nexport const Constants = {\n  SDK_NAME: packageFile.name,\n  SDK_VERSION: packageFile.version,\n\n  PLATFORM: platform,\n\n  MAX_TRAFFIC_PERCENT: 100,\n  MAX_TRAFFIC_VALUE: 10000,\n  STATUS_RUNNING: 'RUNNING',\n\n  SEED_VALUE: 1,\n  MAX_EVENTS_PER_REQUEST: 5000,\n  DEFAULT_REQUEST_TIME_INTERVAL: 600, // 10 * 60(secs) = 600 secs i.e. 10 minutes\n  DEFAULT_EVENTS_PER_REQUEST: 100,\n\n  SEED_URL,\n  HTTP_PROTOCOL,\n  HTTPS_PROTOCOL,\n\n  SETTINGS: 'settings',\n  SETTINGS_EXPIRY: 10000000,\n  SETTINGS_TIMEOUT: 50000,\n\n  HOST_NAME: 'dev.visualwebsiteoptimizer.com',\n  SETTINTS_ENDPOINT: '/server-side/v2-settings',\n  LOCATION_ENDPOINT: '/getLocation',\n\n  VWO_FS_ENVIRONMENT: 'vwo_fs_environment',\n\n  RANDOM_ALGO: 1,\n\n  API_VERSION: '1',\n};\n","/**\n * Copyright 2024 Wingify Software Pvt. Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { LogManager } from '../packages/logger';\n\nimport { StorageEnum } from '../enums/StorageEnum';\nimport { FeatureModel } from '../models/campaign/FeatureModel';\nimport { VariationModel } from '../models/campaign/VariationModel';\nimport { IStorageService } from '../services/StorageService';\n\nimport { ErrorLogMessagesEnum } from '../enums/log-messages';\nimport { ContextModel } from '../models/user/ContextModel';\nimport { buildMessage } from '../utils/LogMessageUtil';\nimport { Deferred } from '../utils/PromiseUtil';\n\ninterface IStorageDecorator {\n  /**\n   * Sets data in storage.\n   * @param data The data to be stored.\n   * @param storageService The storage service instance.\n   * @returns A promise that resolves to a VariationModel.\n   */\n  setDataInStorage(data: Record<any, any>, storageService: IStorageService): Promise<VariationModel>;\n\n  /**\n   * Retrieves a feature from storage.\n   * @param featureKey The key of the feature to retrieve.\n   * @param user The user object.\n   * @param storageService The storage service instance.\n   * @returns A promise that resolves to the retrieved feature or relevant status.\n   */\n  getFeatureFromStorage(featureKey: FeatureModel, context: ContextModel, storageService: IStorageService): Promise<any>;\n}\n\nexport class StorageDecorator implements IStorageDecorator {\n  /**\n   * Asynchronously retrieves a feature from storage based on the feature key and user.\n   * @param featureKey The key of the feature to retrieve.\n   * @param user The user object.\n   * @param storageService The storage service instance.\n   * @returns A promise that resolves to the retrieved feature or relevant status.\n   */\n  async getFeatureFromStorage(featureKey: any, context: ContextModel, storageService: IStorageService): Promise<any> {\n    const deferredObject = new Deferred();\n    storageService.getDataInStorage(featureKey, context).then((campaignMap: Record<any, any> | StorageEnum) => {\n      switch (campaignMap) {\n        case StorageEnum.STORAGE_UNDEFINED:\n          deferredObject.resolve(null); // No storage defined\n          break;\n        case StorageEnum.NO_DATA_FOUND:\n          deferredObject.resolve(null); // No data found in storage\n          break;\n        case StorageEnum.INCORRECT_DATA:\n          deferredObject.resolve(StorageEnum.INCORRECT_DATA); // Incorrect data found\n          break;\n        case StorageEnum.CAMPAIGN_PAUSED:\n          deferredObject.resolve(null); // Campaign is paused\n          break;\n        case StorageEnum.VARIATION_NOT_FOUND:\n          deferredObject.resolve(StorageEnum.VARIATION_NOT_FOUND); // No variation found\n          break;\n        case StorageEnum.WHITELISTED_VARIATION:\n          deferredObject.resolve(null); // Whitelisted variation, handle accordingly\n          break;\n        default:\n          deferredObject.resolve(campaignMap); // Valid data found, resolve with it\n      }\n    });\n\n    return deferredObject.promise;\n  }\n\n  /**\n   * Sets data in storage based on the provided data object.\n   * @param data The data to be stored, including feature key and user details.\n   * @param storageService The storage service instance.\n   * @returns A promise that resolves when the data is successfully stored.\n   */\n  setDataInStorage(data: Record<any, any>, storageService: IStorageService): Promise<VariationModel> {\n    const deferredObject = new Deferred();\n    const {\n      featureKey,\n      context,\n      rolloutId,\n      rolloutKey,\n      rolloutVariationId,\n      experimentId,\n      experimentKey,\n      experimentVariationId,\n    } = data;\n\n    if (!featureKey) {\n      LogManager.Instance.error(\n        buildMessage(ErrorLogMessagesEnum.STORING_DATA_ERROR, {\n          key: 'featureKey',\n        }),\n      );\n\n      deferredObject.reject(); // Reject promise if feature key is invalid\n      return;\n    }\n    if (!context.id) {\n      LogManager.Instance.error(\n        buildMessage(ErrorLogMessagesEnum.STORING_DATA_ERROR, {\n          key: 'Context or Context.id',\n        }),\n      );\n\n      deferredObject.reject(); // Reject promise if user ID is invalid\n      return;\n    }\n    if (rolloutKey && !experimentKey && !rolloutVariationId) {\n      LogManager.Instance.error(\n        buildMessage(ErrorLogMessagesEnum.STORING_DATA_ERROR, {\n          key: 'Variation:(rolloutKey, experimentKey or rolloutVariationId)',\n        }),\n      );\n\n      deferredObject.reject(); // Reject promise if rollout variation is invalid\n      return;\n    }\n    if (experimentKey && !experimentVariationId) {\n      LogManager.Instance.error(\n        buildMessage(ErrorLogMessagesEnum.STORING_DATA_ERROR, {\n          key: 'Variation:(experimentKey or rolloutVariationId)',\n        }),\n      );\n\n      deferredObject.reject(); // Reject promise if experiment variation is invalid\n      return;\n    }\n\n    storageService.setDataInStorage({\n      featureKey,\n      user: context.id,\n      rolloutId,\n      rolloutKey,\n      rolloutVariationId,\n      experimentId,\n      experimentKey,\n      experimentVariationId,\n    });\n\n    deferredObject.resolve(); // Resolve promise when data is successfully set\n\n    return deferredObject.promise;\n  }\n}\n","/**\n * Copyright 2024 Wingify Software Pvt. Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport enum ApiEnum {\n  GET_FLAG = 'getFlag',\n  TRACK = 'track',\n}\n","/**\n * Copyright 2024 Wingify Software Pvt. Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport enum CampaignTypeEnum {\n  ROLLOUT = 'FLAG_ROLLOUT',\n  AB = 'FLAG_TESTING',\n  PERSONALIZE = 'FLAG_PERSONALIZE',\n}\n","/**\n * Copyright 2024 Wingify Software Pvt. Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport enum EventEnum {\n  VWO_VARIATION_SHOWN = 'vwo_variationShown',\n  VWO_SYNC_VISITOR_PROP = 'vwo_syncVisitorProp',\n}\n","/**\n * Copyright 2024 Wingify Software Pvt. Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport enum HeadersEnum {\n  USER_AGENT = 'X-Device-User-Agent',\n  IP = 'VWO-X-Forwarded-For',\n}\n","/**\n * Copyright 2024 Wingify Software Pvt. Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport enum HttpMethodEnum {\n  GET = 'GET',\n  POST = 'POST',\n}\n","/**\n * Copyright 2024 Wingify Software Pvt. Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport enum PlatformEnum {\n  CLIENT = 'client',\n  SERVER = 'server',\n}\n","/**\n * Copyright 2024 Wingify Software Pvt. Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport enum StatusEnum {\n  PASSED = 'passed',\n  FAILED = 'failed',\n}\n","/**\n * Copyright 2024 Wingify Software Pvt. Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport enum StorageEnum {\n  STORAGE_UNDEFINED,\n  INCORRECT_DATA,\n  NO_DATA_FOUND,\n  CAMPAIGN_PAUSED,\n  VARIATION_NOT_FOUND,\n  WHITELISTED_VARIATION,\n}\n","/**\n * Copyright 2024 Wingify Software Pvt. Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport enum UrlEnum {\n  BASE_URL = 'dev.visualwebsiteoptimizer.com',\n  SETTINGS_URL = '/server-side/settings',\n  // WEBHOOK_SETTINGS_URL = '/server-side/pull',\n  // BATCH_EVENTS = '/server-side/batch-events',\n  EVENTS = '/events/t',\n  ATTRIBUTE_CHECK = '/check-attribute',\n  GET_USER_DATA = '/get-user-details',\n}\n","/**\n * Copyright 2024 Wingify Software Pvt. Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as messages from 'vwo-fme-sdk-log-messages';\n\nconst DebugLogMessagesEnum = messages.debugMessages;\nconst InfoLogMessagesEnum = messages.infoMessages;\nconst ErrorLogMessagesEnum = messages.errorMessages;\n\nexport { DebugLogMessagesEnum, InfoLogMessagesEnum, ErrorLogMessagesEnum };\n","/**\n * Copyright 2024 Wingify Software Pvt. Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { dynamic } from '../../types/Common';\nimport { MetricModel } from './MetricModel';\nimport { VariableModel } from './VariableModel';\nimport { VariationModel } from './VariationModel';\n\nexport class CampaignModel {\n  private id: number;\n  private segments: Record<string, dynamic>;\n  private percentTraffic: number;\n  private isUserListEnabled: boolean;\n  private key: string;\n  private type: string;\n  private name: string;\n  private isForcedVariationEnabled: boolean;\n  private variations: Array<VariationModel> = [];\n  private metrics: Array<MetricModel> = [];\n  private variables: Array<VariableModel> = [];\n  private variationId: number;\n  private campaignId: number;\n  private ruleKey: string;\n\n  copy(campaignModel: CampaignModel): void {\n    this.metrics = campaignModel.metrics;\n    this.variations = campaignModel.variations;\n    this.variables = campaignModel.variables;\n    this.processCampaignKeys(campaignModel);\n  }\n\n  modelFromDictionary(campaign: CampaignModel): this {\n    this.processCampaignProperties(campaign);\n    this.processCampaignKeys(campaign);\n    return this;\n  }\n\n  processCampaignProperties(campaign: CampaignModel): void {\n    if (campaign.variables) {\n      // campaign.var ||\n      if (\n        // (campaign.var && campaign.var.constructor === {}.constructor) ||\n        campaign.variables.constructor === {}.constructor\n      ) {\n        this.variables = [];\n      } else {\n        const variableList: Array<VariableModel> = campaign.variables; // campaign.var ||\n        variableList.forEach((variable: any) => {\n          this.variables.push(new VariableModel().modelFromDictionary(variable));\n        });\n      }\n    }\n\n    if (campaign.variations) {\n      // campaign.v ||\n      if (\n        // (campaign.v && campaign.v.constructor === {}.constructor) ||\n        campaign.variations.constructor === {}.constructor\n      ) {\n        this.variations = [];\n      } else {\n        const variationList: Array<VariationModel> = campaign.variations; // campaign.v ||\n        variationList.forEach((variation: any) => {\n          this.variations.push(new VariationModel().modelFromDictionary(variation));\n        });\n      }\n    }\n\n    if (campaign.metrics) {\n      // campaign.m ||\n      if (campaign.metrics && campaign.metrics.constructor === {}.constructor) {\n        this.metrics = [];\n      } else {\n        const metricsList: Array<MetricModel> = campaign.metrics || [];\n        metricsList.forEach((metric: any) => {\n          this.metrics.push(new MetricModel().modelFromDictionary(metric));\n        });\n      }\n    }\n  }\n\n  processCampaignKeys(campaign: CampaignModel): void {\n    this.id = campaign.id;\n    this.percentTraffic = campaign.percentTraffic; // campaign.pT ||\n    this.name = campaign.name; // campaign.n ||\n    this.variationId = campaign.variationId; // campaign.vId ||\n    this.campaignId = campaign.campaignId; // campaign.cId ||\n    this.ruleKey = campaign.ruleKey; // campaign.rK ||\n    this.isForcedVariationEnabled = campaign.isForcedVariationEnabled; // campaign.iFVE ||\n    this.isUserListEnabled = campaign.isUserListEnabled; // campaign.iULE ||\n    this.segments = campaign.segments;\n    this.key = campaign.key; // campaign.k ||\n    // this.priority = campaign.pr || campaign.priority;\n    this.type = campaign.type; // campaign.t ||\n  }\n\n  getId(): number {\n    return this.id;\n  }\n\n  getName(): string {\n    return this.name;\n  }\n\n  getSegments(): Record<string, dynamic> {\n    return this.segments;\n  }\n\n  getTraffic(): number {\n    return this.percentTraffic;\n  }\n\n  getType(): string {\n    return this.type;\n  }\n\n  getIsForcedVariationEnabled(): boolean {\n    return this.isForcedVariationEnabled;\n  }\n\n  getIsUserListEnabled(): boolean {\n    return this.isUserListEnabled;\n  }\n\n  getKey(): string {\n    return this.key;\n  }\n\n  getMetrics(): Array<MetricModel> {\n    return this.metrics;\n  }\n\n  getVariations(): Array<VariationModel> {\n    return this.variations;\n  }\n\n  getVariables(): Array<VariableModel> {\n    return this.variables;\n  }\n\n  getRuleKey(): string {\n    return this.ruleKey;\n  }\n}\n","/**\n * Copyright 2024 Wingify Software Pvt. Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { CampaignModel } from './CampaignModel';\nimport { ImpactCapmaignModel } from './ImpactCampaignModel';\nimport { MetricModel } from './MetricModel';\nimport { RuleModel } from './RuleModel';\n\nexport class FeatureModel {\n  private m: Array<MetricModel> = [];\n  private metrics: Array<MetricModel> = [];\n  private id: number;\n  private key: string;\n  private name: string;\n  private type: string;\n  private rules: Array<RuleModel> = [];\n  private impactCampaign: ImpactCapmaignModel = null;\n\n  private rulesLinkedCampaign: Array<CampaignModel> = [];\n  private isGatewayServiceRequired: boolean = false;\n\n  modelFromDictionary(feature: FeatureModel): this {\n    this.id = feature.id;\n    this.key = feature.key;\n    this.name = feature.name;\n    this.type = feature.type;\n    if (feature?.isGatewayServiceRequired) {\n      this.isGatewayServiceRequired = feature.isGatewayServiceRequired;\n    }\n    if (feature.impactCampaign) {\n      this.impactCampaign = new ImpactCapmaignModel().modelFromDictionary(feature.impactCampaign);\n    }\n\n    if ((feature.m && feature.m.constructor === {}.constructor) || feature.metrics?.constructor === {}.constructor) {\n      this.metrics = [];\n    } else {\n      const metricList: Array<MetricModel> = feature.m || feature.metrics;\n      metricList?.forEach((metric) => {\n        this.metrics.push(new MetricModel().modelFromDictionary(metric));\n      });\n    }\n\n    if (feature?.rules?.constructor === {}.constructor) {\n      this.rules = [];\n    } else {\n      const ruleList: Array<RuleModel> = feature.rules;\n      ruleList?.forEach((rule) => {\n        this.rules.push(new RuleModel().modelFromDictionary(rule));\n      });\n    }\n\n    if (feature?.rulesLinkedCampaign && feature.rulesLinkedCampaign?.constructor !== {}.constructor) {\n      const linkedCampaignList: Array<CampaignModel> = feature.rulesLinkedCampaign;\n      this.rulesLinkedCampaign = linkedCampaignList;\n    }\n\n    return this;\n  }\n\n  getName(): string {\n    return this.name;\n  }\n\n  getType(): string {\n    return this.type;\n  }\n\n  getId(): number {\n    return this.id;\n  }\n\n  getKey(): string {\n    return this.key;\n  }\n\n  getRules(): Array<RuleModel> {\n    return this.rules;\n  }\n\n  getImpactCampaign(): ImpactCapmaignModel {\n    return this.impactCampaign;\n  }\n\n  getRulesLinkedCampaign(): Array<CampaignModel> {\n    return this.rulesLinkedCampaign;\n  }\n\n  setRulesLinkedCampaign(rulesLinkedCampaign: Array<CampaignModel>): void {\n    this.rulesLinkedCampaign = rulesLinkedCampaign;\n  }\n\n  getMetrics(): Array<MetricModel> {\n    return this.metrics;\n  }\n\n  getIsGatewayServiceRequired(): boolean {\n    return this.isGatewayServiceRequired;\n  }\n\n  setIsGatewayServiceRequired(isGatewayServiceRequired: boolean): void {\n    this.isGatewayServiceRequired = isGatewayServiceRequired;\n  }\n}\n","/**\n * Copyright 2024 Wingify Software Pvt. Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport class ImpactCapmaignModel {\n  private campaignId: number;\n  private type: string;\n\n  modelFromDictionary(impactCampaign: ImpactCapmaignModel): this {\n    this.type = impactCampaign.type;\n    this.campaignId = impactCampaign.campaignId;\n    return this;\n  }\n\n  getCampaignId(): number {\n    return this.campaignId;\n  }\n\n  getType(): string {\n    return this.type;\n  }\n}\n","/**\n * Copyright 2024 Wingify Software Pvt. Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport class MetricModel {\n  private key: string;\n  private identifier: string;\n\n  private i: number;\n  private id: number;\n\n  private t: string;\n  private type: string;\n\n  modelFromDictionary(metric: MetricModel): this {\n    this.identifier = metric.identifier || metric.key;\n    this.id = metric.i || metric.id;\n    this.type = metric.t || metric.type;\n    return this;\n  }\n\n  getId(): number {\n    return this.id;\n  }\n\n  getIdentifier(): string {\n    return this.identifier;\n  }\n\n  getType(): string {\n    return this.type;\n  }\n}\n","/**\n * Copyright 2024 Wingify Software Pvt. Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport class RuleModel {\n  private status: boolean;\n  private variationId: number;\n  private campaignId: number;\n  private type: string;\n  private ruleKey: string;\n\n  modelFromDictionary(rule: RuleModel): this {\n    this.type = rule.type;\n    this.status = rule.status;\n    this.variationId = rule.variationId;\n    this.campaignId = rule.campaignId;\n    this.ruleKey = rule.ruleKey;\n    return this;\n  }\n\n  getCampaignId(): number {\n    return this.campaignId;\n  }\n\n  getVariationId(): number {\n    return this.variationId;\n  }\n\n  getStatus(): boolean {\n    return this.status;\n  }\n\n  getType(): string {\n    return this.type;\n  }\n\n  getRuleKey(): string {\n    return this.ruleKey;\n  }\n}\n","/**\n * Copyright 2024 Wingify Software Pvt. Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { dynamic } from '../../types/Common';\n\nexport class VariableModel {\n  private val: dynamic;\n  private value: dynamic;\n\n  private type: string;\n\n  private k: string;\n  private key: string;\n\n  private i: number;\n  private id: number;\n\n  modelFromDictionary(variable: VariableModel): this {\n    this.value = variable.val || variable.value;\n    this.type = variable.type;\n    this.key = variable.k || variable.key;\n    this.id = variable.i || variable.id;\n\n    return this;\n  }\n\n  setValue(value: dynamic): void {\n    this.value = value;\n  }\n\n  setKey(key: string): void {\n    this.key = key;\n  }\n\n  setType(type: string): void {\n    this.type = type;\n  }\n\n  getId(): number {\n    return this.id;\n  }\n\n  getValue(): dynamic {\n    return this.value;\n  }\n\n  getType(): string {\n    return this.type;\n  }\n\n  getKey(): string {\n    return this.key;\n  }\n}\n","/**\n * Copyright 2024 Wingify Software Pvt. Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { dynamic } from '../../types/Common';\nimport { VariableModel } from './VariableModel';\n\nexport class VariationModel {\n  private i: number;\n  private id: number;\n\n  private n: string;\n  private key: string;\n  private name: string;\n\n  private w: number;\n  private weight: number;\n\n  private startRangeVariation: number;\n  private endRangeVariation: number;\n  private variables: Array<VariableModel> = [];\n  private variations: Array<VariationModel> = [];\n\n  private seg: Record<string, dynamic>;\n  private segments: Record<string, dynamic>;\n\n  modelFromDictionary(variation: VariationModel): this {\n    this.id = variation.i || variation.id;\n    this.key = variation.n || variation.key || variation.name;\n    this.weight = variation.w || variation.weight;\n    this.setStartRange(variation.startRangeVariation);\n    this.setEndRange(variation.endRangeVariation);\n    if (variation.seg || variation.segments) {\n      this.segments = variation.seg || variation.segments;\n    }\n\n    if (variation.variables) {\n      if (variation.variables.constructor === {}.constructor) {\n        this.variables = [];\n      } else {\n        const variableList: Array<VariableModel> = variation.variables;\n        variableList.forEach((variable) => {\n          this.variables.push(new VariableModel().modelFromDictionary(variable));\n        });\n      }\n    }\n\n    if (variation.variations) {\n      if (variation.variations.constructor === {}.constructor) {\n        this.variations = [];\n      } else {\n        const variationList: Array<VariationModel> = variation.variations;\n        variationList.forEach((variation: any) => {\n          this.variations.push(new VariationModel().modelFromDictionary(variation));\n        });\n      }\n    }\n\n    return this;\n  }\n\n  setStartRange(startRange: number): void {\n    this.startRangeVariation = startRange;\n  }\n\n  setEndRange(endRange: number): void {\n    this.endRangeVariation = endRange;\n  }\n\n  setWeight(weight: number): void {\n    this.weight = weight;\n  }\n\n  getId(): number {\n    return this.id;\n  }\n\n  getKey(): string {\n    return this.key;\n  }\n\n  getWeight(): number {\n    return this.weight;\n  }\n\n  getSegments(): Record<string, dynamic> {\n    return this.segments;\n  }\n\n  getStartRangeVariation(): number {\n    return this.startRangeVariation;\n  }\n\n  getEndRangeVariation(): number {\n    return this.endRangeVariation;\n  }\n\n  getVariables(): Array<VariableModel> {\n    return this.variables;\n  }\n\n  getVariations(): Array<VariationModel> {\n    return this.variations;\n  }\n}\n","/**\n * Copyright 2024 Wingify Software Pvt. Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Struct, array, boolean, number, object, optional, string, union, validate } from 'superstruct';\nimport { dynamic } from '../../types/Common';\nimport { SettingsModel } from '../settings/SettingsModel';\n\nexport class SettingsSchema {\n  private campaignMetricSchema: Struct<dynamic>;\n  private variableObjectSchema: Struct<dynamic>;\n  private campaignVariationSchema: Struct<dynamic>;\n  private campaignObjectSchema: Struct<dynamic>;\n  private settingsSchema: Struct<dynamic>;\n  private featureSchema: Struct<dynamic>;\n  private ruleSchema: Struct<dynamic>;\n\n  constructor() {\n    this.initializeSchemas();\n  }\n\n  private initializeSchemas(): void {\n    this.campaignMetricSchema = object({\n      id: union([number(), string()]),\n      type: string(),\n      identifier: string(),\n      mca: optional(union([number(), string()])),\n      hasProps: optional(boolean()),\n      revenueProp: optional(string()),\n    });\n\n    this.variableObjectSchema = object({\n      id: union([number(), string()]),\n      type: string(),\n      key: string(),\n      value: union([number(), string(), boolean(), object()]),\n    });\n\n    this.campaignVariationSchema = object({\n      id: union([number(), string()]),\n      name: string(),\n      weight: union([number(), string()]),\n      segments: optional(object()),\n      variables: optional(array(this.variableObjectSchema)),\n      startRangeVariation: optional(number()),\n      endRangeVariation: optional(number()),\n    });\n\n    this.campaignObjectSchema = object({\n      id: union([number(), string()]),\n      type: string(),\n      key: string(),\n      percentTraffic: optional(number()),\n      status: string(),\n      variations: array(this.campaignVariationSchema),\n      segments: object(),\n      isForcedVariationEnabled: optional(boolean()),\n      isAlwaysCheckSegment: optional(boolean()),\n      name: string(),\n    });\n\n    this.ruleSchema = object({\n      type: string(),\n      ruleKey: string(),\n      campaignId: number(),\n      variationId: optional(number()),\n    });\n\n    this.featureSchema = object({\n      id: union([number(), string()]),\n      key: string(),\n      status: string(),\n      name: string(),\n      type: string(),\n      metrics: array(this.campaignMetricSchema),\n      impactCampaign: optional(object()),\n      rules: optional(array(this.ruleSchema)),\n      variables: optional(array(this.variableObjectSchema)),\n    });\n\n    this.settingsSchema = object({\n      sdkKey: optional(string()),\n      version: union([number(), string()]),\n      accountId: union([number(), string()]),\n      features: optional(array(this.featureSchema)),\n      campaigns: array(this.campaignObjectSchema),\n      groups: optional(object()),\n      campaignGroups: optional(object()),\n      collectionPrefix: optional(string()),\n    });\n  }\n\n  isSettingsValid(settings: any | SettingsModel): boolean {\n    if (!settings) {\n      return false;\n    }\n\n    const [error] = validate(settings, this.settingsSchema);\n    return !error;\n  }\n}\n","/**\n * Copyright 2024 Wingify Software Pvt. Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { CampaignModel } from '../campaign/CampaignModel';\nimport { FeatureModel } from '../campaign/FeatureModel';\n\nexport class SettingsModel {\n  private sK?: string;\n  private sdkKey: string;\n\n  private f?: Array<FeatureModel> = [];\n  private features: Array<FeatureModel> = [];\n\n  private c?: Array<CampaignModel> = [];\n  private campaigns: Array<CampaignModel> = [];\n\n  private campaignGroups?: Record<string, number> = {};\n  private cG?: Record<string, number> = {};\n\n  private groups?: Record<string, any> = {};\n  private g?: Record<string, any> = {};\n\n  private a?: string;\n  private accountId: string;\n\n  private v?: number;\n  private version: number;\n  private collectionPrefix?: string;\n\n  constructor(settings: SettingsModel) {\n    this.sdkKey = settings.sK || settings.sdkKey;\n    this.accountId = settings.a || settings.accountId;\n    this.version = settings.v || settings.version;\n    this.collectionPrefix = settings.collectionPrefix;\n\n    if (\n      (settings.f && settings.f.constructor !== {}.constructor) ||\n      (settings.features && settings.features.constructor !== {}.constructor)\n    ) {\n      const featureList: Array<FeatureModel> = settings.f || settings.features;\n      featureList.forEach((feature) => {\n        this.features.push(new FeatureModel().modelFromDictionary(feature));\n      });\n    }\n\n    if (\n      (settings.c && settings.c.constructor !== {}.constructor) ||\n      (settings.campaigns && settings.campaigns.constructor !== {}.constructor)\n    ) {\n      const campaignList: Array<CampaignModel> = settings.c || settings.campaigns;\n      campaignList.forEach((campaign) => {\n        this.campaigns.push(new CampaignModel().modelFromDictionary(campaign));\n      });\n    }\n\n    if (settings.cG || settings.campaignGroups) {\n      this.campaignGroups = settings.cG || settings.campaignGroups;\n    }\n\n    if (settings.g || settings.groups) {\n      this.groups = settings.g || settings.groups;\n    }\n\n    return this;\n  }\n  getFeatures(): Array<FeatureModel> {\n    return this.features;\n  }\n\n  getCampaigns(): Array<CampaignModel> {\n    return this.campaigns;\n  }\n\n  getSdkkey(): string {\n    return this.sdkKey;\n  }\n\n  getAccountId(): string {\n    return this.accountId;\n  }\n\n  getVersion(): number {\n    return this.version;\n  }\n\n  getCollectionPrefix(): string {\n    return this.collectionPrefix;\n  }\n\n  getCampaignGroups(): Record<string, number> {\n    return this.campaignGroups;\n  }\n\n  getGroups(): Record<string, any> {\n    return this.groups;\n  }\n}\n","/**\n * Copyright 2024 Wingify Software Pvt. Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { dynamic } from '../../types/Common';\nimport { ContextVWOModel } from './ContextVWOModel';\n\nexport class ContextModel {\n  private id: string | number;\n  private userAgent?: string;\n  private ipAddress?: string;\n  private customVariables?: Record<string, any>;\n  private variationTargetingVariables?: Record<string, dynamic>;\n  private _vwo?: ContextVWOModel;\n\n  modelFromDictionary(context: Record<string, any>): this {\n    this.id = context.id;\n    this.userAgent = context.userAgent;\n    this.ipAddress = context.ipAddress;\n    if (context?.customVariables) {\n      this.customVariables = context.customVariables;\n    }\n    if (context?.variationTargetingVariables) {\n      this.variationTargetingVariables = context.variationTargetingVariables;\n    }\n    if (context?._vwo) {\n      this._vwo = new ContextVWOModel().modelFromDictionary(context._vwo);\n    }\n    return this;\n  }\n\n  getId(): string {\n    return this.id?.toString();\n  }\n\n  getUserAgent(): string {\n    return this.userAgent;\n  }\n\n  getIpAddress(): string {\n    return this.ipAddress;\n  }\n\n  getCustomVariables(): Record<string, any> {\n    return this.customVariables;\n  }\n\n  setCustomVariables(customVariables: Record<string, any>): void {\n    this.customVariables = customVariables;\n  }\n\n  getVariationTargetingVariables(): Record<string, dynamic> {\n    return this.variationTargetingVariables;\n  }\n\n  setVariationTargetingVariables(variationTargetingVariables: Record<string, dynamic>): void {\n    this.variationTargetingVariables = variationTargetingVariables;\n  }\n\n  getVwo(): ContextVWOModel {\n    return this._vwo;\n  }\n\n  setVwo(_vwo: ContextVWOModel): void {\n    this._vwo = _vwo;\n  }\n}\n","/**\n * Copyright 2024 Wingify Software Pvt. Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class ContextVWOModel {\n  private location: Record<string, string>;\n  private userAgent: Record<string, string>;\n\n  modelFromDictionary(context: Record<string, any>): this {\n    if (context?.location) {\n      this.location = context.location;\n    }\n\n    if (context?.userAgent) {\n      this.userAgent = context.userAgent;\n    }\n    return this;\n  }\n\n  getLocation(): Record<string, string> {\n    return this.location;\n  }\n\n  getUaInfo(): Record<string, string> {\n    return this.userAgent;\n  }\n}\n","/**\n * Copyright 2024 Wingify Software Pvt. Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as Hasher from 'murmurhash';\n\nconst SEED_VALUE = 1; // Seed value for the hash function\nexport class DecisionMaker {\n  /**\n   * Generates a bucket value based on the hash value, maximum value, and an optional multiplier.\n   *\n   * @param {number} hashValue - The hash value used for calculation\n   * @param {number} maxValue - The maximum value for bucket scaling\n   * @param {number} [multiplier=1] - Optional multiplier to adjust the value\n   * @returns {number} - The calculated bucket value\n   */\n  generateBucketValue(hashValue: number, maxValue: number, multiplier = 1): number {\n    // Calculate the ratio based on the hash value\n    const ratio = hashValue / Math.pow(2, 32);\n    // Calculate the multiplied value\n    const multipliedValue = (maxValue * ratio + 1) * multiplier;\n    // Round down to get the final value\n    const value = Math.floor(multipliedValue);\n\n    return value;\n  }\n\n  /**\n   * Gets the bucket value for a user based on the hash key and maximum value.\n   *\n   * @param {string} hashKey - The hash key for the user\n   * @param {number} [maxValue=100] - The maximum value for bucket scaling\n   * @returns {number} - The calculated bucket value for the user\n   */\n  getBucketValueForUser(hashKey: string, maxValue = 100): number {\n    const hashValue = Hasher.v3(hashKey, SEED_VALUE); // Calculate the hash value\n    const bucketValue = this.generateBucketValue(hashValue, maxValue); // Calculate the bucket value\n\n    return bucketValue; // Return the calculated bucket value\n  }\n\n  /**\n   * Calculates the bucket value for a given string with optional multiplier and maximum value.\n   *\n   * @param {string} str - The input string to calculate the bucket value for\n   * @param {number} [multiplier=1] - Optional multiplier to adjust the value\n   * @param {number} [maxValue=10000] - The maximum value for bucket scaling\n   * @returns {number} - The calculated bucket value\n   */\n  calculateBucketValue(str: string, multiplier = 1, maxValue = 10000): number {\n    const hashValue = this.generateHashValue(str); // Generate the hash value for the input string\n\n    return this.generateBucketValue(hashValue, maxValue, multiplier); // Generate and return the bucket value\n  }\n\n  /**\n   * Generates the hash value for a given hash key using murmurHash v3.\n   *\n   * @param {string} hashKey - The hash key for which the hash value is generated\n   * @returns {number} - The generated hash value\n   */\n  generateHashValue(hashKey: string): number {\n    return Hasher.v3(hashKey, SEED_VALUE); // Return the hash value generated using murmurHash\n  }\n}\n","/**\n * Copyright 2024 Wingify Software Pvt. Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { dynamic } from '../../types/Common';\nimport { LogLevelEnum } from './enums/LogLevelEnum';\n\nconst AnsiColorEnum = {\n  BOLD: '\\x1b[1m',\n  CYAN: '\\x1b[36m',\n  GREEN: '\\x1b[32m',\n  LIGHTBLUE: '\\x1b[94m',\n  RED: '\\x1b[31m',\n  RESET: '\\x1b[0m',\n  WHITE: '\\x1b[30m',\n  YELLOW: '\\x1b[33m',\n};\n/**\n * Interface defining the structure for a log message builder.\n */\ninterface ILogMessageBuilder {\n  loggerConfig: Record<string, dynamic>; // Configuration for the logger\n  transportConfig: Record<string, dynamic>; // Configuration for the transport mechanism\n  prefix: string; // Prefix to be added to each log message\n  dateTimeFormat: dynamic; // Function or format for date and time in log messages\n\n  formatMessage(level: string, message: string): string; // Method to format a log message\n  getFormattedLevel(level: string): string; // Method to format the log level\n  getFormattedDateTime(): string; // Method to get formatted date and time\n}\n\n/**\n * Implements the ILogMessageBuilder interface to provide a concrete log message builder.\n */\nexport class LogMessageBuilder implements ILogMessageBuilder {\n  loggerConfig: Record<string, any>;\n  transportConfig: Record<string, any>;\n  prefix: string;\n  dateTimeFormat: any;\n\n  /**\n   * Constructs a new LogMessageBuilder instance.\n   * @param {Record<string, any>} loggerConfig - Configuration for the logger.\n   * @param {Record<string, any>} transportConfig - Configuration for the transport mechanism.\n   */\n  constructor(loggerConfig: Record<string, any>, transportConfig: Record<string, any>) {\n    this.loggerConfig = loggerConfig;\n    this.transportConfig = transportConfig;\n\n    // Set the prefix, defaulting to an empty string if not provided.\n    this.prefix = this.transportConfig.prefix || this.loggerConfig.prefix || '';\n    // Set the date and time format, defaulting to the logger's format if the transport's format is not provided.\n    this.dateTimeFormat = this.transportConfig.dateTimeFormat || this.loggerConfig.dateTimeFormat;\n  }\n\n  /**\n   * Formats a log message combining level, prefix, date/time, and the actual message.\n   * @param {string} level - The log level.\n   * @param {string} message - The message to log.\n   * @returns {string} The formatted log message.\n   */\n  formatMessage(level: string, message: string): string {\n    return `[${this.getFormattedLevel(level)}]: ${this.getFormattedPrefix(this.prefix)} ${this.getFormattedDateTime()} ${message}`;\n  }\n\n  getFormattedPrefix(prefix: string): string {\n    if (this.loggerConfig.isAnsiColorEnabled) {\n      return `${AnsiColorEnum.BOLD}${AnsiColorEnum.GREEN}${prefix}${AnsiColorEnum.RESET}`;\n    }\n\n    return `${prefix}`;\n  }\n\n  /**\n   * Returns the formatted log level with appropriate coloring based on the log level.\n   * @param {string} level - The log level.\n   * @returns {string} The formatted log level.\n   */\n  getFormattedLevel(level: string): string {\n    const upperCaseLevel = level.toUpperCase();\n    let LogLevelColorInfoEnum;\n\n    if (this.loggerConfig.isAnsiColorEnabled) {\n      LogLevelColorInfoEnum = {\n        [LogLevelEnum.TRACE]: `${AnsiColorEnum.BOLD}${AnsiColorEnum.WHITE}${upperCaseLevel}${AnsiColorEnum.RESET}`,\n        [LogLevelEnum.DEBUG]: `${AnsiColorEnum.BOLD}${AnsiColorEnum.LIGHTBLUE}${upperCaseLevel}${AnsiColorEnum.RESET}`,\n        [LogLevelEnum.INFO]: `${AnsiColorEnum.BOLD}${AnsiColorEnum.CYAN}${upperCaseLevel}${AnsiColorEnum.RESET}`,\n        [LogLevelEnum.WARN]: `${AnsiColorEnum.BOLD}${AnsiColorEnum.YELLOW}${upperCaseLevel}${AnsiColorEnum.RESET}`,\n        [LogLevelEnum.ERROR]: `${AnsiColorEnum.BOLD}${AnsiColorEnum.RED}${upperCaseLevel}${AnsiColorEnum.RESET}`,\n      };\n    } else {\n      LogLevelColorInfoEnum = {\n        [LogLevelEnum.TRACE]: upperCaseLevel,\n        [LogLevelEnum.DEBUG]: upperCaseLevel,\n        [LogLevelEnum.INFO]: upperCaseLevel,\n        [LogLevelEnum.WARN]: upperCaseLevel,\n        [LogLevelEnum.ERROR]: upperCaseLevel,\n      };\n    }\n\n    return LogLevelColorInfoEnum[level];\n  }\n\n  /**\n   * Retrieves the current date and time formatted according to the specified format.\n   * @returns {string} The formatted date and time.\n   */\n  getFormattedDateTime(): string {\n    return this.dateTimeFormat();\n  }\n}\n","/**\n * Copyright 2024 Wingify Software Pvt. Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Abstract class representing a logger.\n * This class provides the structure for logging mechanisms and should be extended by specific logger implementations.\n */\nexport abstract class Logger {\n  /**\n   * Logs a message at the trace level.\n   * @param {string} message - The message to log.\n   */\n  abstract trace(message: string): void;\n\n  /**\n   * Logs a message at the debug level.\n   * @param {string} message - The message to log.\n   */\n  abstract debug(message: string): void;\n\n  /**\n   * Logs a message at the info level.\n   * @param {string} message - The message to log.\n   */\n  abstract info(message: string): void;\n\n  /**\n   * Logs a message at the warn level.\n   * @param {string} message - The message to log.\n   */\n  abstract warn(message: string): void;\n\n  /**\n   * Logs a message at the error level.\n   * @param {string} message - The message to log.\n   */\n  abstract error(message: string): void;\n}\n","/**\n * Copyright 2024 Wingify Software Pvt. Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { v4 as uuidv4 } from 'uuid';\nimport { dynamic } from '../../../types/Common';\n\nimport { Logger } from '../Logger';\nimport { ConsoleTransport } from '../transports/ConsoleTransport';\nimport { LogTransportManager } from './TransportManager';\n\nimport { isObject } from '../../../utils/DataTypeUtil';\nimport { LogLevelEnum } from '../enums/LogLevelEnum';\n\n/**\n * Interface defining the structure and methods for LogManager.\n */\nexport interface ILogManager {\n  transportManager?: LogTransportManager;\n  config?: Record<string, dynamic>;\n  name?: string;\n  requestId?: string;\n  level: string;\n  prefix?: string;\n  dateTimeFormat?: () => string;\n\n  transport?: Record<string, dynamic>;\n  transports?: Array<Record<string, dynamic>>;\n\n  addTransport?(transportObject: Record<string, dynamic>): void;\n  addTransports?(transportsList: Array<Record<string, dynamic>>): void;\n}\n\n/**\n * LogManager class provides logging functionality with support for multiple transports.\n * It is designed as a singleton to ensure a single instance throughout the application.\n */\nexport class LogManager extends Logger implements ILogManager {\n  private static instance: LogManager; // Singleton instance of LogManager\n  transportManager: LogTransportManager;\n  config: Record<string, any>;\n  name = 'VWO Logger'; // Default logger name\n  requestId = uuidv4(); // Unique request ID generated for each instance\n  level = LogLevelEnum.ERROR; // Default logging level\n  prefix = 'VWO-SDK'; // Default prefix for log messages\n  public dateTimeFormat(): string {\n    return new Date().toISOString(); // Default date-time format for log messages\n  }\n  transport: Record<string, any>;\n  transports: Array<Record<string, any>>;\n\n  /**\n   * Constructor for LogManager.\n   * @param {Record<string, any>} config - Configuration object for LogManager.\n   */\n  constructor(config?: Record<string, any>) {\n    super();\n\n    this.config = config;\n\n    if (config.isAlwaysNewInstance || !LogManager.instance) {\n      LogManager.instance = this;\n\n      // Initialize configuration with defaults or provided values\n      this.config.name = config.name || this.name;\n      this.config.requestId = config.requestId || this.requestId;\n      this.config.level = config.level || this.level;\n      this.config.prefix = config.prefix || this.prefix;\n      this.config.dateTimeFormat = config.dateTimeFormat || this.dateTimeFormat;\n\n      this.transportManager = new LogTransportManager(this.config);\n\n      this.handleTransports();\n    }\n\n    return LogManager.instance;\n  }\n\n  /**\n   * Provides access to the singleton instance of LogManager.\n   * @returns {LogManager} The singleton instance.\n   */\n  static get Instance(): LogManager {\n    return LogManager.instance;\n  }\n\n  /**\n   * Handles the initialization and setup of transports based on configuration.\n   */\n  handleTransports(): void {\n    const transports = this.config.transports;\n\n    if (transports?.length) {\n      this.addTransports(this.config.transports);\n    } else if (this.config.transport && isObject(this.config.transport)) {\n      this.addTransport(this.config.transport);\n    } else {\n      // if (this.config.defaultTransport)\n      // Add default ConsoleTransport if no other transport is specified\n      this.addTransport(\n        new ConsoleTransport({\n          level: this.config.level,\n        }),\n      );\n    }\n  }\n\n  /**\n   * Adds a single transport to the LogManager.\n   * @param {Record<any, any>} transport - The transport object to add.\n   */\n  addTransport(transport: Record<any, any>): void {\n    this.transportManager.addTransport(transport);\n  }\n\n  /**\n   * Adds multiple transports to the LogManager.\n   * @param {Array<Record<any, any>>} transports - The list of transport objects to add.\n   */\n  addTransports(transports: Record<any, any>): void {\n    for (let i = 0; i < transports.length; i++) {\n      this.addTransport(transports[i]);\n    }\n  }\n\n  /**\n   * Logs a trace message.\n   * @param {string} message - The message to log at trace level.\n   */\n  trace(message: string): void {\n    this.transportManager.log(LogLevelEnum.TRACE, message);\n  }\n\n  /**\n   * Logs a debug message.\n   * @param {string} message - The message to log at debug level.\n   */\n  debug(message: string): void {\n    this.transportManager.log(LogLevelEnum.DEBUG, message);\n  }\n\n  /**\n   * Logs an informational message.\n   * @param {string} message - The message to log at info level.\n   */\n  info(message: string): void {\n    this.transportManager.log(LogLevelEnum.INFO, message);\n  }\n\n  /**\n   * Logs a warning message.\n   * @param {string} message - The message to log at warn level.\n   */\n  warn(message: string): void {\n    this.transportManager.log(LogLevelEnum.WARN, message);\n  }\n\n  /**\n   * Logs an error message.\n   * @param {string} message - The message to log at error level.\n   */\n  error(message: string): void {\n    this.transportManager.log(LogLevelEnum.ERROR, message);\n  }\n}\n","/**\n * Copyright 2024 Wingify Software Pvt. Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { dynamic } from '../../../types/Common';\nimport { LogLevelEnum } from '../enums/LogLevelEnum';\nimport { LogMessageBuilder } from '../LogMessageBuilder';\nimport { Logger } from '../Logger';\nimport { isFunction } from '../../../utils/DataTypeUtil';\n\nenum LogLevelNumberEnum {\n  TRACE = 0,\n  DEBUG = 1,\n  INFO = 2,\n  WARN = 3,\n  ERROR = 4,\n}\n\ninterface IlogTransport extends Logger {\n  transports: Array<Record<string, dynamic>>;\n  config: Record<string, dynamic>;\n\n  // Determines if a message should be logged based on the transport and configuration levels\n  shouldLog(transportLevel: string, configLevel: string): boolean;\n  // Logs a message at a specified level\n  log(level: string, message: string): void;\n}\n\n/**\n * Manages logging transports and delegates logging messages to them based on configuration.\n * Implements the IlogTransport interface.\n */\nexport class LogTransportManager implements IlogTransport {\n  transports: Array<Record<string, any>>;\n  config: Record<string, any>;\n\n  /**\n   * Initializes the manager with a configuration object.\n   * @param {Record<string, any>} config - Configuration settings for the log manager.\n   */\n  constructor(config: Record<string, any>) {\n    this.transports = [];\n    this.config = config;\n  }\n\n  /**\n   * Adds a new transport to the manager.\n   * @param {Record<string, any>} transport - The transport object to be added.\n   */\n  addTransport(transport: Record<string, any>): void {\n    this.transports.push(transport);\n  }\n\n  /**\n   * Determines if the log should be processed based on the transport and configuration levels.\n   * @param {string} transportLevel - The log level set for the transport.\n   * @param {string} configLevel - The log level set in the configuration.\n   * @returns {boolean} - Returns true if the log level is appropriate for logging, false otherwise.\n   */\n  shouldLog(transportLevel: string, configLevel: string): boolean {\n    // Default to the most specific level available\n    // transportLevel = transportLevel || configLevel || this.config.level;\n\n    const targetLevel = LogLevelNumberEnum[transportLevel.toUpperCase()];\n    const desiredLevel = LogLevelNumberEnum[(configLevel || this.config.level).toUpperCase()];\n\n    return targetLevel >= desiredLevel;\n  }\n\n  /**\n   * Logs a message at TRACE level.\n   * @param {string} message - The message to log.\n   */\n  trace(message: string): void {\n    this.log(LogLevelEnum.TRACE, message);\n  }\n\n  /**\n   * Logs a message at DEBUG level.\n   * @param {string} message - The message to log.\n   */\n  debug(message: string): void {\n    this.log(LogLevelEnum.DEBUG, message);\n  }\n\n  /**\n   * Logs a message at INFO level.\n   * @param {string} message - The message to log.\n   */\n  info(message: string): void {\n    this.log(LogLevelEnum.INFO, message);\n  }\n\n  /**\n   * Logs a message at WARN level.\n   * @param {string} message - The message to log.\n   */\n  warn(message: string): void {\n    this.log(LogLevelEnum.WARN, message);\n  }\n\n  /**\n   * Logs a message at ERROR level.\n   * @param {string} message - The message to log.\n   */\n  error(message: string): void {\n    this.log(LogLevelEnum.ERROR, message);\n  }\n\n  /**\n   * Delegates the logging of messages to the appropriate transports.\n   * @param {string} level - The level at which to log the message.\n   * @param {string} message - The message to log.\n   */\n  log(level: string, message: string): void {\n    for (let i = 0; i < this.transports.length; i++) {\n      const logMessageBuilder = new LogMessageBuilder(this.config, this.transports[i]);\n      const formattedMessage = logMessageBuilder.formatMessage(level, message);\n      if (this.shouldLog(level, this.transports[i].level)) {\n        if (this.transports[i].log && isFunction(this.transports[i].log)) {\n          // Use custom log handler if available\n          this.transports[i].log(level, message);\n        } else {\n          // Otherwise, use the default log method\n          this.transports[i][level](formattedMessage);\n        }\n      }\n    }\n  }\n}\n","/**\n * Copyright 2024 Wingify Software Pvt. Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport enum LogLevelEnum {\n  TRACE = 'trace',\n  DEBUG = 'debug',\n  INFO = 'info',\n  WARN = 'warn',\n  ERROR = 'error',\n}\n","/**\n * Copyright 2024 Wingify Software Pvt. Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport { LogManager, ILogManager } from './core/LogManager';\nexport { LogLevelEnum } from './enums/LogLevelEnum';\n","/**\n * Copyright 2024 Wingify Software Pvt. Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { LogLevelEnum } from '../enums/LogLevelEnum';\nimport { Logger } from '../Logger';\n\n/**\n * ConsoleTransport class implements the Logger interface to provide logging functionality.\n * It outputs logs to the console based on the log level set in the configuration.\n */\nexport class ConsoleTransport implements Logger {\n  config: Record<string, any>; // Configuration object for the logger\n  level: string; // Current log level\n\n  /**\n   * Constructor initializes the ConsoleTransport with a configuration object.\n   * @param {Record<string, any>} config - Configuration settings for the logger, including 'level'.\n   */\n  constructor(config: Record<string, any> = {}) {\n    this.config = config; // Store the configuration\n    this.level = this.config.level; // Set the logging level from the configuration\n  }\n\n  /**\n   * Logs a trace message.\n   * @param {string} message - The message to log.\n   */\n  trace(message: string): void {\n    this.consoleLog(LogLevelEnum.TRACE, message);\n  }\n\n  /**\n   * Logs a debug message.\n   * @param {string} message - The message to log.\n   */\n  debug(message: string): void {\n    this.consoleLog(LogLevelEnum.DEBUG, message);\n  }\n\n  /**\n   * Logs an informational message.\n   * @param {string} message - The message to log.\n   */\n  info(message: string): void {\n    this.consoleLog(LogLevelEnum.INFO, message);\n  }\n\n  /**\n   * Logs a warning message.\n   * @param {string} message - The message to log.\n   */\n  warn(message: string): void {\n    this.consoleLog(LogLevelEnum.WARN, message);\n  }\n\n  /**\n   * Logs an error message.\n   * @param {string} message - The message to log.\n   */\n  error(message: string): void {\n    this.consoleLog(LogLevelEnum.ERROR, message);\n  }\n\n  /**\n   * Generic log function that logs messages to the console based on the log level.\n   * @param {string} level - The log level under which the message should be logged.\n   * @param {string} message - The message to log.\n   */\n  consoleLog(level: string, message: string): void {\n    console[level](message); // Use console's logging function dynamically based on the level\n  }\n}\n","/**\n * Copyright 2024 Wingify Software Pvt. Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { sendGetCall, sendPostCall } from '../../../utils/XMLUtil';\nimport { dynamic } from '../../../types/Common';\nimport { Deferred } from '../../../utils/PromiseUtil';\n\nimport { RequestModel } from '../models/RequestModel';\nimport { ResponseModel } from '../models/ResponseModel';\nimport { NetworkClientInterface } from './NetworkClientInterface';\n\n/**\n * Implements the NetworkClientInterface to handle network requests.\n */\nexport class NetworkBrowserClient implements NetworkClientInterface {\n  /**\n   * Performs a GET request using the provided RequestModel.\n   * @param {RequestModel} requestModel - The model containing request options.\n   * @returns {Promise<ResponseModel>} A promise that resolves to a ResponseModel.\n   */\n  GET(requestModel: RequestModel): Promise<ResponseModel> {\n    const deferred = new Deferred();\n\n    // Extract network options from the request model.\n    const networkOptions: Record<string, dynamic> = requestModel.getOptions();\n    const responseModel = new ResponseModel();\n\n    sendGetCall({\n      networkOptions,\n      successCallback: (data: dynamic) => {\n        responseModel.setData(data);\n        deferred.resolve(responseModel);\n      },\n      errorCallback: (error: dynamic) => {\n        responseModel.setError(error);\n        deferred.reject(responseModel);\n      },\n    });\n\n    /*try {\n      fetch(url)\n          .then(res => {\n            // Some endpoints return empty strings as the response body; treat\n            // as raw text and handle potential JSON parsing errors below\n            return res.text().then(text => {\n              let jsonData = {};\n              try {\n                jsonData = JSON.parse(text);\n              } catch (err) {\n                console.info(\n                  `VWO-SDK - [INFO]: VWO didn't send JSON response which is expected: ${err}`\n                );\n              }\n\n              if (res.status === 200) {\n                responseModel.setData(jsonData);\n                deferred.resolve(responseModel);\n              } else {\n                let error = `VWO-SDK - [ERROR]: Request failed for fetching account settings. Got Status Code: ${\n                  res.status\n                }`;\n\n                responseModel.setError(error);\n                deferred.reject(responseModel);\n              }\n            });\n          })\n          .catch(err => {\n            responseModel.setError(err);\n            deferred.reject(responseModel);\n          });\n    } catch (err) {\n      responseModel.setError(err);\n      deferred.reject(responseModel);\n    } */\n    return deferred.promise;\n  }\n\n  /**\n   * Performs a POST request using the provided RequestModel.\n   * @param {RequestModel} request - The model containing request options.\n   * @returns {Promise<ResponseModel>} A promise that resolves or rejects with a ResponseModel.\n   */\n  POST(request: RequestModel): Promise<ResponseModel> {\n    const deferred = new Deferred();\n    const networkOptions: Record<string, dynamic> = request.getOptions();\n    const responseModel = new ResponseModel();\n\n    sendPostCall({\n      networkOptions,\n      successCallback: (data: dynamic) => {\n        responseModel.setData(data);\n        deferred.resolve(responseModel);\n      },\n      errorCallback: (error: dynamic) => {\n        responseModel.setError(error);\n        deferred.reject(responseModel);\n      },\n    });\n\n    /* try {\n      const options: any = Object.assign(\n        {},\n        { method: HttpMethodEnum.POST },\n        { body: networkOptions.body },\n        { headers: networkOptions.headers }\n      );\n\n      fetch(url, options)\n          .then(res => {\n            // Some endpoints return empty strings as the response body; treat\n            // as raw text and handle potential JSON parsing errors below\n            return res.text().then(text => {\n              let jsonData = {};\n              try {\n                jsonData = JSON.parse(text);\n              } catch (err) {\n                console.info(\n                  `VWO-SDK - [INFO]: VWO didn't send JSON response which is expected: ${err}`\n                );\n              }\n\n              if (res.status === 200) {\n                responseModel.setData(jsonData);\n                deferred.resolve(responseModel);\n              } else {\n                let error = `VWO-SDK - [ERROR]: Request failed for fetching account settings. Got Status Code: ${\n                  res.status\n                }`;\n\n                responseModel.setError(error);\n                deferred.reject(responseModel);\n              }\n            });\n          })\n          .catch(err => {\n            responseModel.setError(err);\n            deferred.reject(responseModel);\n          });\n    } catch (err) {\n      responseModel.setError(err);\n      deferred.reject(responseModel);\n    } */\n\n    return deferred.promise;\n  }\n}\n","/**\n * Copyright 2024 Wingify Software Pvt. Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { dynamic } from '../../../types/Common';\nimport { GlobalRequestModel } from '../models/GlobalRequestModel';\nimport { RequestModel } from '../models/RequestModel';\n\n/**\n * A class responsible for creating and modifying request models based on a global configuration.\n */\nexport class RequestHandler {\n  /**\n   * Creates a new request by merging properties from a base request and a configuration model.\n   * If both the request URL and the base URL from the configuration are missing, it returns null.\n   * Otherwise, it merges the properties from the configuration into the request if they are not already set.\n   *\n   * @param {RequestModel} request - The initial request model.\n   * @param {GlobalRequestModel} config - The global request configuration model.\n   * @returns {RequestModel} The merged request model or null if both URLs are missing.\n   */\n  createRequest(request: RequestModel, config: GlobalRequestModel): RequestModel {\n    // Check if both the request URL and the configuration base URL are missing\n    if (\n      (config.getBaseUrl() === null || config.getBaseUrl() === undefined) &&\n      (request.getUrl() === null || request.getUrl() === undefined)\n    ) {\n      return null; // Return null if no URL is specified\n    }\n    // Set the request URL, defaulting to the configuration base URL if not set\n    request.setUrl(request.getUrl() || config.getBaseUrl());\n    // Set the request timeout, defaulting to the configuration timeout if not set\n    request.setTimeout(request.getTimeout() || config.getTimeout());\n    // Set the request body, defaulting to the configuration body if not set\n    request.setBody(request.getBody() || config.getBody());\n    // Set the request headers, defaulting to the configuration headers if not set\n    request.setHeaders(request.getHeaders() || config.getHeaders());\n    // Initialize request query parameters, defaulting to an empty object if not set\n    const requestQueryParams: Record<string, dynamic> = request.getQuery() || {};\n    // Initialize configuration query parameters, defaulting to an empty object if not set\n    const configQueryParams: Record<string, dynamic> = config.getQuery() || {};\n\n    // Merge configuration query parameters into the request query parameters if they don't exist\n    for (const queryKey in configQueryParams) {\n      if (!Object.prototype.hasOwnProperty.call(requestQueryParams, queryKey)) {\n        requestQueryParams[queryKey] = configQueryParams[queryKey];\n      }\n    }\n    // Set the merged query parameters back to the request\n    request.setQuery(requestQueryParams);\n    return request; // Return the modified request\n  }\n}\n","/**\n * Copyright 2024 Wingify Software Pvt. Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nlet NetworkClient;\n\nif ((typeof process.env as any) === 'undefined') {\n  // eslint-disable-next-line @typescript-eslint/no-var-requires\n  NetworkClient = require('./client/NetworkBrowserClient').NetworkBrowserClient;\n} else {\n  // eslint-disable-next-line @typescript-eslint/no-var-requires\n  NetworkClient = require('./client/NetworkClient').NetworkClient;\n}\n\nexport { NetworkClient };\nexport { NetworkClientInterface } from './client/NetworkClientInterface';\nexport { NetworkManager } from './manager/NetworkManager';\nexport { GlobalRequestModel } from './models/GlobalRequestModel';\nexport { RequestModel } from './models/RequestModel';\nexport { ResponseModel } from './models/ResponseModel';\n","/**\n * Copyright 2024 Wingify Software Pvt. Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Deferred } from '../../../utils/PromiseUtil';\nimport { NetworkClientInterface } from '../client/NetworkClientInterface';\nimport { RequestHandler } from '../handlers/RequestHandler';\nimport { GlobalRequestModel } from '../models/GlobalRequestModel';\nimport { RequestModel } from '../models/RequestModel';\nimport { ResponseModel } from '../models/ResponseModel';\n\nexport class NetworkManager {\n  private config: GlobalRequestModel; // Holds the global configuration for network requests\n  private client: NetworkClientInterface; // Interface for the network client handling the actual HTTP requests\n  private static instance: NetworkManager; // Singleton instance of NetworkManager\n\n  /**\n   * Attaches a network client to the manager, or uses a default if none provided.\n   * @param {NetworkClientInterface} client - The client to attach, optional.\n   */\n  attachClient(client?: NetworkClientInterface): void {\n    if ((typeof process.env as any) === 'undefined') {\n      // eslint-disable-next-line @typescript-eslint/no-var-requires\n      const { NetworkBrowserClient } = require('../client/NetworkBrowserClient');\n\n      this.client = client || new NetworkBrowserClient(); // Use provided client or default to NetworkClient\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-var-requires\n      const { NetworkClient } = require('../client/NetworkClient');\n\n      this.client = client || new NetworkClient(); // Use provided client or default to NetworkClient\n    }\n\n    this.config = new GlobalRequestModel(null, null, null, null); // Initialize with default config\n  }\n\n  /**\n   * Singleton accessor for the NetworkManager instance.\n   * @returns {NetworkManager} The singleton instance.\n   */\n  static get Instance(): NetworkManager {\n    this.instance = this.instance || new NetworkManager(); // Create instance if it doesn't exist\n    return this.instance;\n  }\n\n  /**\n   * Sets the global configuration for network requests.\n   * @param {GlobalRequestModel} config - The configuration to set.\n   */\n  setConfig(config: GlobalRequestModel): void {\n    this.config = config; // Set the global request configuration\n  }\n\n  /**\n   * Retrieves the current global configuration.\n   * @returns {GlobalRequestModel} The current configuration.\n   */\n  getConfig(): GlobalRequestModel {\n    return this.config; // Return the global request configuration\n  }\n\n  /**\n   * Creates a network request model by merging specific request data with global config.\n   * @param {RequestModel} request - The specific request data.\n   * @returns {RequestModel} The merged request model.\n   */\n  createRequest(request: RequestModel): RequestModel {\n    const options: RequestModel = new RequestHandler().createRequest(request, this.config); // Merge and create request\n    return options;\n  }\n\n  /**\n   * Performs a GET request using the provided request model.\n   * @param {RequestModel} request - The request model.\n   * @returns {Promise<ResponseModel>} A promise that resolves to the response model.\n   */\n  get(request: RequestModel): Promise<ResponseModel> {\n    const deferred = new Deferred(); // Create a new deferred promise\n\n    const networkOptions: RequestModel = this.createRequest(request); // Create network request options\n    if (!networkOptions.getUrl()) {\n      deferred.reject(new Error('no url found')); // Reject if no URL is found\n    } else {\n      this.client\n        .GET(networkOptions)\n        .then((response: ResponseModel) => {\n          deferred.resolve(response); // Resolve with the response\n        })\n        .catch((errorResponse: ResponseModel) => {\n          deferred.reject(errorResponse); // Reject with the error response\n        });\n    }\n\n    return deferred.promise; // Return the promise\n  }\n\n  /**\n   * Performs a POST request using the provided request model.\n   * @param {RequestModel} request - The request model.\n   * @returns {Promise<ResponseModel>} A promise that resolves to the response model.\n   */\n  post(request: RequestModel): Promise<ResponseModel> {\n    const deferred = new Deferred(); // Create a new deferred promise\n\n    const networkOptions: RequestModel = this.createRequest(request); // Create network request options\n    if (!networkOptions.getUrl()) {\n      deferred.reject(new Error('no url found')); // Reject if no URL is found\n    } else {\n      this.client\n        .POST(networkOptions)\n        .then((response: ResponseModel) => {\n          deferred.resolve(response); // Resolve with the response\n        })\n        .catch((error: ResponseModel) => {\n          deferred.reject(error); // Reject with the error\n        });\n    }\n\n    return deferred.promise; // Return the promise\n  }\n}\n","/**\n * Copyright 2024 Wingify Software Pvt. Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { dynamic } from '../../../types/Common';\n\n/**\n * Represents a model for global HTTP requests configuration.\n * This class encapsulates all necessary details such as URL, query parameters, body, headers,\n * timeout settings, and development mode flag.\n */\nexport class GlobalRequestModel {\n  private url: string; // Base URL of the HTTP request\n  private timeout = 3000; // Default timeout for the HTTP request in milliseconds\n  private query: Record<string, dynamic>; // Query parameters for the HTTP request\n  private body: Record<string, dynamic>; // Body of the HTTP request\n  private headers: Record<string, string>; // HTTP headers\n  private isDevelopmentMode: boolean; // Flag to indicate if the request is in development mode\n\n  /**\n   * Constructs an instance of the GlobalRequestModel.\n   * @param url The base URL of the HTTP request.\n   * @param query Query parameters as a record of key-value pairs.\n   * @param body Body of the request as a record of key-value pairs.\n   * @param headers HTTP headers as a record of key-value pairs.\n   */\n  constructor(\n    url: string,\n    query: Record<string, dynamic>,\n    body: Record<string, dynamic>,\n    headers: Record<string, any>,\n  ) {\n    this.url = url;\n    this.query = query;\n    this.body = body;\n    this.headers = headers;\n  }\n\n  /**\n   * Sets the query parameters for the HTTP request.\n   * @param query A record of key-value pairs representing the query parameters.\n   */\n  setQuery(query: Record<string, dynamic>): void {\n    this.query = query;\n  }\n\n  /**\n   * Retrieves the query parameters of the HTTP request.\n   * @returns A record of key-value pairs representing the query parameters.\n   */\n  getQuery(): Record<string, dynamic> {\n    return this.query;\n  }\n\n  /**\n   * Sets the body of the HTTP request.\n   * @param body A record of key-value pairs representing the body content.\n   */\n  setBody(body: Record<string, dynamic>): void {\n    this.body = body;\n  }\n\n  /**\n   * Retrieves the body of the HTTP request.\n   * @returns A record of key-value pairs representing the body content.\n   */\n  getBody(): Record<string, dynamic> {\n    return this.body;\n  }\n\n  /**\n   * Sets the base URL of the HTTP request.\n   * @param url The base URL as a string.\n   */\n  setBaseUrl(url: string): void {\n    this.url = url;\n  }\n\n  /**\n   * Retrieves the base URL of the HTTP request.\n   * @returns The base URL as a string.\n   */\n  getBaseUrl(): string {\n    return this.url;\n  }\n\n  /**\n   * Sets the timeout duration for the HTTP request.\n   * @param timeout Timeout in milliseconds.\n   */\n  setTimeout(timeout: number): void {\n    this.timeout = timeout;\n  }\n\n  /**\n   * Retrieves the timeout duration of the HTTP request.\n   * @returns Timeout in milliseconds.\n   */\n  getTimeout(): number {\n    return this.timeout;\n  }\n\n  /**\n   * Sets the HTTP headers for the request.\n   * @param headers A record of key-value pairs representing the HTTP headers.\n   */\n  setHeaders(headers: Record<string, string>): void {\n    this.headers = headers;\n  }\n\n  /**\n   * Retrieves the HTTP headers of the request.\n   * @returns A record of key-value pairs representing the HTTP headers.\n   */\n  getHeaders(): Record<string, string> {\n    return this.headers;\n  }\n\n  /**\n   * Sets the development mode status for the request.\n   * @param isDevelopmentMode Boolean flag indicating if the request is in development mode.\n   */\n  setDevelopmentMode(isDevelopmentMode: boolean): void {\n    this.isDevelopmentMode = isDevelopmentMode;\n  }\n\n  /**\n   * Retrieves the development mode status of the request.\n   * @returns Boolean indicating if the request is in development mode.\n   */\n  getDevelopmentMode(): boolean {\n    return this.isDevelopmentMode;\n  }\n}\n","/**\n * Copyright 2024 Wingify Software Pvt. Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { HttpMethodEnum } from '../../../enums/HttpMethodEnum';\nimport { dynamic } from '../../../types/Common';\nimport { HTTPS } from '../../../constants/Url';\n\n/**\n * Represents a model for HTTP requests.\n * This class encapsulates all necessary details such as URL, method, path, query parameters, body, headers,\n * scheme, port, and timeout settings.\n */\nexport class RequestModel {\n  private url: string; // Base URL of the HTTP request\n  private method: string; // HTTP method (GET, POST, etc.)\n  private scheme: string; // Protocol scheme (http, https)\n  private port: number; // Port number\n  private path: string; // Path of the URL\n  private query: Record<string, dynamic>; // Query parameters\n  private timeout: number; // Timeout for the HTTP request in milliseconds\n  private body: Record<string, dynamic>; // Body of the HTTP request\n  private headers: Record<string, string>; // HTTP headers\n\n  /**\n   * Constructs an instance of the RequestModel.\n   * @param url The base URL of the HTTP request.\n   * @param method HTTP method, default is 'GET'.\n   * @param path URL path.\n   * @param query Query parameters as a record of key-value pairs.\n   * @param body Body of the request as a record of key-value pairs.\n   * @param headers HTTP headers as a record of key-value pairs.\n   * @param scheme Protocol scheme, default is 'http'.\n   * @param port Port number, default is 80.\n   */\n  constructor(\n    url: string,\n    method: string = HttpMethodEnum.GET,\n    path: string,\n    query: Record<string, dynamic>,\n    body: Record<string, dynamic>,\n    headers: Record<string, string>,\n    scheme: string = HTTPS,\n    port: number,\n  ) {\n    this.url = url;\n    this.method = method;\n    this.path = path;\n    this.query = query;\n    this.body = body;\n    this.headers = headers;\n    this.scheme = scheme;\n    this.port = port;\n  }\n\n  /**\n   * Retrieves the HTTP method.\n   * @returns The HTTP method as a string.\n   */\n  getMethod(): string {\n    return this.method;\n  }\n\n  /**\n   * Sets the HTTP method.\n   * @param method The HTTP method to set.\n   */\n  setMethod(method: string): void {\n    this.method = method;\n  }\n\n  /**\n   * Retrieves the body of the HTTP request.\n   * @returns A record of key-value pairs representing the body content.\n   */\n  getBody(): Record<string, dynamic> {\n    return this.body;\n  }\n\n  /**\n   * Sets the body of the HTTP request.\n   * @param body A record of key-value pairs representing the body content.\n   */\n  setBody(body: Record<string, dynamic>): void {\n    this.body = body;\n  }\n\n  /**\n   * Sets the query parameters for the HTTP request.\n   * @param query A record of key-value pairs representing the query parameters.\n   */\n  setQuery(query: Record<string, dynamic>): void {\n    this.query = query;\n  }\n\n  /**\n   * Retrieves the query parameters of the HTTP request.\n   * @returns A record of key-value pairs representing the query parameters.\n   */\n  getQuery(): Record<string, dynamic> {\n    return this.query;\n  }\n\n  /**\n   * Sets the HTTP headers for the request.\n   * @param headers A record of key-value pairs representing the HTTP headers.\n   */\n  setHeaders(headers: Record<string, string>): this {\n    this.headers = headers;\n    return this;\n  }\n\n  /**\n   * Retrieves the HTTP headers of the request.\n   * @returns A record of key-value pairs representing the HTTP headers.\n   */\n  getHeaders(): Record<string, string> {\n    return this.headers;\n  }\n\n  /**\n   * Sets the timeout duration for the HTTP request.\n   * @param timeout Timeout in milliseconds.\n   */\n  setTimeout(timeout: number): this {\n    this.timeout = timeout;\n    return this;\n  }\n\n  /**\n   * Retrieves the timeout duration of the HTTP request.\n   * @returns Timeout in milliseconds.\n   */\n  getTimeout(): number {\n    return this.timeout;\n  }\n\n  /**\n   * Retrieves the base URL of the HTTP request.\n   * @returns The base URL as a string.\n   */\n  getUrl(): string {\n    return this.url;\n  }\n\n  /**\n   * Sets the base URL of the HTTP request.\n   * @param url The base URL as a string.\n   */\n  setUrl(url: string): this {\n    this.url = url;\n    return this;\n  }\n\n  /**\n   * Retrieves the scheme of the HTTP request.\n   * @returns The scheme as a string.\n   */\n  getScheme(): string {\n    return this.scheme;\n  }\n\n  /**\n   * Sets the scheme of the HTTP request.\n   * @param scheme The scheme to set (http or https).\n   */\n  setScheme(scheme: string): this {\n    this.scheme = scheme;\n    return this;\n  }\n\n  /**\n   * Retrieves the port number of the HTTP request.\n   * @returns The port number as an integer.\n   */\n  getPort(): number {\n    return this.port;\n  }\n\n  /**\n   * Sets the port number for the HTTP request.\n   * @param port The port number to set.\n   */\n  setPort(port: number): this {\n    this.port = port;\n    return this;\n  }\n\n  /**\n   * Retrieves the path of the HTTP request.\n   * @returns The path as a string.\n   */\n  getPath(): string {\n    return this.path;\n  }\n\n  /**\n   * Sets the path of the HTTP request.\n   * @param path The path to set.\n   */\n  setPath(path: string): this {\n    this.path = path;\n    return this;\n  }\n\n  /**\n   * Constructs the options for the HTTP request based on the current state of the model.\n   * This method is used to prepare the request options for execution.\n   * @returns A record containing all relevant options for the HTTP request.\n   */\n  getOptions(): Record<string, any> {\n    let queryParams = '';\n    for (const key in this.query) {\n      const queryString = `${key}=${this.query[key]}&`;\n      queryParams += queryString;\n    }\n\n    const [hostname, collectionPrefix] = this.url.split('/');\n    const options: Record<string, any> = {\n      hostname, // if url is example.com/as01, hostname will be example.com\n      agent: false,\n    };\n\n    if (this.scheme) {\n      options.scheme = this.scheme;\n    }\n    if (this.port) {\n      options.port = this.port;\n    }\n    if (this.headers) {\n      options.headers = this.headers;\n    }\n\n    if (this.method) {\n      options.method = this.method;\n    }\n\n    if (this.body) {\n      const postBody = JSON.stringify(this.body);\n      options.headers = options.headers || {};\n      options.headers['Content-Type'] = 'application/json';\n\n      if (typeof Buffer === 'undefined') {\n        options.headers['Content-Length'] = new TextEncoder().encode(postBody).length;\n      } else {\n        options.headers['Content-Length'] = Buffer.byteLength(postBody);\n      }\n      options.body = this.body;\n    }\n\n    if (this.path) {\n      if (queryParams !== '') {\n        options.path = this.path + '?' + queryParams || '';\n      } else {\n        options.path = this.path;\n      }\n    }\n\n    if (collectionPrefix) {\n      options.path = `/${collectionPrefix}` + options.path;\n    }\n    if (this.timeout) {\n      options.timeout = this.timeout;\n    }\n    if (options.path.charAt(options.path.length - 1) === '&') {\n      options.path = options.path.substring(0, options.path.length - 1);\n    }\n\n    return options;\n  }\n}\n","/**\n * Copyright 2024 Wingify Software Pvt. Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { dynamic } from '../../../types/Common';\n\n/**\n * Represents the response model for network operations.\n * This class encapsulates details about the HTTP response including status code, headers, data, and errors.\n */\nexport class ResponseModel {\n  private statusCode: number; // HTTP status code of the response\n  private error: dynamic; // Error object if the request failed\n  private headers: Record<string, string>; // Headers received in the response\n  private data: dynamic; // Data payload of the response\n\n  /**\n   * Sets the status code of the response.\n   * @param {number} statusCode - The HTTP status code\n   */\n  setStatusCode(statusCode: number): void {\n    this.statusCode = statusCode;\n  }\n\n  /**\n   * Sets the headers of the response.\n   * @param {Record<string, string>} headers - The headers of the response\n   */\n  setHeaders(headers: Record<string, string>): void {\n    this.headers = headers;\n  }\n\n  /**\n   * Sets the data of the response.\n   * @param {dynamic} data - The data payload of the response\n   */\n  setData(data: dynamic): void {\n    this.data = data;\n  }\n\n  /**\n   * Sets the error object of the response.\n   * @param {dynamic} error - The error object if the request failed\n   */\n  setError(error: dynamic): void {\n    this.error = error;\n  }\n\n  /**\n   * Retrieves the headers of the response.\n   * @returns {Record<string, string>} The headers of the response\n   */\n  getHeaders(): Record<string, string> {\n    return this.headers;\n  }\n\n  /**\n   * Retrieves the data payload of the response.\n   * @returns {dynamic} The data payload of the response\n   */\n  getData(): dynamic {\n    return this.data;\n  }\n\n  /**\n   * Retrieves the status code of the response.\n   * @returns {number} The HTTP status code\n   */\n  getStatusCode(): number {\n    return this.statusCode;\n  }\n\n  /**\n   * Retrieves the error object of the response.\n   * @returns {dynamic} The error object if the request failed\n   */\n  getError(): dynamic {\n    return this.error;\n  }\n}\n","/**\n * Copyright 2024 Wingify Software Pvt. Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SegmentEvaluator } from '../evaluators/SegmentEvaluator';\nimport { dynamic } from '../../../types/Common';\nimport { SettingsModel } from '../../../models/settings/SettingsModel';\nimport { getFromGatewayService, getQueryParams } from '../../../utils/GatewayServiceUtil';\nimport { UrlEnum } from '../../../enums/UrlEnum';\nimport { LogManager } from '../../logger';\nimport { ContextModel } from '../../../models/user/ContextModel';\nimport { FeatureModel } from '../../../models/campaign/FeatureModel';\nimport { ContextVWOModel } from '../../../models/user/ContextVWOModel';\nimport { SettingsService } from '../../../services/SettingsService';\nimport { isUndefined } from '../../../utils/DataTypeUtil';\n\nexport class SegmentationManager {\n  private static instance: SegmentationManager; // Singleton instance of SegmentationManager\n  evaluator: SegmentEvaluator; // Holds the instance of SegmentEvaluator\n\n  /**\n   * Singleton pattern implementation for getting the instance of SegmentationManager.\n   * @returns {SegmentationManager} The singleton instance.\n   */\n  static get Instance(): SegmentationManager {\n    this.instance = this.instance || new SegmentationManager(); // Create new instance if it doesn't exist\n    return this.instance;\n  }\n\n  /**\n   * Attaches an evaluator to the manager, or creates a new one if none is provided.\n   * @param {SegmentEvaluator} evaluator - Optional evaluator to attach.\n   */\n  attachEvaluator(evaluator?: SegmentEvaluator): void {\n    this.evaluator = evaluator || new SegmentEvaluator(); // Use provided evaluator or create new one\n  }\n\n  /**\n   * Sets the contextual data for the segmentation process.\n   * @param {any} settings - The settings data.\n   * @param {any} feature - The feature data including segmentation needs.\n   * @param {any} context - The context data for the evaluation.\n   */\n  async setContextualData(settings: SettingsModel, feature: FeatureModel, context: ContextModel) {\n    this.attachEvaluator(); // Ensure a fresh evaluator instance\n    this.evaluator.settings = settings; // Set settings in evaluator\n    this.evaluator.context = context; // Set context in evaluator\n    this.evaluator.feature = feature; // Set feature in evaluator\n\n    // if both user agent and ip is null then we should not get data from gateway service\n    if (context?.getUserAgent() === null && context?.getIpAddress() === null) {\n      return;\n    }\n\n    if (feature.getIsGatewayServiceRequired() === true) {\n      if (\n        SettingsService.Instance.isGatewayServiceProvided &&\n        (isUndefined(context.getVwo()) || context.getVwo() === null)\n      ) {\n        const queryParams = {};\n        if (context?.getUserAgent()) {\n          queryParams['userAgent'] = context.getUserAgent();\n        }\n\n        if (context?.getIpAddress()) {\n          queryParams['ipAddress'] = context.getIpAddress();\n        }\n        try {\n          const params = getQueryParams(queryParams);\n          const _vwo = await getFromGatewayService(params, UrlEnum.GET_USER_DATA);\n          context.setVwo(new ContextVWOModel().modelFromDictionary(_vwo));\n        } catch (err) {\n          LogManager.Instance.error(`Error in setting contextual data for segmentation. Got error: ${err.error}`);\n        }\n      }\n    }\n  }\n\n  /**\n   * Validates the segmentation against provided DSL and properties.\n   * @param {Record<string, dynamic>} dsl - The segmentation DSL.\n   * @param {Record<any, dynamic>} properties - The properties to validate against.\n   * @param {SettingsModel} settings - The settings model.\n   * @param {any} context - Optional context.\n   * @returns {Promise<boolean>} True if segmentation is valid, otherwise false.\n   */\n  async validateSegmentation(dsl: Record<string, dynamic>, properties: Record<any, dynamic>): Promise<boolean> {\n    return await this.evaluator.isSegmentationValid(dsl, properties); // Delegate to evaluator's method\n  }\n}\n","/**\n * Copyright 2024 Wingify Software Pvt. Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport enum SegmentOperandRegexEnum {\n  LOWER = '^lower',\n  LOWER_MATCH = '^lower\\\\((.*)\\\\)',\n  WILDCARD = '^wildcard',\n  WILDCARD_MATCH = '^wildcard\\\\((.*)\\\\)',\n  REGEX = '^regex',\n  REGEX_MATCH = '^regex\\\\((.*)\\\\)',\n  STARTING_STAR = '^\\\\*',\n  ENDING_STAR = '\\\\*$',\n  GREATER_THAN_MATCH = '^gt\\\\((\\\\d+\\\\.?\\\\d*|\\\\.\\\\d+)\\\\)',\n  GREATER_THAN_EQUAL_TO_MATCH = '^gte\\\\((\\\\d+\\\\.?\\\\d*|\\\\.\\\\d+)\\\\)',\n  LESS_THAN_MATCH = '^lt\\\\((\\\\d+\\\\.?\\\\d*|\\\\.\\\\d+)\\\\)',\n  LESS_THAN_EQUAL_TO_MATCH = '^lte\\\\((\\\\d+\\\\.?\\\\d*|\\\\.\\\\d+)\\\\)',\n}\n","/**\n * Copyright 2024 Wingify Software Pvt. Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport enum SegmentOperandValueEnum {\n  LOWER_VALUE = 1,\n  STARTING_ENDING_STAR_VALUE = 2,\n  STARTING_STAR_VALUE = 3,\n  ENDING_STAR_VALUE = 4,\n  REGEX_VALUE = 5,\n  EQUAL_VALUE = 6,\n  GREATER_THAN_VALUE = 7,\n  GREATER_THAN_EQUAL_TO_VALUE = 8,\n  LESS_THAN_VALUE = 9,\n  LESS_THAN_EQUAL_TO_VALUE = 10,\n}\n","/**\n * Copyright 2024 Wingify Software Pvt. Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport enum SegmentOperatorValueEnum {\n  AND = 'and',\n  NOT = 'not',\n  OR = 'or',\n  CUSTOM_VARIABLE = 'custom_variable',\n  USER = 'user',\n  COUNTRY = 'country',\n  REGION = 'region',\n  CITY = 'city',\n  OPERATING_SYSTEM = 'os',\n  DEVICE_TYPE = 'device_type',\n  DEVICE = 'device',\n  BROWSER_AGENT = 'browser_string',\n  UA = 'ua',\n  FEATURE_ID = 'featureId',\n}\n","/**\n * Copyright 2024 Wingify Software Pvt. Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { StorageDecorator } from '../../../decorators/StorageDecorator';\nimport { SettingsModel } from '../../../models/settings/SettingsModel';\nimport { LogManager } from '../../logger';\nimport { StorageService } from '../../../services/StorageService';\nimport { dynamic } from '../../../types/Common';\nimport { isObject } from '../../../utils/DataTypeUtil';\nimport { SegmentOperatorValueEnum } from '../enums/SegmentOperatorValueEnum';\nimport { Segmentation } from '../Segmentation';\nimport { getKeyValue } from '../utils/SegmentUtil';\nimport { SegmentOperandEvaluator } from './SegmentOperandEvaluator';\nimport { ContextModel } from '../../../models/user/ContextModel';\nimport { FeatureModel } from '../../../models/campaign/FeatureModel';\n\nexport class SegmentEvaluator implements Segmentation {\n  context: ContextModel;\n  settings: SettingsModel;\n  feature: FeatureModel;\n\n  /**\n   * Validates if the segmentation defined in the DSL is applicable based on the provided properties.\n   * @param dsl The domain-specific language defining the segmentation rules.\n   * @param properties The properties against which the DSL rules are evaluated.\n   * @returns A Promise resolving to a boolean indicating if the segmentation is valid.\n   */\n  async isSegmentationValid(dsl: Record<string, dynamic>, properties: Record<string, dynamic>): Promise<boolean> {\n    const { key, value } = getKeyValue(dsl);\n    const operator = key;\n    const subDsl = value;\n\n    // Evaluate based on the type of segmentation operator\n    switch (operator) {\n      case SegmentOperatorValueEnum.NOT:\n        return !(await this.isSegmentationValid(subDsl, properties));\n      case SegmentOperatorValueEnum.AND:\n        return await this.every(subDsl, properties);\n      case SegmentOperatorValueEnum.OR:\n        return await this.some(subDsl, properties);\n      case SegmentOperatorValueEnum.CUSTOM_VARIABLE:\n        return await new SegmentOperandEvaluator().evaluateCustomVariableDSL(subDsl, properties);\n      case SegmentOperatorValueEnum.USER:\n        return new SegmentOperandEvaluator().evaluateUserDSL(subDsl, properties);\n      case SegmentOperatorValueEnum.UA:\n        return new SegmentOperandEvaluator().evaluateUserAgentDSL(subDsl, this.context);\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * Evaluates if any of the DSL nodes are valid using the OR logic.\n   * @param dslNodes Array of DSL nodes to evaluate.\n   * @param customVariables Custom variables provided for evaluation.\n   * @returns A Promise resolving to a boolean indicating if any of the nodes are valid.\n   */\n  async some(dslNodes: Array<Record<string, dynamic>>, customVariables: Record<string, dynamic>): Promise<boolean> {\n    const uaParserMap: Record<string, string[]> = {};\n    let keyCount: number = 0; // Initialize count of keys encountered\n    let isUaParser = false;\n\n    for (const dsl of dslNodes) {\n      for (const key in dsl) {\n        // Check for user agent related keys\n        if (\n          key === SegmentOperatorValueEnum.OPERATING_SYSTEM ||\n          key === SegmentOperatorValueEnum.BROWSER_AGENT ||\n          key === SegmentOperatorValueEnum.DEVICE_TYPE ||\n          key === SegmentOperatorValueEnum.DEVICE\n        ) {\n          isUaParser = true;\n          const value = dsl[key];\n\n          if (!uaParserMap[key]) {\n            uaParserMap[key] = [];\n          }\n\n          // Ensure value is treated as an array of strings\n          const valuesArray = Array.isArray(value) ? value : [value];\n          valuesArray.forEach((val: dynamic) => {\n            if (typeof val === 'string') {\n              uaParserMap[key].push(val);\n            }\n          });\n\n          keyCount++; // Increment count of keys encountered\n        }\n\n        // Check for feature toggle based on feature ID\n        if (key === SegmentOperatorValueEnum.FEATURE_ID) {\n          const featureIdObject = dsl[key] as Record<string, string>;\n          const featureIdKey: string = Object.keys(featureIdObject)[0];\n          const featureIdValue: string = featureIdObject[featureIdKey];\n\n          if (featureIdValue === 'on' || featureIdValue === 'off') {\n            const features = this.settings.getFeatures();\n            const feature = features.find((feature) => feature.getId() === parseInt(featureIdKey));\n\n            if (feature) {\n              const featureKey = feature.getKey();\n              const result = await this.checkInUserStorage(this.settings, featureKey, this.context);\n              // if the result is false, then we need to return true as feature is not present in the user storage\n              if (featureIdValue === 'off') {\n                return !result;\n              }\n              return result;\n            } else {\n              LogManager.Instance.error('Feature not found with featureIdKey: ' + featureIdKey);\n              return null; // Handle the case when feature is not found\n            }\n          }\n        }\n      }\n\n      // Check if the count of keys encountered is equal to dslNodes.length\n      if (isUaParser && keyCount === dslNodes.length) {\n        try {\n          const uaParserResult = await this.checkUserAgentParser(uaParserMap);\n          return uaParserResult;\n        } catch (err) {\n          LogManager.Instance.error('Failed to validate User Agent. Erro: ' + err);\n        }\n      }\n\n      // Recursively check each DSL node\n      if (await this.isSegmentationValid(dsl, customVariables)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Evaluates all DSL nodes using the AND logic.\n   * @param dslNodes Array of DSL nodes to evaluate.\n   * @param customVariables Custom variables provided for evaluation.\n   * @returns A Promise resolving to a boolean indicating if all nodes are valid.\n   */\n  async every(dslNodes: Array<Record<string, dynamic>>, customVariables: Record<string, dynamic>): Promise<boolean> {\n    const locationMap: Record<string, dynamic> = {};\n    for (const dsl of dslNodes) {\n      // Check if the DSL node contains location-related keys\n      if (\n        SegmentOperatorValueEnum.COUNTRY in dsl ||\n        SegmentOperatorValueEnum.REGION in dsl ||\n        SegmentOperatorValueEnum.CITY in dsl\n      ) {\n        this.addLocationValuesToMap(dsl, locationMap);\n        // Check if the number of location keys matches the number of DSL nodes\n        if (Object.keys(locationMap).length === dslNodes.length) {\n          const segmentResult = await this.checkLocationPreSegmentation(locationMap);\n          return segmentResult;\n        }\n        continue;\n      }\n      const res = await this.isSegmentationValid(dsl, customVariables);\n      if (!res) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Adds location values from a DSL node to a map.\n   * @param dsl DSL node containing location data.\n   * @param locationMap Map to store location data.\n   */\n  addLocationValuesToMap(dsl: Record<string, dynamic>, locationMap: Record<string, dynamic>): void {\n    // Add country, region, and city information to the location map if present\n    if (SegmentOperatorValueEnum.COUNTRY in dsl) {\n      locationMap[SegmentOperatorValueEnum.COUNTRY] = dsl[SegmentOperatorValueEnum.COUNTRY];\n    }\n    if (SegmentOperatorValueEnum.REGION in dsl) {\n      locationMap[SegmentOperatorValueEnum.REGION] = dsl[SegmentOperatorValueEnum.REGION];\n    }\n    if (SegmentOperatorValueEnum.CITY in dsl) {\n      locationMap[SegmentOperatorValueEnum.CITY] = dsl[SegmentOperatorValueEnum.CITY];\n    }\n  }\n\n  /**\n   * Checks if the user's location matches the expected location criteria.\n   * @param locationMap Map of expected location values.\n   * @returns A Promise resolving to a boolean indicating if the location matches.\n   */\n  async checkLocationPreSegmentation(locationMap: Record<string, dynamic>): Promise<boolean> {\n    // Ensure user's IP address is available\n    if (this.context?.getIpAddress() === undefined) {\n      LogManager.Instance.error('To evaluate location pre Segment, please pass ipAddress in context object');\n      return false;\n    }\n    // Check if location data is available and matches the expected values\n    if (\n      !this.context?.getVwo()?.getLocation() ||\n      this.context?.getVwo()?.getLocation() === undefined ||\n      this.context?.getVwo()?.getLocation() === null\n    ) {\n      return false;\n    }\n    return this.valuesMatch(locationMap, this.context?.getVwo()?.getLocation());\n  }\n\n  /**\n   * Checks if the user's device information matches the expected criteria.\n   * @param uaParserMap Map of expected user agent values.\n   * @returns A Promise resolving to a boolean indicating if the user agent matches.\n   */\n  async checkUserAgentParser(uaParserMap: Record<string, string[]>): Promise<boolean> {\n    // Ensure user's user agent is available\n    if (!this.context?.getUserAgent() || this.context?.getUserAgent() === undefined) {\n      LogManager.Instance.error('To evaluate user agent related segments, please pass userAgent in context object');\n      return false;\n    }\n    // Check if user agent data is available and matches the expected values\n    if (!this.context?.getVwo()?.getUaInfo() || this.context?.getVwo()?.getUaInfo() === undefined) {\n      return false;\n    }\n\n    return this.checkValuePresent(uaParserMap, this.context?.getVwo()?.getUaInfo());\n  }\n\n  /**\n   * Checks if the feature is enabled for the user by querying the storage.\n   * @param settings The settings model containing configuration.\n   * @param featureKey The key of the feature to check.\n   * @param user The user object to check against.\n   * @returns A Promise resolving to a boolean indicating if the feature is enabled for the user.\n   */\n  async checkInUserStorage(settings: SettingsModel, featureKey: string, context: ContextModel): Promise<any> {\n    const storageService = new StorageService();\n    // Retrieve feature data from storage\n    const storedData: Record<any, any> = await new StorageDecorator().getFeatureFromStorage(\n      featureKey,\n      context,\n      storageService,\n    );\n\n    // Check if the stored data is an object and not empty\n    if (isObject(storedData) && Object.keys(storedData).length > 0) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Checks if the actual values match the expected values specified in the map.\n   * @param expectedMap A map of expected values for different keys.\n   * @param actualMap A map of actual values to compare against.\n   * @returns A Promise resolving to a boolean indicating if all actual values match the expected values.\n   */\n  async checkValuePresent(expectedMap: Record<string, string[]>, actualMap: Record<string, string>): Promise<boolean> {\n    for (const key in actualMap) {\n      if (Object.prototype.hasOwnProperty.call(expectedMap, key)) {\n        const expectedValues = expectedMap[key];\n        // convert expected values to lowercase\n        expectedValues.forEach((value, index) => {\n          expectedValues[index] = value.toLowerCase();\n        });\n        const actualValue = actualMap[key];\n\n        // Handle wildcard patterns for all keys\n        for (const val of expectedValues) {\n          // Check if the value is a wildcard pattern and matches the actual value using regex\n          if (val.startsWith('wildcard(') && val.endsWith(')')) {\n            // Extract pattern from wildcard string\n            const wildcardPattern = val.slice(9, -1);\n            // Convert wildcard pattern to regex and check if it matches the actual value\n            const regex = new RegExp(wildcardPattern.replace(/\\*/g, '.*'), 'i'); // Convert wildcard pattern to regex, 'i' for case-insensitive\n            // Check if the actual value matches the regex pattern for the key\n            if (regex.test(actualValue)) {\n              // match found, return true as we only need to check if any of the expected values match the actual value\n              return true;\n            }\n          }\n        }\n\n        // this will be checked for all cases where wildcard is not present\n        if (expectedValues.includes(actualValue?.toLowerCase())) {\n          return true; // Direct value match found, return true\n        }\n      }\n    }\n    return false; // No matches found\n  }\n\n  /**\n   * Compares expected location values with user's location to determine a match.\n   * @param expectedLocationMap A map of expected location values.\n   * @param userLocation The user's actual location.\n   * @returns A boolean indicating if the user's location matches the expected values.\n   */\n  async valuesMatch(expectedLocationMap, userLocation) {\n    for (const [key, value] of Object.entries(expectedLocationMap)) {\n      if (key in userLocation) {\n        const normalizedValue1 = this.normalizeValue(value);\n        const normalizedValue2 = this.normalizeValue(userLocation[key]);\n        if (normalizedValue1 !== normalizedValue2) {\n          return false;\n        }\n      } else {\n        return false;\n      }\n    }\n    return true; // If all values match, return true\n  }\n\n  /**\n   * Normalizes a value to a consistent format for comparison.\n   * @param value The value to normalize.\n   * @returns The normalized value.\n   */\n  normalizeValue(value) {\n    if (value === null || value === undefined) {\n      return null;\n    }\n    // Remove quotes and trim whitespace\n    return value.toString().replace(/^\"|\"$/g, '').trim();\n  }\n}\n","/**\n * Copyright 2024 Wingify Software Pvt. Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { getKeyValue, matchWithRegex } from '../utils/SegmentUtil';\nimport { SegmentOperandValueEnum } from '../enums/SegmentOperandValueEnum';\nimport { SegmentOperandRegexEnum } from '../enums/SegmentOperandRegexEnum';\nimport { isBoolean } from '../../../utils/DataTypeUtil';\nimport { dynamic } from '../../../types/Common';\nimport { getFromGatewayService } from '../../../utils/GatewayServiceUtil';\nimport { UrlEnum } from '../../../enums/UrlEnum';\nimport { LogManager } from '../../logger';\nimport { ContextModel } from '../../../models/user/ContextModel';\n\n/**\n * SegmentOperandEvaluator class provides methods to evaluate different types of DSL (Domain Specific Language)\n * expressions based on the segment conditions defined for custom variables, user IDs, and user agents.\n */\nexport class SegmentOperandEvaluator {\n  /**\n   * Evaluates a custom variable DSL expression.\n   * @param {Record<string, dynamic>} dslOperandValue - The DSL expression for the custom variable.\n   * @param {Record<string, dynamic>} properties - The properties object containing the actual values to be matched against.\n   * @returns {Promise<boolean>} - A promise that resolves to a boolean indicating if the DSL condition is met.\n   */\n  async evaluateCustomVariableDSL(\n    dslOperandValue: Record<string, dynamic>,\n    properties: Record<string, dynamic>,\n  ): Promise<boolean> {\n    // Extract key and value from the DSL operand\n    const { key, value } = getKeyValue(dslOperandValue);\n    const operandKey = key;\n    const operand = value;\n\n    // Check if the property exists\n    if (!Object.prototype.hasOwnProperty.call(properties, operandKey)) {\n      return false;\n    }\n\n    // Handle 'inlist' operand\n    if (operand.includes('inlist')) {\n      const listIdRegex = /inlist\\(([^:]+)\\)/;\n      const match = operand.match(listIdRegex);\n      if (!match || match.length < 2) {\n        LogManager.Instance.error(\"Invalid 'inList' operand format\");\n        return false;\n      }\n\n      // Process the tag value and prepare query parameters\n      const tagValue = properties[operandKey];\n      const attributeValue = this.preProcessTagValue(tagValue);\n      const listId = match[1];\n      const queryParamsObj = {\n        attribute: attributeValue,\n        listId: listId,\n      };\n\n      // Make a web service call to check the attribute against the list\n      try {\n        const res = await getFromGatewayService(queryParamsObj, UrlEnum.ATTRIBUTE_CHECK);\n        if (!res || res === undefined || res === 'false' || res.status === 0) {\n          return false;\n        }\n        return res;\n      } catch (error) {\n        LogManager.Instance.error('Error while fetching data: ' + error);\n        return false;\n      }\n    } else {\n      // Process other types of operands\n      let tagValue = properties[operandKey];\n      tagValue = this.preProcessTagValue(tagValue);\n      const { operandType, operandValue } = this.preProcessOperandValue(operand);\n      const processedValues = this.processValues(operandValue, tagValue);\n      tagValue = processedValues.tagValue;\n      return this.extractResult(operandType, processedValues.operandValue, tagValue);\n    }\n  }\n\n  /**\n   * Evaluates a user DSL expression to check if a user ID is in a specified list.\n   * @param {Record<string, any>} dslOperandValue - The DSL expression containing user IDs.\n   * @param {Record<string, dynamic>} properties - The properties object containing the actual user ID to check.\n   * @returns {boolean} - True if the user ID is in the list, otherwise false.\n   */\n  evaluateUserDSL(dslOperandValue: Record<string, any>, properties: Record<string, dynamic>): boolean {\n    const users = dslOperandValue.split(',');\n    for (let i = 0; i < users.length; i++) {\n      if (users[i].trim() == properties._vwoUserId) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Evaluates a user agent DSL expression.\n   * @param {Record<string, any>} dslOperandValue - The DSL expression for the user agent.\n   * @param {any} context - The context object containing the user agent string.\n   * @returns {boolean} - True if the user agent matches the DSL condition, otherwise false.\n   */\n  evaluateUserAgentDSL(dslOperandValue: Record<string, any>, context: ContextModel): boolean {\n    const operand = dslOperandValue;\n    if (!context.getUserAgent() || context.getUserAgent() === undefined) {\n      LogManager.Instance.info('To Evaluate UserAgent segmentation, please provide userAgent in context');\n      return false;\n    }\n    let tagValue = decodeURIComponent(context.getUserAgent());\n    const { operandType, operandValue } = this.preProcessOperandValue(operand);\n    const processedValues = this.processValues(operandValue, tagValue);\n    tagValue = processedValues.tagValue as string; // Fix: Type assertion to ensure tagValue is of type string\n    return this.extractResult(operandType, processedValues.operandValue, tagValue);\n  }\n\n  /**\n   * Pre-processes the tag value to ensure it is in the correct format for evaluation.\n   * @param {any} tagValue - The value to be processed.\n   * @returns {string | boolean} - The processed tag value, either as a string or a boolean.\n   */\n  preProcessTagValue(tagValue: any): string | boolean {\n    // Default to empty string if undefined\n    if (tagValue === undefined) {\n      tagValue = '';\n    }\n    // Convert boolean values to boolean type\n    if (isBoolean(tagValue)) {\n      tagValue = tagValue ? true : false;\n    }\n    // Convert all non-null values to string\n    if (tagValue !== null) {\n      tagValue = tagValue.toString();\n    }\n    return tagValue;\n  }\n\n  /**\n   * Pre-processes the operand value to determine its type and extract the value based on regex matches.\n   * @param {any} operand - The operand to be processed.\n   * @returns {Record<string, any>} - An object containing the operand type and value.\n   */\n  preProcessOperandValue(operand: any): Record<string, any> {\n    let operandType: SegmentOperandValueEnum;\n    let operandValue: dynamic;\n    // Determine the type of operand and extract value based on regex patterns\n    if (matchWithRegex(operand, SegmentOperandRegexEnum.LOWER_MATCH)) {\n      operandType = SegmentOperandValueEnum.LOWER_VALUE;\n      operandValue = this.extractOperandValue(operand, SegmentOperandRegexEnum.LOWER_MATCH);\n    } else if (matchWithRegex(operand, SegmentOperandRegexEnum.WILDCARD_MATCH)) {\n      operandValue = this.extractOperandValue(operand, SegmentOperandRegexEnum.WILDCARD_MATCH);\n      const startingStar = matchWithRegex(operandValue, SegmentOperandRegexEnum.STARTING_STAR);\n      const endingStar = matchWithRegex(operandValue, SegmentOperandRegexEnum.ENDING_STAR);\n      // Determine specific wildcard type\n      if (startingStar && endingStar) {\n        operandType = SegmentOperandValueEnum.STARTING_ENDING_STAR_VALUE;\n      } else if (startingStar) {\n        operandType = SegmentOperandValueEnum.STARTING_STAR_VALUE;\n      } else if (endingStar) {\n        operandType = SegmentOperandValueEnum.ENDING_STAR_VALUE;\n      }\n      // Remove wildcard characters from the operand value\n      operandValue = operandValue\n        .replace(new RegExp(SegmentOperandRegexEnum.STARTING_STAR), '')\n        .replace(new RegExp(SegmentOperandRegexEnum.ENDING_STAR), '');\n    } else if (matchWithRegex(operand, SegmentOperandRegexEnum.REGEX_MATCH)) {\n      operandType = SegmentOperandValueEnum.REGEX_VALUE;\n      operandValue = this.extractOperandValue(operand, SegmentOperandRegexEnum.REGEX_MATCH);\n    } else if (matchWithRegex(operand, SegmentOperandRegexEnum.GREATER_THAN_MATCH)) {\n      operandType = SegmentOperandValueEnum.GREATER_THAN_VALUE;\n      operandValue = this.extractOperandValue(operand, SegmentOperandRegexEnum.GREATER_THAN_MATCH);\n    } else if (matchWithRegex(operand, SegmentOperandRegexEnum.GREATER_THAN_EQUAL_TO_MATCH)) {\n      operandType = SegmentOperandValueEnum.GREATER_THAN_EQUAL_TO_VALUE;\n      operandValue = this.extractOperandValue(operand, SegmentOperandRegexEnum.GREATER_THAN_EQUAL_TO_MATCH);\n    } else if (matchWithRegex(operand, SegmentOperandRegexEnum.LESS_THAN_MATCH)) {\n      operandType = SegmentOperandValueEnum.LESS_THAN_VALUE;\n      operandValue = this.extractOperandValue(operand, SegmentOperandRegexEnum.LESS_THAN_MATCH);\n    } else if (matchWithRegex(operand, SegmentOperandRegexEnum.LESS_THAN_EQUAL_TO_MATCH)) {\n      operandType = SegmentOperandValueEnum.LESS_THAN_EQUAL_TO_VALUE;\n      operandValue = this.extractOperandValue(operand, SegmentOperandRegexEnum.LESS_THAN_EQUAL_TO_MATCH);\n    } else {\n      operandType = SegmentOperandValueEnum.EQUAL_VALUE;\n      operandValue = operand;\n    }\n    return {\n      operandType,\n      operandValue,\n    };\n  }\n\n  /**\n   * Extracts the operand value from a string based on a specified regex pattern.\n   * @param {any} operand - The operand string to extract from.\n   * @param {string} regex - The regex pattern to use for extraction.\n   * @returns {string} - The extracted value.\n   */\n  extractOperandValue(operand: any, regex: string): string {\n    // Match operand with regex and return the first capturing group\n    return matchWithRegex(operand, regex) && matchWithRegex(operand, regex)[1];\n  }\n\n  /**\n   * Processes numeric values from operand and tag values, converting them to strings.\n   * @param {any} operandValue - The operand value to process.\n   * @param {any} tagValue - The tag value to process.\n   * @returns {Record<string, dynamic>} - An object containing the processed operand and tag values as strings.\n   */\n  processValues(operandValue: any, tagValue: any): Record<string, dynamic> {\n    // Convert operand and tag values to floats\n    const processedOperandValue = parseFloat(operandValue);\n    const processedTagValue = parseFloat(tagValue);\n    // Return original values if conversion fails\n    if (!processedOperandValue || !processedTagValue) {\n      return {\n        operandValue: operandValue,\n        tagValue: tagValue,\n      };\n    }\n    // now we have surity that both are numbers\n    // now we can convert them independently to int type if they\n    // are int rather than floats\n    // if (processedOperandValue === Math.floor(processedOperandValue)) {\n    //   processedOperandValue = parseInt(processedOperandValue, 10);\n    // }\n    // if (processedTagValue === Math.floor(processedTagValue)) {\n    //   processedTagValue = parseInt(processedTagValue, 10);\n    // }\n    // Convert numeric values back to strings\n    return {\n      operandValue: processedOperandValue.toString(),\n      tagValue: processedTagValue.toString(),\n    };\n  }\n\n  /**\n   * Extracts the result of the evaluation based on the operand type and values.\n   * @param {SegmentOperandValueEnum} operandType - The type of the operand.\n   * @param {any} operandValue - The value of the operand.\n   * @param {any} tagValue - The value of the tag to compare against.\n   * @returns {boolean} - The result of the evaluation.\n   */\n  extractResult(operandType: SegmentOperandValueEnum, operandValue: any, tagValue: any): boolean {\n    let result: boolean;\n\n    switch (operandType) {\n      case SegmentOperandValueEnum.LOWER_VALUE:\n        // Check if both values are equal, ignoring case\n        if (tagValue !== null) {\n          result = operandValue.toLowerCase() === tagValue.toLowerCase();\n        }\n        break;\n      case SegmentOperandValueEnum.STARTING_ENDING_STAR_VALUE:\n        // Check if the tagValue contains the operandValue\n        if (tagValue !== null) {\n          result = tagValue.indexOf(operandValue) > -1;\n        }\n        break;\n      case SegmentOperandValueEnum.STARTING_STAR_VALUE:\n        // Check if the tagValue ends with the operandValue\n        if (tagValue !== null) {\n          result = tagValue.endsWith(operandValue);\n        }\n        break;\n      case SegmentOperandValueEnum.ENDING_STAR_VALUE:\n        // Check if the tagValue starts with the operandValue\n        if (tagValue !== null) {\n          result = tagValue.startsWith(operandValue);\n        }\n        break;\n      case SegmentOperandValueEnum.REGEX_VALUE:\n        // Evaluate the tagValue against the regex pattern of operandValue\n        try {\n          const pattern = new RegExp(operandValue, 'g');\n          result = !!pattern.test(tagValue);\n        } catch (err) {\n          result = false;\n        }\n        break;\n      case SegmentOperandValueEnum.GREATER_THAN_VALUE:\n        if (tagValue !== null) {\n          try {\n            result = parseFloat(operandValue) < parseFloat(tagValue);\n          } catch (err) {\n            result = false;\n          }\n        }\n        break;\n      case SegmentOperandValueEnum.GREATER_THAN_EQUAL_TO_VALUE:\n        if (tagValue !== null) {\n          try {\n            result = parseFloat(operandValue) <= parseFloat(tagValue);\n          } catch (err) {\n            result = false;\n          }\n        }\n        break;\n      case SegmentOperandValueEnum.LESS_THAN_VALUE:\n        if (tagValue !== null) {\n          try {\n            result = parseFloat(operandValue) > parseFloat(tagValue);\n          } catch (err) {\n            result = false;\n          }\n        }\n        break;\n      case SegmentOperandValueEnum.LESS_THAN_EQUAL_TO_VALUE:\n        if (tagValue !== null) {\n          try {\n            result = parseFloat(operandValue) >= parseFloat(tagValue);\n          } catch (err) {\n            result = false;\n          }\n        }\n        break;\n      default:\n        // Check if the tagValue is exactly equal to the operandValue\n        result = tagValue === operandValue;\n    }\n\n    return result;\n  }\n}\n","/**\n * Copyright 2024 Wingify Software Pvt. Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport { SegmentationManager } from './core/SegmentationManger';\nexport { SegmentEvaluator } from './evaluators/SegmentEvaluator';\nexport { Segmentation } from './Segmentation';\n","/**\n * Copyright 2024 Wingify Software Pvt. Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { isObject } from '../../../utils/DataTypeUtil';\n\n/**\n * Extracts the first key-value pair from the provided object.\n * @param {Record<string, any>} obj - The object from which to extract the key-value pair.\n * @returns {Record<string, any> | undefined} An object containing the first key and value, or undefined if input is not an object.\n */\nexport function getKeyValue(obj: Record<string, any>): Record<string, any> | undefined {\n  // Check if the input is a valid object using isObject utility function\n  if (!isObject(obj)) {\n    return;\n  }\n\n  // Extract the first key from the object\n  const key = Object.keys(obj)[0];\n  // Retrieve the value associated with the first key\n  const value = obj[key];\n  // Return an object containing the key and value\n  return {\n    key,\n    value,\n  };\n}\n\n/**\n * Matches a string against a regular expression and returns the match result.\n * @param {string} string - The string to match against the regex.\n * @param {string} regex - The regex pattern as a string.\n * @returns {RegExpMatchArray | null} The results of the regex match, or null if an error occurs.\n */\nexport function matchWithRegex(string: string, regex: string): RegExpMatchArray | null {\n  try {\n    // Attempt to match the string with the regex\n    return string.match(new RegExp(regex));\n  } catch (err) {\n    // Return null if an error occurs during regex matching\n    return null;\n  }\n}\n","/**\n * Copyright 2024 Wingify Software Pvt. Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { dynamic } from '../../types/Common';\n\nexport abstract class Connector {\n  // abstract connect(_config: Record<string, dynamic>): this;\n\n  abstract set(_key: string, _data: dynamic): void | Promise<dynamic>;\n\n  abstract get(_key: string): this | Promise<dynamic>;\n\n  // abstract getAll(): Record<string, dynamic> | Promise<Array<Record<string, dynamic>>>;\n\n  // abstract getKeys(): string[] | Promise<dynamic>;\n\n  // abstract has(_key: string): boolean | Promise<dynamic>;\n\n  // abstract hasData(): boolean | Promise<dynamic>;\n\n  // abstract update(_key: string, _data: dynamic, ttl: number): Promise<dynamic>;\n\n  // abstract remove(_key: string): this | Promise<dynamic>;\n\n  // abstract clear(): this | Promise<dynamic>;\n\n  // abstract close(): this; // TODO: stop\n}\n","/**\n * Copyright 2024 Wingify Software Pvt. Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Connector } from './Connector';\n\n// TODO: move to file\n// enum ConnectorEnum {\n//   MEMORY = 'memory',\n//   REDIS = 'redis'\n// }\n\nexport class Storage {\n  public static instance: Storage;\n  public connector: Connector | Record<any, any>; // RedisConnector |\n  // public storageType: dynamic;\n\n  public attachConnector(connector: any): any {\n    if (connector?.prototype?.constructor?.toString()?.trim()?.substring(0, 5) === 'class') {\n      this.connector = new connector();\n    } else {\n      this.connector = connector;\n    }\n\n    return this.connector;\n  }\n\n  public static get Instance(): Storage {\n    this.instance = this.instance || new Storage();\n\n    return this.instance;\n  }\n\n  public getConnector(): any {\n    return this.connector;\n  }\n}\n","/**\n * Copyright 2024 Wingify Software Pvt. Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport { Storage } from './Storage';\n","/**\n * Copyright 2024 Wingify Software Pvt. Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { DecisionMaker } from '../packages/decision-maker';\nimport { LogManager } from '../packages/logger';\nimport { SegmentationManager } from '../packages/segmentation-evaluator';\n\nimport { Constants } from '../constants';\nimport { VariationModel } from '../models/campaign/VariationModel';\n\nimport { CampaignTypeEnum } from '../enums/CampaignTypeEnum';\nimport { DebugLogMessagesEnum, InfoLogMessagesEnum } from '../enums/log-messages';\nimport { CampaignModel } from '../models/campaign/CampaignModel';\nimport { ContextModel } from '../models/user/ContextModel';\nimport { isObject } from '../utils/DataTypeUtil';\nimport { buildMessage } from '../utils/LogMessageUtil';\n\ninterface ICampaignDecisionService {\n  isUserPartOfCampaign(userId: any, campaign: CampaignModel): boolean;\n  getVariation(variations: Array<VariationModel>, bucketValue: number): VariationModel;\n  checkInRange(variation: VariationModel, bucketValue: number): VariationModel;\n  bucketUserToVariation(userId: any, accountId: any, campaign: CampaignModel): VariationModel;\n  getPreSegmentationDecision(campaign: CampaignModel, context: ContextModel): Promise<any>;\n  getVariationAlloted(userId: any, accountId: any, campaign: CampaignModel): VariationModel;\n}\n\nexport class CampaignDecisionService implements ICampaignDecisionService {\n  /**\n   * Calculate if this user should become part of the campaign or not\n   *\n   * @param {String} userId the unique ID assigned to a user\n   * @param {Object} campaign fot getting the value of traffic allotted to the campaign\n   *\n   * @return {Boolean} if User is a part of Campaign or not\n   */\n  isUserPartOfCampaign(userId: any, campaign: CampaignModel): boolean {\n    // if (!ValidateUtil.isValidValue(userId) || !campaign) {\n    //   return false;\n    // }\n\n    if (!campaign || !userId) {\n      return false;\n    }\n    let trafficAllocation;\n    if (campaign.getType() === CampaignTypeEnum.ROLLOUT || campaign.getType() === CampaignTypeEnum.PERSONALIZE) {\n      trafficAllocation = campaign.getVariations()[0].getWeight();\n    } else {\n      trafficAllocation = campaign.getTraffic();\n    }\n    const valueAssignedToUser = new DecisionMaker().getBucketValueForUser(`${campaign.getId()}_${userId}`);\n    const isUserPart = valueAssignedToUser !== 0 && valueAssignedToUser <= trafficAllocation;\n\n    LogManager.Instance.info(\n      buildMessage(InfoLogMessagesEnum.USER_PART_OF_CAMPAIGN, {\n        userId,\n        notPart: isUserPart ? '' : 'not',\n        campaignKey: campaign.getKey(),\n      }),\n    );\n\n    return isUserPart;\n  }\n\n  /**\n   * Returns the Variation by checking the Start and End Bucket Allocations of each Variation\n   *\n   * @param {Object} campaign which contains the variations\n   * @param {Number} bucketValue the bucket Value of the user\n   *\n   * @return {Object|null} variation data allotted to the user or null if not\n   */\n  getVariation(variations: Array<VariationModel>, bucketValue: number): VariationModel {\n    for (let i = 0; i < variations.length; i++) {\n      const variation = variations[i];\n      if (bucketValue >= variation.getStartRangeVariation() && bucketValue <= variation.getEndRangeVariation()) {\n        return variation;\n      }\n    }\n\n    return null;\n  }\n\n  checkInRange(variation: VariationModel, bucketValue: number): VariationModel {\n    if (bucketValue >= variation.getStartRangeVariation() && bucketValue <= variation.getEndRangeVariation()) {\n      return variation;\n    }\n  }\n\n  /**\n   * Validates the User ID and generates Variation into which the User is bucketed in.\n   *\n   * @param {String} userId the unique ID assigned to User\n   * @param {Object} campaign the Campaign of which User is a part of\n   *\n   * @return {Object|null} variation data into which user is bucketed in or null if not\n   */\n  bucketUserToVariation(userId: any, accountId: any, campaign: CampaignModel): VariationModel {\n    let multiplier;\n\n    if (!campaign || !userId) {\n      return null;\n    }\n\n    if (campaign.getTraffic()) {\n      multiplier = 1;\n    }\n\n    const percentTraffic = campaign.getTraffic();\n    const hashValue = new DecisionMaker().generateHashValue(`${campaign.getId()}_${accountId}_${userId}`);\n    const bucketValue = new DecisionMaker().generateBucketValue(hashValue, Constants.MAX_TRAFFIC_VALUE, multiplier);\n\n    LogManager.Instance.debug(\n      buildMessage(DebugLogMessagesEnum.USER_BUCKET_TO_VARIATION, {\n        userId,\n        campaignKey: campaign.getKey(),\n        percentTraffic,\n        bucketValue,\n        hashValue,\n      }),\n    );\n\n    return this.getVariation(campaign.getVariations(), bucketValue);\n  }\n\n  async getPreSegmentationDecision(campaign: CampaignModel, context: ContextModel): Promise<boolean> {\n    // validate segmentation\n    const campaignType = campaign.getType();\n    let segments = {};\n\n    if (campaignType === CampaignTypeEnum.ROLLOUT || campaignType === CampaignTypeEnum.PERSONALIZE) {\n      segments = campaign.getVariations()[0].getSegments();\n    } else if (campaignType === CampaignTypeEnum.AB) {\n      segments = campaign.getSegments();\n    }\n    if (isObject(segments) && !Object.keys(segments).length) {\n      LogManager.Instance.info(\n        buildMessage(InfoLogMessagesEnum.SEGMENTATION_SKIP, {\n          userId: context.getId(),\n          campaignKey: campaign.getRuleKey(),\n        }),\n      );\n\n      return true;\n    } else {\n      const preSegmentationResult = await SegmentationManager.Instance.validateSegmentation(\n        segments,\n        context.getCustomVariables(),\n      );\n\n      if (!preSegmentationResult) {\n        LogManager.Instance.info(\n          buildMessage(InfoLogMessagesEnum.SEGMENTATION_STATUS, {\n            userId: context.getId(),\n            campaignKey: campaign.getRuleKey(),\n            status: 'failed',\n          }),\n        );\n\n        return false;\n      }\n\n      LogManager.Instance.info(\n        buildMessage(InfoLogMessagesEnum.SEGMENTATION_STATUS, {\n          userId: context.getId(),\n          campaignKey: campaign.getRuleKey(),\n          status: 'passed',\n        }),\n      );\n\n      return true;\n    }\n  }\n\n  getVariationAlloted(userId: any, accountId: any, campaign: CampaignModel): VariationModel {\n    const isUserPart = this.isUserPartOfCampaign(userId, campaign);\n    if (campaign.getType() === CampaignTypeEnum.ROLLOUT || campaign.getType() === CampaignTypeEnum.PERSONALIZE) {\n      if (isUserPart) {\n        return campaign.getVariations()[0];\n      } else {\n        return null;\n      }\n    } else {\n      if (isUserPart) {\n        return this.bucketUserToVariation(userId, accountId, campaign);\n      } else {\n        return null;\n      }\n    }\n  }\n}\n","/**\n * Copyright 2024 Wingify Software Pvt. Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { IVWOOptions } from '../models/VWOOptionsModel';\nimport { isFunction } from '../utils/DataTypeUtil';\n\nexport interface IHooksService {\n  execute(properties: Record<string, any>): void;\n  set(properties: Record<string, any>): void;\n  get(): Record<string, any>;\n}\nclass HooksService implements IHooksService {\n  private callback: ((properties: Record<string, any>) => void) | undefined;\n  private isCallBackFunction: boolean;\n  private decision: Record<string, any>;\n\n  constructor(options: IVWOOptions) {\n    this.callback = options.integrations?.callback;\n    this.isCallBackFunction = isFunction(this.callback);\n    this.decision = {};\n  }\n\n  /**\n   * Executes the callback\n   * @param {Record<string, any>} properties Properties from the callback\n   */\n  execute(properties: Record<string, any>): void {\n    if (this.isCallBackFunction) {\n      this.callback(properties);\n    }\n  }\n\n  /**\n   * Sets properties to the decision object\n   * @param {Record<string, any>} properties Properties to set\n   */\n  set(properties: Record<string, any>): void {\n    if (this.isCallBackFunction) {\n      this.decision = properties;\n    }\n  }\n\n  /**\n   * Retrieves the decision object\n   * @returns {Record<string, any>} The decision object\n   */\n  get(): Record<string, any> {\n    return this.decision;\n  }\n}\n\nexport default HooksService;\n","/**\n * Copyright 2024 Wingify Software Pvt. Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { dynamic } from '../types/Common';\n\nimport { LogManager } from '../packages/logger';\nimport { NetworkManager, RequestModel, ResponseModel } from '../packages/network-layer';\n\nimport { Deferred } from '../utils/PromiseUtil';\n\nimport { Constants } from '../constants';\nimport { HTTPS_PROTOCOL, HTTP_PROTOCOL } from '../constants/Url';\nimport { HttpMethodEnum } from '../enums/HttpMethodEnum';\nimport { DebugLogMessagesEnum, ErrorLogMessagesEnum, InfoLogMessagesEnum } from '../enums/log-messages';\nimport { SettingsSchema } from '../models/schemas/SettingsSchemaValidation';\nimport { SettingsModel } from '../models/settings/SettingsModel';\nimport { buildMessage } from '../utils/LogMessageUtil';\nimport { getSettingsPath } from '../utils/NetworkUtil';\n\ninterface ISettingsService {\n  sdkKey: string;\n\n  getSettings(forceFetch: boolean): Promise<dynamic>;\n\n  fetchSettings(): Promise<dynamic>;\n}\n\nexport class SettingsService implements ISettingsService {\n  sdkKey: string;\n  accountId: number;\n  expiry: number;\n  networkTimeout: number;\n  hostname: string;\n  port: number;\n  protocol: string;\n  isGatewayServiceProvided: boolean = false;\n  private static instance: SettingsService;\n\n  constructor(options: Record<string, any>) {\n    this.sdkKey = options.sdkKey;\n    this.accountId = options.accountId;\n    this.expiry = options?.settings?.expiry || Constants.SETTINGS_EXPIRY;\n    this.networkTimeout = options?.settings?.timeout || Constants.SETTINGS_TIMEOUT;\n\n    if (options?.gatewayService?.url) {\n      let parsedUrl;\n      this.isGatewayServiceProvided = true;\n      if (\n        options.gatewayService.url.startsWith(HTTP_PROTOCOL) ||\n        options.gatewayService.url.startsWith(HTTPS_PROTOCOL)\n      ) {\n        parsedUrl = new URL(`${options.gatewayService.url}`);\n      } else if (options.gatewayService?.protocol) {\n        parsedUrl = new URL(`${options.gatewayService.protocol}://${options.gatewayService.url}`);\n      } else {\n        parsedUrl = new URL(`${HTTPS_PROTOCOL}${options.gatewayService.url}`);\n      }\n      this.hostname = parsedUrl.hostname;\n      this.protocol = parsedUrl.protocol.replace(':', '');\n      if (parsedUrl.port) {\n        this.port = parseInt(parsedUrl.port);\n      } else if (options.gatewayService?.port) {\n        this.port = options.gatewayService.port;\n      }\n    } else {\n      this.hostname = Constants.HOST_NAME;\n    }\n\n    // if (this.expiry > 0) {\n    //   this.setSettingsExpiry();\n    // }\n    LogManager.Instance.debug(\n      buildMessage(DebugLogMessagesEnum.SERVICE_INITIALIZED, {\n        service: 'Settings Manager',\n      }),\n    );\n    SettingsService.instance = this;\n  }\n\n  static get Instance(): SettingsService {\n    return SettingsService.instance;\n  }\n\n  private setSettingsExpiry() {\n    const settingsTimeout = setTimeout(() => {\n      this.fetchSettingsAndCacheInStorage().then(() => {\n        clearTimeout(settingsTimeout);\n        // again set the timer\n        // NOTE: setInterval could be used but it will not consider the time required to fetch settings\n        // This breaks the timer rythm and also sends more call than required\n        this.setSettingsExpiry();\n      });\n    }, this.expiry);\n  }\n\n  private fetchSettingsAndCacheInStorage() {\n    const deferredObject = new Deferred();\n    // const storageConnector = Storage.Instance.getConnector();\n\n    this.fetchSettings()\n      .then(async (res) => {\n        // LogManager.Instance.info('Settings fetched successfully');\n\n        // const method = update ? 'update' : 'set';\n\n        // storageConnector[method](Constants.SETTINGS, res).then(() => {\n        //   LogManager.Instance.info('Settings persisted in cache: memory');\n        //   deferredObject.resolve(res);\n        // });\n        deferredObject.resolve(res);\n      })\n      .catch((err) => {\n        LogManager.Instance.error(\n          buildMessage(ErrorLogMessagesEnum.SETTINGS_FETCH_ERROR, {\n            err: JSON.stringify(err),\n          }),\n        );\n\n        deferredObject.resolve(null);\n      });\n\n    return deferredObject.promise;\n  }\n\n  fetchSettings(): Promise<SettingsModel> {\n    const deferredObject = new Deferred();\n\n    if (!this.sdkKey || !this.accountId) {\n      deferredObject.reject(new Error('sdkKey is required for fetching account settings. Aborting!'));\n    }\n\n    const networkInstance = NetworkManager.Instance;\n    const options: Record<string, dynamic> = getSettingsPath(this.sdkKey, this.accountId);\n\n    options.platform = Constants.PLATFORM;\n    options['api-version'] = Constants.API_VERSION;\n\n    if (!networkInstance.getConfig().getDevelopmentMode()) {\n      options.s = 'prod';\n    }\n\n    try {\n      const request: RequestModel = new RequestModel(\n        this.hostname,\n        HttpMethodEnum.GET,\n        Constants.SETTINTS_ENDPOINT,\n        options,\n        null,\n        null,\n        this.protocol,\n        this.port,\n      );\n      request.setTimeout(this.networkTimeout);\n\n      networkInstance\n        .get(request)\n        .then((response: ResponseModel) => {\n          deferredObject.resolve(response.getData());\n        })\n        .catch((err: ResponseModel) => {\n          deferredObject.reject(err);\n        });\n\n      return deferredObject.promise;\n    } catch (err) {\n      LogManager.Instance.error(\n        buildMessage(ErrorLogMessagesEnum.SETTINGS_FETCH_ERROR, {\n          err: JSON.stringify(err),\n        }),\n      );\n\n      deferredObject.reject(err);\n      return deferredObject.promise;\n    }\n  }\n\n  getSettings(forceFetch = false): Promise<SettingsModel> {\n    const deferredObject = new Deferred();\n\n    if (forceFetch) {\n      this.fetchSettingsAndCacheInStorage().then((settings) => {\n        deferredObject.resolve(settings);\n      });\n    } else {\n      // const storageConnector = Storage.Instance.getConnector();\n\n      // if (storageConnector) {\n      //   storageConnector\n      //     .get(Constants.SETTINGS)\n      //     .then((storedSettings: dynamic) => {\n      //       if (!isObject(storedSettings)) {\n      //         this.fetchSettingsAndCacheInStorage().then((fetchedSettings) => {\n      //           const isSettingsValid = new SettingsSchema().isSettingsValid(fetchedSettings);\n      //           if (isSettingsValid) {\n      //             deferredObject.resolve(fetchedSettings);\n      //           } else {\n      //             deferredObject.reject(new Error('Settings are not valid. Failed schema validation.'));\n      //           }\n      //         });\n      //       } else {\n      //         deferredObject.resolve(storedSettings);\n      //       }\n      //     })\n      //     .catch(() => {\n      //       this.fetchSettingsAndCacheInStorage().then((fetchedSettings) => {\n      //         deferredObject.resolve(fetchedSettings);\n      //       });\n      //     });\n      // } else {\n      this.fetchSettingsAndCacheInStorage().then((fetchedSettings) => {\n        const isSettingsValid = new SettingsSchema().isSettingsValid(fetchedSettings);\n        if (isSettingsValid) {\n          LogManager.Instance.info(InfoLogMessagesEnum.SETTINGS_FETCH_SUCCESS);\n\n          deferredObject.resolve(fetchedSettings);\n        } else {\n          LogManager.Instance.error(ErrorLogMessagesEnum.SETTINGS_SCHEMA_INVALID);\n\n          deferredObject.resolve({});\n        }\n      });\n      // }\n    }\n\n    return deferredObject.promise;\n  }\n}\n","/**\n * Copyright 2024 Wingify Software Pvt. Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { StorageEnum } from '../enums/StorageEnum';\nimport { ContextModel } from '../models/user/ContextModel';\nimport { Storage } from '../packages/storage';\nimport { dynamic } from '../types/Common';\n\nimport { ErrorLogMessagesEnum } from '../enums/log-messages';\nimport { LogManager } from '../packages/logger';\nimport { isNull, isUndefined } from '../utils/DataTypeUtil';\nimport { buildMessage } from '../utils/LogMessageUtil';\nimport { Deferred } from '../utils/PromiseUtil';\n\nexport interface IStorageService {\n  getDataInStorage(featureKey: any, context: ContextModel): Promise<Record<any, any>>;\n  setDataInStorage(data: Record<any, any>): Promise<void>;\n}\nexport class StorageService implements IStorageService {\n  private storageData: Record<string, dynamic> = {};\n\n  /**\n   * Retrieves data from storage based on the feature key and user ID.\n   * @param featureKey The key to identify the feature data.\n   * @param user The user object containing at least an ID.\n   * @returns A promise that resolves to the data retrieved or an error/storage status enum.\n   */\n  async getDataInStorage(featureKey: any, context: ContextModel): Promise<Record<any, any>> {\n    const deferredObject = new Deferred();\n    const storageInstance = Storage.Instance.getConnector();\n\n    // Check if the storage instance is available\n    if (isNull(storageInstance) || isUndefined(storageInstance)) {\n      deferredObject.resolve(StorageEnum.STORAGE_UNDEFINED);\n    } else {\n      storageInstance\n        .get(featureKey, context.getId())\n        .then((data: Record<string, any>) => {\n          deferredObject.resolve(data);\n        })\n        .catch((err) => {\n          LogManager.Instance.error(\n            buildMessage(ErrorLogMessagesEnum.STORED_DATA_ERROR, {\n              err,\n            }),\n          );\n\n          deferredObject.resolve(StorageEnum.NO_DATA_FOUND);\n        });\n    }\n\n    return deferredObject.promise;\n  }\n\n  /**\n   * Stores data in the storage.\n   * @param data The data to be stored as a record.\n   * @returns A promise that resolves to true if data is successfully stored, otherwise false.\n   */\n  async setDataInStorage(data: Record<any, any>): Promise<void> {\n    const deferredObject = new Deferred();\n\n    const storageInstance = Storage.Instance.getConnector();\n    // Check if the storage instance is available\n    if (storageInstance === null || storageInstance === undefined) {\n      deferredObject.resolve(false);\n    } else {\n      storageInstance\n        .set(data)\n        .then(() => {\n          deferredObject.resolve(true);\n        })\n        .catch(() => {\n          deferredObject.resolve(false);\n        });\n    }\n\n    return deferredObject.promise;\n  }\n}\n","/**\n * Copyright 2024 Wingify Software Pvt. Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Constants } from '../constants';\nimport { CampaignTypeEnum } from '../enums/CampaignTypeEnum';\nimport { InfoLogMessagesEnum } from '../enums/log-messages';\nimport { CampaignModel } from '../models/campaign/CampaignModel';\nimport { FeatureModel } from '../models/campaign/FeatureModel';\nimport { VariationModel } from '../models/campaign/VariationModel';\nimport { SettingsModel } from '../models/settings/SettingsModel';\nimport { LogManager } from '../packages/logger';\nimport { buildMessage } from './LogMessageUtil';\n/**\n * Sets the variation allocation for a given campaign based on its type.\n * If the campaign type is ROLLOUT or PERSONALIZE, it handles the campaign using `_handleRolloutCampaign`.\n * Otherwise, it assigns range values to each variation in the campaign.\n * @param {CampaignModel} campaign - The campaign for which to set the variation allocation.\n */\nexport function setVariationAllocation(campaign: CampaignModel): void {\n  // Check if the campaign type is ROLLOUT or PERSONALIZE\n  if (campaign.getType() === CampaignTypeEnum.ROLLOUT || campaign.getType() === CampaignTypeEnum.PERSONALIZE) {\n    _handleRolloutCampaign(campaign);\n  } else {\n    let currentAllocation = 0;\n    // Iterate over each variation in the campaign\n    campaign.getVariations().forEach((variation) => {\n      // Assign range values to the variation and update the current allocation\n      const stepFactor = assignRangeValues(variation, currentAllocation);\n      currentAllocation += stepFactor;\n      // Log the range allocation for debugging\n      LogManager.Instance.info(\n        buildMessage(InfoLogMessagesEnum.VARIATION_RANGE_ALLOCATION, {\n          variationKey: variation.getKey(),\n          campaignKey: campaign.getKey(),\n          variationWeight: variation.getWeight(),\n          startRange: variation.getStartRangeVariation(),\n          endRange: variation.getEndRangeVariation(),\n        }),\n      );\n    });\n  }\n}\n\n/**\n * Assigns start and end range values to a variation based on its weight.\n * @param {VariationModel} data - The variation model to assign range values.\n * @param {number} currentAllocation - The current allocation value before this variation.\n * @returns {number} The step factor calculated from the variation's weight.\n */\nexport function assignRangeValues(data: VariationModel, currentAllocation: number) {\n  // Calculate the bucket range based on the variation's weight\n  const stepFactor: number = _getVariationBucketRange(data.getWeight());\n\n  // Set the start and end range of the variation\n  if (stepFactor) {\n    data.setStartRange(currentAllocation + 1);\n    data.setEndRange(currentAllocation + stepFactor);\n  } else {\n    data.setStartRange(-1);\n    data.setEndRange(-1);\n  }\n  return stepFactor;\n}\n\n/**\n * Scales the weights of variations to sum up to 100%.\n * @param {any[]} variations - The list of variations to scale.\n */\nexport function scaleVariationWeights(variations: any) {\n  // Calculate the total weight of all variations\n  const totalWeight = variations.reduce((acc, variation) => {\n    return acc + variation.weight;\n  }, 0);\n  // If total weight is zero, assign equal weight to each variation\n  if (!totalWeight) {\n    const equalWeight = 100 / variations.length;\n    variations.forEach((variation) => (variation.weight = equalWeight));\n  } else {\n    // Scale each variation's weight to make the total 100%\n    variations.forEach((variation) => (variation.weight = (variation.weight / totalWeight) * 100));\n  }\n}\n\n/**\n * Generates a bucketing seed based on user ID, campaign, and optional group ID.\n * @param {string} userId - The user ID.\n * @param {any} campaign - The campaign object.\n * @param {string} [groupId] - The optional group ID.\n * @returns {string} The bucketing seed.\n */\nexport function getBucketingSeed(userId: string, campaign: CampaignModel, groupId: number) {\n  // Return a seed combining group ID and user ID if group ID is provided\n  if (groupId) {\n    return `${groupId}_${userId}`;\n  }\n  // Return a seed combining campaign ID and user ID otherwise\n  return `${campaign.getId()}_${userId}`;\n}\n\n/**\n * Retrieves a variation by its ID within a specific campaign identified by its key.\n * @param {SettingsModel} settings - The settings model containing all campaigns.\n * @param {string} campaignKey - The key of the campaign.\n * @param {string} variationId - The ID of the variation to retrieve.\n * @returns {VariationModel | null} The found variation model or null if not found.\n */\nexport function getVariationFromCampaignKey(settings: SettingsModel, campaignKey: string, variationId: number) {\n  // Find the campaign by its key\n  const campaign: CampaignModel = settings.getCampaigns().find((campaign: CampaignModel) => {\n    return campaign.getKey() === campaignKey;\n  });\n\n  if (campaign) {\n    // Find the variation by its ID within the found campaign\n    const variation: VariationModel = campaign.getVariations().find((variation: VariationModel) => {\n      return variation.getId() === variationId;\n    });\n\n    if (variation) {\n      // Return a new instance of VariationModel based on the found variation\n      return new VariationModel().modelFromDictionary(variation);\n    }\n  }\n  return null;\n}\n\n/**\n * Sets the allocation ranges for a list of campaigns.\n * @param {CampaignModel[]} campaigns - The list of campaigns to set allocations for.\n */\nexport function setCampaignAllocation(campaigns: any[]) {\n  let stepFactor = 0;\n  for (let i = 0, currentAllocation = 0; i < campaigns.length; i++) {\n    const campaign = campaigns[i];\n\n    // Assign range values to each campaign and update the current allocation\n    stepFactor = assignRangeValuesMEG(campaign, currentAllocation);\n    currentAllocation += stepFactor;\n  }\n}\n\n/**\n * Determines if a campaign is part of a group.\n * @param {SettingsModel} settings - The settings model containing group associations.\n * @param {string} campaignId - The ID of the campaign to check.\n * @returns {Object} An object containing the group ID and name if the campaign is part of a group, otherwise an empty object.\n */\nexport function getGroupDetailsIfCampaignPartOfIt(settings: SettingsModel, campaignId: any) {\n  // Check if the campaign is associated with a group and return the group details\n  if (campaignId in settings.getCampaignGroups() && settings.getCampaignGroups()) {\n    return {\n      groupId: settings.getCampaignGroups()[campaignId],\n      groupName: settings.getGroups()[settings.getCampaignGroups()[campaignId]].name,\n    };\n  }\n  return {};\n}\n\n/**\n * Finds all groups associated with a feature specified by its key.\n * @param {SettingsModel} settings - The settings model containing all features and groups.\n * @param {string} featureKey - The key of the feature to find groups for.\n * @returns {Array} An array of groups associated with the feature.\n */\nexport function findGroupsFeaturePartOf(settings: SettingsModel, featureKey: string) {\n  const campaignIds: Array<number> = [];\n  // Loop over all rules inside the feature where the feature key matches and collect all campaign IDs\n  settings.getFeatures().forEach((feature) => {\n    if (feature.getKey() === featureKey) {\n      feature.getRules().forEach((rule) => {\n        if (campaignIds.indexOf(rule.getCampaignId()) === -1) {\n          campaignIds.push(rule.getCampaignId());\n        }\n      });\n    }\n  });\n\n  // Loop over all campaigns and find the group for each campaign\n  const groups: Array<any> = [];\n  campaignIds.forEach((campaignId) => {\n    const group = getGroupDetailsIfCampaignPartOfIt(settings, campaignId);\n    if (group.groupId) {\n      // Check if the group is already added to the groups array to avoid duplicates\n      const groupIndex = groups.findIndex((grp) => grp.groupId === group.groupId);\n      if (groupIndex === -1) {\n        groups.push(group);\n      }\n    }\n  });\n  return groups;\n}\n\n/**\n * Retrieves campaigns by a specific group ID.\n * @param {SettingsModel} settings - The settings model containing all groups.\n * @param {any} groupId - The ID of the group.\n * @returns {Array} An array of campaigns associated with the specified group ID.\n */\nexport function getCampaignsByGroupId(settings: SettingsModel, groupId: number) {\n  const group = settings.getGroups()[groupId];\n  if (group) {\n    return group.campaigns; // Return the campaigns associated with the group\n  } else {\n    return []; // Return an empty array if the group ID is not found\n  }\n}\n\n/**\n * Retrieves feature keys from a list of campaign IDs.\n * @param {SettingsModel} settings - The settings model containing all features.\n * @param {any} campaignIds - An array of campaign IDs.\n * @returns {Array} An array of feature keys associated with the provided campaign IDs.\n */\nexport function getFeatureKeysFromCampaignIds(settings: SettingsModel, campaignIds: any) {\n  const featureKeys = [];\n  for (const campaignId of campaignIds) {\n    settings.getFeatures().forEach((feature) => {\n      feature.getRules().forEach((rule) => {\n        if (rule.getCampaignId() === campaignId) {\n          featureKeys.push(feature.getKey()); // Add feature key if campaign ID matches\n        }\n      });\n    });\n  }\n  return featureKeys;\n}\n\n/**\n * Retrieves campaign IDs from a specific feature key.\n * @param {SettingsModel} settings - The settings model containing all features.\n * @param {string} featureKey - The key of the feature.\n * @returns {Array} An array of campaign IDs associated with the specified feature key.\n */\nexport function getCampaignIdsFromFeatureKey(settings: SettingsModel, featureKey: string) {\n  const campaignIds = [];\n  settings.getFeatures().forEach((feature) => {\n    if (feature.getKey() === featureKey) {\n      feature.getRules().forEach((rule) => {\n        campaignIds.push(rule.getCampaignId()); // Add campaign ID if feature key matches\n      });\n    }\n  });\n  return campaignIds;\n}\n\n/**\n * Assigns range values to a campaign based on its weight.\n * @param {any} data - The campaign data containing weight.\n * @param {number} currentAllocation - The current allocation value before this campaign.\n * @returns {number} The step factor calculated from the campaign's weight.\n */\nexport function assignRangeValuesMEG(data: any, currentAllocation: number) {\n  const stepFactor: number = _getVariationBucketRange(data.weight);\n\n  if (stepFactor) {\n    data.startRangeVariation = currentAllocation + 1; // Set the start range\n    data.endRangeVariation = currentAllocation + stepFactor; // Set the end range\n  } else {\n    data.startRangeVariation = -1; // Set invalid range if step factor is zero\n    data.endRangeVariation = -1;\n  }\n  return stepFactor;\n}\n\n/**\n * Retrieves the rule type using a campaign ID from a specific feature.\n * @param {any} feature - The feature containing rules.\n * @param {number} campaignId - The campaign ID to find the rule type for.\n * @returns {string} The rule type if found, otherwise an empty string.\n */\nexport function getRuleTypeUsingCampaignIdFromFeature(feature: FeatureModel, campaignId: number) {\n  const rule = feature.getRules().find((rule) => rule.getCampaignId() === campaignId);\n  return rule ? rule.getType() : ''; // Return the rule type if found\n}\n\n/**\n * Calculates the bucket range for a variation based on its weight.\n * @param {number} variationWeight - The weight of the variation.\n * @returns {number} The calculated bucket range.\n */\nfunction _getVariationBucketRange(variationWeight: number) {\n  if (!variationWeight || variationWeight === 0) {\n    return 0; // Return zero if weight is invalid or zero\n  }\n\n  const startRange = Math.ceil(variationWeight * 100);\n\n  return Math.min(startRange, Constants.MAX_TRAFFIC_VALUE); // Ensure the range does not exceed the max traffic value\n}\n\n/**\n * Handles the rollout campaign by setting start and end ranges for all variations.\n * @param {CampaignModel} campaign - The campaign to handle.\n */\nfunction _handleRolloutCampaign(campaign: CampaignModel): void {\n  // Set start and end ranges for all variations in the campaign\n  for (let i = 0; i < campaign.getVariations().length; i++) {\n    const variation = campaign.getVariations()[i];\n    const endRange = campaign.getVariations()[i].getWeight() * 100;\n\n    variation.setStartRange(1);\n    variation.setEndRange(endRange);\n\n    LogManager.Instance.info(\n      buildMessage(InfoLogMessagesEnum.VARIATION_RANGE_ALLOCATION, {\n        variationKey: variation.getKey(),\n        campaignKey: campaign.getKey(),\n        variationWeight: variation.getWeight(),\n        startRange: 1,\n        endRange,\n      }),\n    );\n  }\n}\n","/**\n * Copyright 2024 Wingify Software Pvt. Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { dynamic } from '../types/Common';\n\ntype FunctionType = (val: dynamic) => void;\n\n/**\n * Checks if a value is an object excluding arrays, functions, regexes, promises, and dates.\n * @param val The value to check.\n * @returns True if the value is an object, false otherwise.\n */\nexport function isObject<T>(\n  val: T,\n): val is Record<any, dynamic> & Exclude<T, Array<dynamic> | FunctionType | RegExp | Promise<dynamic> | Date> {\n  // Using Object.prototype.toString to get a precise string representation of the value type\n  return Object.prototype.toString.call(val) === '[object Object]';\n}\n\n/**\n * Checks if a value is an array.\n * @param val The value to check.\n * @returns True if the value is an array, false otherwise.\n */\nexport function isArray(val: dynamic): val is Array<dynamic> {\n  return Object.prototype.toString.call(val) === '[object Array]';\n}\n\n/**\n * Checks if a value is null.\n * @param val The value to check.\n * @returns True if the value is null, false otherwise.\n */\nexport function isNull(val: dynamic): val is null {\n  return Object.prototype.toString.call(val) === '[object Null]';\n}\n\n/**\n * Checks if a value is undefined.\n * @param val The value to check.\n * @returns True if the value is undefined, false otherwise.\n */\nexport function isUndefined(val: dynamic): val is undefined {\n  return Object.prototype.toString.call(val) === '[object Undefined]';\n}\n\n/**\n * Checks if a value is defined, i.e., not undefined and not null.\n * @param val The value to check.\n * @returns True if the value is defined, false otherwise.\n */\nexport function isDefined<T>(val: T): val is NonNullable<T> {\n  return !isUndefined(val) && !isNull(val);\n}\n\n/**\n * Checks if a value is a number, including NaN.\n * @param val The value to check.\n * @returns True if the value is a number, false otherwise.\n */\nexport function isNumber(val: dynamic): val is number {\n  // Note: NaN is also a number\n  return Object.prototype.toString.call(val) === '[object Number]';\n}\n\n/**\n * Checks if a value is a string.\n * @param val The value to check.\n * @returns True if the value is a string, false otherwise.\n */\nexport function isString(val: dynamic): val is string {\n  return Object.prototype.toString.call(val) === '[object String]';\n}\n\n/**\n * Checks if a value is a boolean.\n * @param val The value to check.\n * @returns True if the value is a boolean, false otherwise.\n */\nexport function isBoolean(val: dynamic): val is boolean {\n  return Object.prototype.toString.call(val) === '[object Boolean]';\n}\n\n/**\n * Checks if a value is NaN.\n * @param val The value to check.\n * @returns True if the value is NaN, false otherwise.\n */\nexport function isNaN(val: dynamic): val is number {\n  // NaN is the only JavaScript value that is treated as unequal to itself\n  return val !== val;\n}\n\n/**\n * Checks if a value is a Date object.\n * @param val The value to check.\n * @returns True if the value is a Date object, false otherwise.\n */\nexport function isDate(val: dynamic): val is Date {\n  return Object.prototype.toString.call(val) === '[object Date]';\n}\n\n/**\n * Checks if a value is a function.\n * @param val The value to check.\n * @returns True if the value is a function, false otherwise.\n */\nexport function isFunction(val: dynamic): val is FunctionType {\n  return Object.prototype.toString.call(val) === '[object Function]';\n}\n\n/**\n * Checks if a value is a regular expression.\n * @param val The value to check.\n * @returns True if the value is a regular expression, false otherwise.\n */\nexport function isRegex(val: dynamic): val is RegExp {\n  return Object.prototype.toString.call(val) === '[object RegExp]';\n}\n\n/**\n * Checks if a value is a Promise.\n * @param val The value to check.\n * @returns True if the value is a Promise, false otherwise.\n */\nexport function isPromise(val: dynamic): val is Promise<dynamic> {\n  return Object.prototype.toString.call(val) === '[object Promise]';\n}\n\n/**\n * Determines the type of the given value using various type-checking utility functions.\n * @param val The value to determine the type of.\n * @returns A string representing the type of the value.\n */\nexport function getType(val: dynamic): string {\n  // Check if the value is an Object (excluding arrays, functions, etc.)\n  return isObject(val)\n    ? 'Object'\n    : // Check if the value is an Array\n      isArray(val)\n      ? 'Array'\n      : // Check if the value is null\n        isNull(val)\n        ? 'Null'\n        : // Check if the value is undefined\n          isUndefined(val)\n          ? 'Undefined'\n          : // Check if the value is NaN (Not a Number)\n            isNaN(val)\n            ? 'NaN'\n            : // Check if the value is a Number (including NaN)\n              isNumber(val)\n              ? 'Number'\n              : // Check if the value is a String\n                isString(val)\n                ? 'String'\n                : // Check if the value is a Boolean\n                  isBoolean(val)\n                  ? 'Boolean'\n                  : // Check if the value is a Date object\n                    isDate(val)\n                    ? 'Date'\n                    : // Check if the value is a Regular Expression\n                      isRegex(val)\n                      ? 'Regex'\n                      : // Check if the value is a Function\n                        isFunction(val)\n                        ? 'Function'\n                        : // Check if the value is a Promise\n                          isPromise(val)\n                          ? 'Promise'\n                          : // If none of the above, return 'Unknown Type'\n                            'Unknown Type';\n}\n","/**\n * Copyright 2024 Wingify Software Pvt. Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { isPromise } from '../utils/DataTypeUtil';\nimport { CampaignTypeEnum } from '../enums/CampaignTypeEnum';\nimport { StatusEnum } from '../enums/StatusEnum';\nimport { InfoLogMessagesEnum } from '../enums/log-messages';\nimport { CampaignModel } from '../models/campaign/CampaignModel';\nimport { FeatureModel } from '../models/campaign/FeatureModel';\nimport { VariationModel } from '../models/campaign/VariationModel';\nimport { SettingsModel } from '../models/settings/SettingsModel';\nimport { ContextModel } from '../models/user/ContextModel';\nimport { DecisionMaker } from '../packages/decision-maker';\nimport { LogManager } from '../packages/logger';\nimport { SegmentationManager } from '../packages/segmentation-evaluator';\nimport { CampaignDecisionService } from '../services/CampaignDecisionService';\nimport { IStorageService } from '../services/StorageService';\nimport { isObject } from '../utils/DataTypeUtil';\nimport {\n  assignRangeValues,\n  getBucketingSeed,\n  getGroupDetailsIfCampaignPartOfIt,\n  scaleVariationWeights,\n} from './CampaignUtil';\nimport { cloneObject } from './FunctionUtil';\nimport { buildMessage } from './LogMessageUtil';\nimport { evaluateGroups } from './MegUtil';\nimport { getUUID } from './UuidUtil';\n\nexport const checkWhitelistingAndPreSeg = async (\n  settings: SettingsModel,\n  feature: FeatureModel,\n  campaign: CampaignModel,\n  context: ContextModel,\n  evaluatedFeatureMap: Map<string, any>,\n  megGroupWinnerCampaigns: Map<number, number>,\n  storageService: IStorageService,\n  decision: any,\n): Promise<[boolean, any]> => {\n  const vwoUserId = getUUID(context.getId(), settings.getAccountId());\n  const campaignId = campaign.getId();\n\n  if (campaign.getType() === CampaignTypeEnum.AB) {\n    // set _vwoUserId for variation targeting variables\n    context.setVariationTargetingVariables(\n      Object.assign({}, context.getVariationTargetingVariables(), {\n        _vwoUserId: campaign.getIsUserListEnabled() ? vwoUserId : context.getId(),\n      }),\n    );\n\n    Object.assign(decision, { variationTargetingVariables: context.getVariationTargetingVariables() }); // for integration\n\n    // check if the campaign satisfies the whitelisting\n    if (campaign.getIsForcedVariationEnabled()) {\n      const whitelistedVariation = await _checkCampaignWhitelisting(campaign, context);\n      if (whitelistedVariation && Object.keys(whitelistedVariation).length > 0) {\n        return [true, whitelistedVariation];\n      }\n    } else {\n      LogManager.Instance.info(\n        buildMessage(InfoLogMessagesEnum.WHITELISTING_SKIP, {\n          campaignKey: campaign.getRuleKey(),\n          userId: context.getId(),\n        }),\n      );\n    }\n  }\n  // userlist segment is also available for campaign pre segmentation\n  context.setCustomVariables(\n    Object.assign({}, context.getCustomVariables(), {\n      _vwoUserId: campaign.getIsUserListEnabled() ? vwoUserId : context.getId(),\n    }),\n  );\n\n  Object.assign(decision, { customVariables: context.getCustomVariables() }); // for integeration\n\n  // Check if RUle being evaluated is part of Mutually Exclusive Group\n  const { groupId } = getGroupDetailsIfCampaignPartOfIt(settings, campaignId);\n  // Check if group is already evaluated and we have eligible winner campaigns\n  const groupWinnerCampaignId = megGroupWinnerCampaigns?.get(groupId);\n  if (groupWinnerCampaignId) {\n    // check if the campaign is the winner of the group\n    if (groupWinnerCampaignId === campaignId) {\n      return [true, null];\n    }\n    // as group is already evaluated, no need to check again, return false directly\n    return [false, null];\n  }\n\n  // If Whitelisting is skipped/failed and campaign not part of any MEG Groups\n  // Check campaign's pre-segmentation\n  const isPreSegmentationPassed = await new CampaignDecisionService().getPreSegmentationDecision(campaign, context);\n\n  if (isPreSegmentationPassed && groupId) {\n    const winnerCampaign = await evaluateGroups(\n      settings,\n      feature,\n      groupId,\n      evaluatedFeatureMap,\n      context,\n      storageService,\n    );\n\n    if (winnerCampaign && winnerCampaign.id === campaignId) {\n      return [true, null];\n    }\n    megGroupWinnerCampaigns.set(groupId, winnerCampaign?.id || 0);\n    return [false, null];\n  }\n\n  return [isPreSegmentationPassed, null];\n};\n\nexport const evaluateTrafficAndGetVariation = (\n  settings: SettingsModel,\n  campaign: CampaignModel,\n  userId: string | number,\n): VariationModel => {\n  const variation = new CampaignDecisionService().getVariationAlloted(userId, settings.getAccountId(), campaign);\n  if (!variation) {\n    LogManager.Instance.info(\n      buildMessage(InfoLogMessagesEnum.USER_CAMPAIGN_BUCKET_INFO, {\n        campaignKey: campaign.getKey(),\n        userId,\n        status: 'did not get any variation',\n      }),\n    );\n\n    return null;\n  }\n  LogManager.Instance.info(\n    buildMessage(InfoLogMessagesEnum.USER_CAMPAIGN_BUCKET_INFO, {\n      campaignKey: campaign.getKey(),\n      userId,\n      status: `got variation:${variation.getKey()}`,\n    }),\n  );\n\n  return variation;\n};\n\n/******************\n * PRIVATE METHODS\n ******************/\n\n/**\n * Check for whitelisting\n * @param campaign      Campaign object\n * @param userId        User ID\n * @param variationTargetingVariables   Variation targeting variables\n * @returns\n */\nconst _checkCampaignWhitelisting = async (campaign: CampaignModel, context: ContextModel): Promise<any> => {\n  // check if the campaign satisfies the whitelisting\n  const whitelistingResult = await _evaluateWhitelisting(campaign, context);\n  const status = whitelistingResult ? StatusEnum.PASSED : StatusEnum.FAILED;\n  const variationString = whitelistingResult ? whitelistingResult.variation.key : '';\n\n  LogManager.Instance.info(\n    buildMessage(InfoLogMessagesEnum.WHITELISTING_STATUS, {\n      userId: context.getId(),\n      campaignKey: campaign.getRuleKey(),\n      status,\n      variationString,\n    }),\n  );\n\n  return whitelistingResult;\n};\n\nconst _evaluateWhitelisting = async (campaign: CampaignModel, context: ContextModel): Promise<any> => {\n  const targetedVariations = [];\n  const promises: Promise<any>[] = [];\n\n  let whitelistedVariation;\n\n  campaign.getVariations().forEach((variation) => {\n    if (isObject(variation.getSegments()) && !Object.keys(variation.getSegments()).length) {\n      LogManager.Instance.info(\n        buildMessage(InfoLogMessagesEnum.WHITELISTING_SKIP, {\n          campaignKey: campaign.getRuleKey(),\n          userId: context.getId(),\n          variation: variation.getKey() ? `for variation: ${variation.getKey()}` : '',\n        }),\n      );\n\n      return;\n    }\n    // check for segmentation and evaluate\n    if (isObject(variation.getSegments())) {\n      let SegmentEvaluatorResult = SegmentationManager.Instance.validateSegmentation(\n        variation.getSegments(),\n        context.getVariationTargetingVariables(),\n      );\n      SegmentEvaluatorResult = isPromise(SegmentEvaluatorResult)\n        ? SegmentEvaluatorResult\n        : Promise.resolve(SegmentEvaluatorResult);\n      SegmentEvaluatorResult.then((evaluationResult) => {\n        if (evaluationResult) {\n          targetedVariations.push(cloneObject(variation));\n        }\n      });\n\n      promises.push(SegmentEvaluatorResult);\n    }\n  });\n\n  // Wait for all promises to resolve\n  await Promise.all(promises);\n\n  if (targetedVariations.length > 1) {\n    scaleVariationWeights(targetedVariations);\n    for (let i = 0, currentAllocation = 0, stepFactor = 0; i < targetedVariations.length; i++) {\n      stepFactor = assignRangeValues(targetedVariations[i], currentAllocation);\n      currentAllocation += stepFactor;\n    }\n    whitelistedVariation = new CampaignDecisionService().getVariation(\n      targetedVariations,\n      new DecisionMaker().calculateBucketValue(getBucketingSeed(context.getId(), campaign, null)),\n    );\n  } else {\n    whitelistedVariation = targetedVariations[0];\n  }\n\n  if (whitelistedVariation) {\n    return {\n      variation: whitelistedVariation,\n      variationName: whitelistedVariation.name,\n      variationId: whitelistedVariation.id,\n    };\n  }\n};\n","/**\n * Copyright 2024 Wingify Software Pvt. Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { CampaignTypeEnum } from '../enums/CampaignTypeEnum';\nimport { CampaignModel } from '../models/campaign/CampaignModel';\nimport { FeatureModel } from '../models/campaign/FeatureModel';\nimport { SettingsModel } from '../models/settings/SettingsModel';\nimport { dynamic } from '../types/Common';\nimport { isString } from './DataTypeUtil';\n\n/**\n * Clones an object deeply.\n * @param {dynamic} obj - The object to clone.\n * @returns {any} The cloned object.\n */\nexport function cloneObject(obj: dynamic): any {\n  if (!obj) {\n    // Return the original object if it is null or undefined\n    return obj;\n  }\n  // Use JSON stringify and parse method to perform a deep clone\n  const clonedObj = JSON.parse(JSON.stringify(obj));\n  return clonedObj;\n}\n\n/**\n * Gets the current Unix timestamp in seconds.\n * @returns {number} The current Unix timestamp.\n */\nexport function getCurrentUnixTimestamp(): number {\n  // Convert the current date to Unix timestamp in seconds\n  return Math.ceil(+new Date() / 1000);\n}\n\n/**\n * Gets the current Unix timestamp in milliseconds.\n * @returns {number} The current Unix timestamp in milliseconds.\n */\nexport function getCurrentUnixTimestampInMillis(): number {\n  // Convert the current date to Unix timestamp in milliseconds\n  return +new Date();\n}\n\n/**\n * Generates a random number between 0 and 1.\n * @returns {number} A random number.\n */\nexport function getRandomNumber(): number {\n  // Use Math.random to generate a random number\n  return Math.random();\n}\n\n/**\n * Retrieves specific rules based on the type from a feature.\n * @param {FeatureModel} feature - The key of the feature.\n * @param {CampaignTypeEnum | null} type - The type of the rules to retrieve.\n * @returns {Array} An array of rules that match the type.\n */\nexport function getSpecificRulesBasedOnType(feature: FeatureModel, type: CampaignTypeEnum = null) {\n  // Return an empty array if no linked campaigns are found\n  if (feature && !feature?.getRulesLinkedCampaign()) {\n    return [];\n  }\n  // Filter the rules by type if a type is specified and is a string\n  if (feature && feature.getRulesLinkedCampaign() && type && isString(type)) {\n    return feature.getRulesLinkedCampaign().filter((rule) => {\n      const ruleModel = new CampaignModel().modelFromDictionary(rule);\n      return ruleModel.getType() === type;\n    });\n  }\n  // Return all linked campaigns if no type is specified\n  return feature.getRulesLinkedCampaign();\n}\n\n/**\n * Retrieves all AB and Personalize rules from a feature.\n * @param {any} settings - The settings containing features.\n * @param {string} featureKey - The key of the feature.\n * @returns {Array} An array of AB and Personalize rules.\n */\nexport function getAllExperimentRules(feature: FeatureModel) {\n  // Retrieve the feature by its key\n  // Filter the rules to include only AB and Personalize types\n  return (\n    feature\n      ?.getRulesLinkedCampaign()\n      .filter((rule) => rule.getType() === CampaignTypeEnum.AB || rule.getType() === CampaignTypeEnum.PERSONALIZE) || []\n  );\n}\n\n/**\n * Retrieves a feature by its key from the settings.\n * @param {any} settings - The settings containing features.\n * @param {string} featureKey - The key of the feature to find.\n * @returns {any} The feature if found, otherwise undefined.\n */\nexport function getFeatureFromKey(settings: SettingsModel, featureKey: string) {\n  // Find the feature by its key\n  return settings?.getFeatures()?.find((feature) => feature.getKey() === featureKey);\n}\n\n/**\n * Checks if an event exists within any feature's metrics.\n * @param {string} eventName - The name of the event to check.\n * @param {any} settings - The settings containing features.\n * @returns {boolean} True if the event exists, otherwise false.\n */\nexport function doesEventBelongToAnyFeature(eventName: string, settings: SettingsModel): boolean {\n  // Use the `some` method to check if any feature contains the event in its metrics\n  return settings\n    .getFeatures()\n    .some((feature) => feature.getMetrics().some((metric) => metric.getIdentifier() === eventName));\n}\n\n/**\n * Adds linked campaigns to each feature in the settings based on rules.\n * @param {any} settings - The settings file to modify.\n */\nexport function addLinkedCampaignsToSettings(settings: SettingsModel): void {\n  // Create maps for quick access to campaigns and variations\n  const campaignMap = new Map<number, CampaignModel>(\n    settings.getCampaigns().map((campaign) => [campaign.getId(), campaign]),\n  );\n\n  // Loop over all features\n  for (const feature of settings.getFeatures()) {\n    const rulesLinkedCampaign = feature\n      .getRules()\n      .map((rule) => {\n        const campaign: CampaignModel = campaignMap.get(rule.getCampaignId());\n        if (!campaign) return null;\n\n        // Create a linked campaign object with the rule and campaign\n        const linkedCampaign: any = { key: campaign.getKey(), ...campaign, ruleKey: rule.getRuleKey() };\n        // If a variationId is specified, find and add the variation\n        if (rule.getVariationId()) {\n          const variation = campaign.getVariations().find((v) => v.getId() === rule.getVariationId());\n          if (variation) {\n            linkedCampaign.variations = [variation];\n          }\n        }\n\n        return linkedCampaign;\n      })\n      .filter((campaign) => campaign !== null); // Filter out any null entries\n\n    const rulesLinkedCampaignModel = rulesLinkedCampaign.map((campaign) => {\n      const campaignModel = new CampaignModel();\n      campaignModel.modelFromDictionary(campaign);\n      return campaignModel;\n    });\n    // Assign the linked campaigns to the feature\n    feature.setRulesLinkedCampaign(rulesLinkedCampaignModel);\n  }\n}\n","/**\n * Copyright 2024 Wingify Software Pvt. Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { CampaignTypeEnum } from '../enums/CampaignTypeEnum';\nimport { HttpMethodEnum } from '../enums/HttpMethodEnum';\nimport { ErrorLogMessagesEnum } from '../enums/log-messages';\nimport { SettingsModel } from '../models/settings/SettingsModel';\nimport { LogManager } from '../packages/logger';\nimport { NetworkManager, RequestModel, ResponseModel } from '../packages/network-layer';\nimport { SettingsService } from '../services/SettingsService';\nimport { Deferred } from './PromiseUtil';\nimport { UrlUtil } from './UrlUtil';\n\n/**\n * Asynchronously retrieves data from a web service using the specified query parameters and endpoint.\n * @param queryParams - The parameters to be used in the query string of the request.\n * @param endpoint - The endpoint URL to which the request is sent.\n * @returns A promise that resolves to the response data or false if an error occurs.\n */\nexport async function getFromGatewayService(queryParams: any, endpoint: any): Promise<any> {\n  // Create a new deferred object to manage promise resolution\n  const deferredObject = new Deferred();\n  // Singleton instance of the network manager\n  const networkInstance = NetworkManager.Instance;\n\n  // Check if the base URL is not set correctly\n  if (!SettingsService.Instance.isGatewayServiceProvided) {\n    // Log an informational message about the invalid URL\n    LogManager.Instance.error(ErrorLogMessagesEnum.GATEWAY_URL_ERROR);\n    // Resolve the promise with false indicating an error or invalid state\n    deferredObject.resolve(false);\n    return deferredObject.promise;\n  }\n\n  try {\n    // Create a new request model instance with the provided parameters\n    const request: RequestModel = new RequestModel(\n      UrlUtil.getBaseUrl(),\n      HttpMethodEnum.GET,\n      endpoint,\n      queryParams,\n      null,\n      null,\n      SettingsService.Instance.protocol,\n      SettingsService.Instance.port,\n    );\n\n    // Perform the network GET request\n    networkInstance\n      .get(request)\n      .then((response: ResponseModel) => {\n        // Resolve the deferred object with the data from the response\n        deferredObject.resolve(response.getData());\n      })\n      .catch((err: ResponseModel) => {\n        // Reject the deferred object with the error response\n        deferredObject.reject(err);\n      });\n\n    return deferredObject.promise;\n  } catch (err) {\n    // Resolve the promise with false as fallback\n    deferredObject.resolve(false);\n    return deferredObject.promise;\n  }\n}\n\n/**\n * Encodes the query parameters to ensure they are URL-safe.\n * @param queryParams  The query parameters to be encoded.\n * @returns  An object containing the encoded query parameters.\n */\nexport function getQueryParams(queryParams: Record<string, string | number>): Record<string, string> {\n  const encodedParams: Record<string, string> = {};\n\n  for (const [key, value] of Object.entries(queryParams)) {\n    // Encode the parameter value to ensure it is URL-safe\n    const encodedValue = encodeURIComponent(String(value));\n    // Add the encoded parameter to the result object\n    encodedParams[key] = encodedValue;\n  }\n\n  return encodedParams;\n}\n\n/**\n * Adds isGatewayServiceRequired flag to each feature in the settings based on pre segmentation.\n * @param {any} settings - The settings file to modify.\n */\nexport function addIsGatewayServiceRequiredFlag(settings: SettingsModel): void {\n  // \\b(?<!\\\"custom_variable\\\"[^\\}]*)(country|region|city|os|device_type|browser_string|ua)\\b: This part matches the usual patterns (like country, region, etc.) that are not under custom_variable\n  // |(?<=\"custom_variable\"\\s*:\\s*{\\s*\"[^)]*\"\\s*:\\s*\")inlist\\([^)]*\\)(?=\"): This part matches inlist(*) only when it appears under \"custom_variable\" : { \".*\" : \"\n  const pattern =\n    /\\b(?<!\"custom_variable\"[^}]*)(country|region|city|os|device_type|browser_string|ua)\\b|(?<=\"custom_variable\"\\s*:\\s*{\\s*\"name\"\\s*:\\s*\")inlist\\([^)]*\\)(?=\")/g;\n\n  for (const feature of settings.getFeatures()) {\n    const rules = feature.getRulesLinkedCampaign();\n    for (const rule of rules) {\n      let segments = {};\n      if (rule.getType() === CampaignTypeEnum.PERSONALIZE || rule.getType() === CampaignTypeEnum.ROLLOUT) {\n        segments = rule.getVariations()[0].getSegments();\n      } else {\n        segments = rule.getSegments();\n      }\n      if (segments) {\n        const jsonSegments = JSON.stringify(segments);\n        const matches = jsonSegments.match(pattern);\n        if (matches && matches.length > 0) {\n          feature.setIsGatewayServiceRequired(true);\n          break;\n        }\n      }\n    }\n  }\n}\n","/**\n * Copyright 2024 Wingify Software Pvt. Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SettingsModel } from '../models/settings/SettingsModel';\nimport { getEventsBaseProperties, getTrackUserPayloadData, sendPostApiRequest } from './NetworkUtil';\nimport { ContextModel } from '../models/user/ContextModel';\nimport { EventEnum } from '../enums/EventEnum';\n\n/**\n * Creates and sends an impression for a variation shown event.\n * This function constructs the necessary properties and payload for the event\n * and uses the NetworkUtil to send a POST API request.\n *\n * @param {SettingsModel} settings - The settings model containing configuration.\n * @param {number} campaignId - The ID of the campaign.\n * @param {number} variationId - The ID of the variation shown to the user.\n * @param {ContextModel} context - The user context model containing user-specific data.\n */\nexport const createAndSendImpressionForVariationShown = (\n  settings: SettingsModel,\n  campaignId: number,\n  variationId: number,\n  context: ContextModel,\n) => {\n  // Get base properties for the event\n  const properties = getEventsBaseProperties(\n    settings,\n    EventEnum.VWO_VARIATION_SHOWN,\n    encodeURIComponent(context.getUserAgent()), // Encode user agent to ensure URL safety\n    context.getIpAddress(),\n  );\n\n  // Construct payload data for tracking the user\n  const payload = getTrackUserPayloadData(\n    settings,\n    context.getId(),\n    EventEnum.VWO_VARIATION_SHOWN,\n    campaignId,\n    variationId,\n    context.getUserAgent(),\n    context.getIpAddress(),\n  );\n\n  // Send the constructed properties and payload as a POST request\n  sendPostApiRequest(properties, payload);\n};\n","/**\n * Copyright 2024 Wingify Software Pvt. Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { isFunction } from '../utils/DataTypeUtil';\n\nconst nargs = /\\{([0-9a-zA-Z_]+)\\}/g;\n\n/**\n * Constructs a message by replacing placeholders in a template with corresponding values from a data object.\n *\n * @param {string} template - The message template containing placeholders in the format `{key}`.\n * @param {Record<string, any>} data - An object containing keys and values used to replace the placeholders in the template.\n * @returns {string} The constructed message with all placeholders replaced by their corresponding values from the data object.\n */\nexport function buildMessage(template: string, data: Record<string, any> = {}): string {\n  try {\n    return template.replace(nargs, (match, key, index) => {\n      // Check for escaped placeholders\n      if (template[index - 1] === '{' && template[index + match.length] === '}') {\n        return key;\n      }\n\n      // Retrieve the value from the data object\n      const value = data[key];\n\n      // If the key does not exist or the value is null/undefined, return an empty string\n      if (value === undefined || value === null) {\n        return '';\n      }\n\n      // If the value is a function, evaluate it\n      return isFunction(value) ? value() : value;\n    });\n  } catch (err) {\n    return template; // Return the original template in case of an error\n  }\n}\n","/**\n * Copyright 2024 Wingify Software Pvt. Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Constants } from '../constants';\nimport { StorageDecorator } from '../decorators/StorageDecorator';\nimport { CampaignTypeEnum } from '../enums/CampaignTypeEnum';\nimport { InfoLogMessagesEnum } from '../enums/log-messages';\nimport { CampaignModel } from '../models/campaign/CampaignModel';\nimport { FeatureModel } from '../models/campaign/FeatureModel';\nimport { VariationModel } from '../models/campaign/VariationModel';\nimport { SettingsModel } from '../models/settings/SettingsModel';\nimport { ContextModel } from '../models/user/ContextModel';\nimport { DecisionMaker } from '../packages/decision-maker';\nimport { LogManager } from '../packages/logger';\nimport { CampaignDecisionService } from '../services/CampaignDecisionService';\nimport { IStorageService } from '../services/StorageService';\nimport { evaluateRule } from '../utils/RuleEvaluationUtil';\nimport {\n  getBucketingSeed,\n  getCampaignIdsFromFeatureKey,\n  getCampaignsByGroupId,\n  getFeatureKeysFromCampaignIds,\n  getVariationFromCampaignKey,\n  setCampaignAllocation,\n} from './CampaignUtil';\nimport { isObject, isUndefined } from './DataTypeUtil';\nimport { evaluateTrafficAndGetVariation } from './DecisionUtil';\nimport { cloneObject, getFeatureFromKey, getSpecificRulesBasedOnType } from './FunctionUtil';\nimport { buildMessage } from './LogMessageUtil';\n\n/**\n * Evaluates groups for a given feature and group ID.\n *\n * @param settings - The settings model.\n * @param feature - The feature model to evaluate.\n * @param groupId - The ID of the group.\n * @param evaluatedFeatureMap - A map containing evaluated features.\n * @param context - The context model.\n * @param storageService - The storage service.\n * @returns A promise that resolves to the evaluation result.\n */\nexport const evaluateGroups = async (\n  settings: SettingsModel,\n  feature: FeatureModel,\n  groupId: number,\n  evaluatedFeatureMap: Map<string, any>,\n  context: ContextModel,\n  storageService: IStorageService,\n): Promise<any> => {\n  const featureToSkip = [];\n  const campaignMap: Map<string, any[]> = new Map();\n  // get all feature keys and all campaignIds from the groupId\n  const { featureKeys, groupCampaignIds } = getFeatureKeysFromGroup(settings, groupId);\n  for (const featureKey of featureKeys) {\n    const feature = getFeatureFromKey(settings, featureKey);\n    // get all campaignIds from the featureKey\n    const featureCampaignIds = getCampaignIdsFromFeatureKey(settings, featureKey);\n    // check if the feature is already evaluated\n    if (featureToSkip.includes(featureKey)) {\n      continue;\n    }\n    // evaluate the feature rollout rules\n    const isRolloutRulePassed = await _isRolloutRuleForFeaturePassed(\n      settings,\n      feature,\n      evaluatedFeatureMap,\n      featureToSkip,\n      storageService,\n      context,\n    );\n    if (isRolloutRulePassed) {\n      settings.getCampaigns().forEach((campaign) => {\n        // groupCampaignIds.includes(campaign.getId()) -> campaign we are adding should be in the group\n        // featureCampaignIds.includes(campaign.getId()) -> checks that campaign should be part of the feature that we evaluated\n        if (groupCampaignIds.includes(campaign.getId()) && featureCampaignIds.includes(campaign.getId())) {\n          if (!campaignMap.has(featureKey)) {\n            campaignMap.set(featureKey, []);\n          }\n          // check if the campaign is already present in the campaignMap for the feature\n          if (campaignMap.get(featureKey).findIndex((item) => item.key === campaign.getKey()) === -1) {\n            campaignMap.get(featureKey).push(campaign);\n          }\n        }\n      });\n    }\n  }\n  const { eligibleCampaigns, eligibleCampaignsWithStorage } = await _getEligbleCampaigns(\n    settings,\n    campaignMap,\n    context,\n    storageService,\n  );\n\n  return await _findWinnerCampaignAmongEligibleCampaigns(\n    settings,\n    feature.getKey(),\n    eligibleCampaigns,\n    eligibleCampaignsWithStorage,\n    groupId,\n    context,\n  );\n};\n\n/**\n * Retrieves feature keys associated with a group based on the group ID.\n *\n * @param settings - The settings model.\n * @param groupId - The ID of the group.\n * @returns An object containing feature keys and group campaign IDs.\n */\nexport function getFeatureKeysFromGroup(settings: SettingsModel, groupId: number) {\n  const groupCampaignIds = getCampaignsByGroupId(settings, groupId);\n  const featureKeys = getFeatureKeysFromCampaignIds(settings, groupCampaignIds);\n\n  return { featureKeys, groupCampaignIds };\n}\n\n/*******************************\n * PRIVATE methods - MegUtil\n ******************************/\n\n/**\n * Evaluates the feature rollout rules for a given feature.\n *\n * @param settings - The settings model.\n * @param feature - The feature model to evaluate.\n * @param evaluatedFeatureMap - A map containing evaluated features.\n * @param featureToSkip - An array of features to skip during evaluation.\n * @param storageService - The storage service.\n * @param context - The context model.\n * @returns A promise that resolves to true if the feature passes the rollout rules, false otherwise.\n */\nconst _isRolloutRuleForFeaturePassed = async (\n  settings: SettingsModel,\n  feature: FeatureModel,\n  evaluatedFeatureMap: Map<string, any>,\n  featureToSkip: any[],\n  storageService: IStorageService,\n  context: ContextModel,\n): Promise<boolean> => {\n  if (evaluatedFeatureMap.has(feature.getKey()) && 'rolloutId' in evaluatedFeatureMap.get(feature.getKey())) {\n    return true;\n  }\n  const rollOutRules = getSpecificRulesBasedOnType(feature, CampaignTypeEnum.ROLLOUT);\n  if (rollOutRules.length > 0) {\n    let ruleToTestForTraffic = null;\n    for (const rule of rollOutRules) {\n      const { preSegmentationResult } = await evaluateRule(\n        settings,\n        feature,\n        rule,\n        context,\n        evaluatedFeatureMap,\n        null,\n        storageService,\n        {},\n      );\n      if (preSegmentationResult) {\n        ruleToTestForTraffic = rule;\n        break;\n      }\n      continue;\n    }\n    if (ruleToTestForTraffic !== null) {\n      const campaign = new CampaignModel().modelFromDictionary(ruleToTestForTraffic);\n      const variation = evaluateTrafficAndGetVariation(settings, campaign, context.getId());\n      if (isObject(variation) && Object.keys(variation).length > 0) {\n        evaluatedFeatureMap.set(feature.getKey(), {\n          rolloutId: ruleToTestForTraffic.id,\n          rolloutKey: ruleToTestForTraffic.key,\n          rolloutVariationId: ruleToTestForTraffic.variations[0].id,\n        });\n        return true;\n      }\n    }\n    // no rollout rule passed\n    featureToSkip.push(feature.getKey());\n    return false;\n  }\n  // no rollout rule, evaluate experiments\n  LogManager.Instance.info(\n    buildMessage(InfoLogMessagesEnum.MEG_SKIP_ROLLOUT_EVALUATE_EXPERIMENTS, {\n      featureKey: feature.getKey(),\n    }),\n  );\n  return true;\n};\n\n/**\n * Retrieves eligible campaigns based on the provided campaign map and context.\n *\n * @param settings - The settings model.\n * @param campaignMap - A map containing feature keys and corresponding campaigns.\n * @param context - The context model.\n * @param storageService - The storage service.\n * @returns A promise that resolves to an object containing eligible campaigns, campaigns with storage, and ineligible campaigns.\n */\nconst _getEligbleCampaigns = async (\n  settings: SettingsModel,\n  campaignMap: Map<string, any[]>,\n  context: ContextModel,\n  storageService: IStorageService,\n): Promise<any> => {\n  const eligibleCampaigns = [];\n  const eligibleCampaignsWithStorage = [];\n  const inEligibleCampaigns = [];\n  const campaignMapArray = Array.from<[string, CampaignModel[]]>(campaignMap);\n\n  // Iterate over the campaign map to determine eligible campaigns\n  for (const [featureKey, campaigns] of campaignMapArray) {\n    for (const campaign of campaigns) {\n      const storedData: Record<any, any> = await new StorageDecorator().getFeatureFromStorage(\n        featureKey,\n        context,\n        storageService,\n      );\n\n      // Check if campaign is stored in storage\n      if (storedData?.experimentVariationId) {\n        if (storedData.experimentKey && storedData.experimentKey === campaign.getKey()) {\n          const variation: VariationModel = getVariationFromCampaignKey(\n            settings,\n            storedData.experimentKey,\n            storedData.experimentVariationId,\n          );\n          if (variation) {\n            LogManager.Instance.info(\n              buildMessage(InfoLogMessagesEnum.MEG_CAMPAIGN_FOUND_IN_STORAGE, {\n                campaignKey: storedData.experimentKey,\n                userId: context.getId(),\n              }),\n            );\n\n            if (eligibleCampaignsWithStorage.findIndex((item) => item.key === campaign.getKey()) === -1) {\n              eligibleCampaignsWithStorage.push(campaign);\n            }\n            continue;\n          }\n        }\n      }\n\n      // Check if user is eligible for the campaign\n      if (\n        (await new CampaignDecisionService().getPreSegmentationDecision(\n          new CampaignModel().modelFromDictionary(campaign),\n          context,\n        )) &&\n        new CampaignDecisionService().isUserPartOfCampaign(context.getId(), campaign)\n      ) {\n        LogManager.Instance.info(\n          buildMessage(InfoLogMessagesEnum.MEG_CAMPAIGN_FOUND_IN_STORAGE, {\n            campaignKey: campaign.getKey(),\n            userId: context.getId(),\n          }),\n        );\n\n        eligibleCampaigns.push(campaign);\n        continue;\n      }\n\n      inEligibleCampaigns.push(campaign);\n    }\n  }\n\n  return Promise.resolve({\n    eligibleCampaigns,\n    eligibleCampaignsWithStorage,\n    inEligibleCampaigns,\n  });\n};\n\n/**\n * Evaluates the eligible campaigns and determines the winner campaign based on the provided settings, feature key, eligible campaigns, eligible campaigns with storage, group ID, and context.\n *\n * @param settings - The settings model.\n * @param featureKey - The key of the feature.\n * @param eligibleCampaigns - An array of eligible campaigns.\n * @param eligibleCampaignsWithStorage - An array of eligible campaigns with storage.\n * @param groupId - The ID of the group.\n * @param context - The context model.\n * @returns A promise that resolves to the winner campaign.\n */\nconst _findWinnerCampaignAmongEligibleCampaigns = async (\n  settings: SettingsModel,\n  featureKey: string,\n  eligibleCampaigns: any[],\n  eligibleCampaignsWithStorage: any[],\n  groupId: number,\n  context: ContextModel,\n): Promise<any> => {\n  // getCampaignIds from featureKey\n  let winnerCampaign = null;\n  const campaignIds = getCampaignIdsFromFeatureKey(settings, featureKey);\n  // get the winner from each group and store it in winnerFromEachGroup\n  const megAlgoNumber = !isUndefined(settings?.getGroups()[groupId]?.et)\n    ? settings.getGroups()[groupId].et\n    : Constants.RANDOM_ALGO;\n\n  // if eligibleCampaignsWithStorage has only one campaign, then that campaign is the winner\n  if (eligibleCampaignsWithStorage.length === 1) {\n    winnerCampaign = eligibleCampaignsWithStorage[0];\n    LogManager.Instance.info(\n      buildMessage(InfoLogMessagesEnum.MEG_WINNER_CAMPAIGN, {\n        campaignKey: eligibleCampaignsWithStorage[0].getKey(),\n        groupId,\n        userId: context.getId(),\n        algo: '',\n      }),\n    );\n  } else if (eligibleCampaignsWithStorage.length > 1 && megAlgoNumber === Constants.RANDOM_ALGO) {\n    // if eligibleCampaignsWithStorage has more than one campaign and algo is random, then find the winner using random algo\n    winnerCampaign = _normalizeWeightsAndFindWinningCampaign(\n      eligibleCampaignsWithStorage,\n      context,\n      campaignIds,\n      groupId,\n    );\n  } else if (eligibleCampaignsWithStorage.length > 1) {\n    // if eligibleCampaignsWithStorage has more than one campaign and algo is not random, then find the winner using advanced algo\n    winnerCampaign = _getCampaignUsingAdvancedAlgo(\n      settings,\n      eligibleCampaignsWithStorage,\n      context,\n      campaignIds,\n      groupId,\n    );\n  }\n\n  if (eligibleCampaignsWithStorage.length === 0) {\n    if (eligibleCampaigns.length === 1) {\n      winnerCampaign = eligibleCampaigns[0];\n\n      LogManager.Instance.info(\n        buildMessage(InfoLogMessagesEnum.MEG_WINNER_CAMPAIGN, {\n          campaignKey: eligibleCampaigns[0].getKey(),\n          groupId,\n          userId: context.getId(),\n          algo: '',\n        }),\n      );\n    } else if (eligibleCampaigns.length > 1 && megAlgoNumber === Constants.RANDOM_ALGO) {\n      winnerCampaign = _normalizeWeightsAndFindWinningCampaign(eligibleCampaigns, context, campaignIds, groupId);\n    } else if (eligibleCampaigns.length > 1) {\n      winnerCampaign = _getCampaignUsingAdvancedAlgo(settings, eligibleCampaigns, context, campaignIds, groupId);\n    }\n  }\n\n  return winnerCampaign;\n};\n\n/**\n * Normalizes the weights of shortlisted campaigns and determines the winning campaign using random allocation.\n *\n * @param shortlistedCampaigns - An array of shortlisted campaigns.\n * @param context - The context model.\n * @param calledCampaignIds - An array of campaign IDs that have been called.\n * @param groupId - The ID of the group.\n * @returns The winning campaign or null if none is found.\n */\nconst _normalizeWeightsAndFindWinningCampaign = (\n  shortlistedCampaigns: any[],\n  context: ContextModel,\n  calledCampaignIds: any[],\n  groupId: number,\n): any => {\n  // Normalize the weights of all the shortlisted campaigns\n  shortlistedCampaigns.forEach((campaign) => {\n    campaign.weight = Math.floor(100 / shortlistedCampaigns.length);\n  });\n\n  // make shortlistedCampaigns as array of VariationModel\n  shortlistedCampaigns = shortlistedCampaigns.map((campaign) => new VariationModel().modelFromDictionary(campaign));\n\n  // re-distribute the traffic for each camapign\n  setCampaignAllocation(shortlistedCampaigns);\n  const winnerCampaign = new CampaignDecisionService().getVariation(\n    shortlistedCampaigns,\n    new DecisionMaker().calculateBucketValue(getBucketingSeed(context.getId(), undefined, groupId)),\n  );\n\n  LogManager.Instance.info(\n    buildMessage(InfoLogMessagesEnum.MEG_WINNER_CAMPAIGN, {\n      campaignKey: winnerCampaign.getKey(),\n      groupId,\n      userId: context.getId(),\n      algo: 'using random algorithm',\n    }),\n  );\n\n  if (winnerCampaign && calledCampaignIds.includes(winnerCampaign.getId())) {\n    return winnerCampaign;\n  }\n  return null;\n};\n\n/**\n * Advanced algorithm to find the winning campaign based on priority order and weighted random distribution.\n *\n * @param settings - The settings model.\n * @param shortlistedCampaigns - An array of shortlisted campaigns.\n * @param context - The context model.\n * @param calledCampaignIds - An array of campaign IDs that have been called.\n * @param groupId - The ID of the group.\n * @returns The winning campaign or null if none is found.\n */\nconst _getCampaignUsingAdvancedAlgo = (\n  settings: SettingsModel,\n  shortlistedCampaigns: any[],\n  context: ContextModel,\n  calledCampaignIds: any[],\n  groupId: number,\n) => {\n  let winnerCampaign = null;\n  let found = false; // flag to check whether winnerCampaign has been found or not and helps to break from the outer loop\n  const priorityOrder = !isUndefined(settings.getGroups()[groupId].p) ? settings.getGroups()[groupId].p : {};\n  const wt = !isUndefined(settings.getGroups()[groupId].wt) ? settings.getGroups()[groupId].wt : {};\n\n  for (let i = 0; i < priorityOrder.length; i++) {\n    for (let j = 0; j < shortlistedCampaigns.length; j++) {\n      if (shortlistedCampaigns[j].id === priorityOrder[i]) {\n        winnerCampaign = cloneObject(shortlistedCampaigns[j]);\n        found = true;\n        break;\n      }\n    }\n    if (found === true) break;\n  }\n\n  // If winnerCampaign not found through Priority, then go for weighted Random distribution and for that,\n  // Store the list of campaigns (participatingCampaigns) out of shortlistedCampaigns and their corresponding weights present in weightage distribution array (wt)\n  if (winnerCampaign === null) {\n    let participatingCampaignList = [];\n    // iterate over shortlisted campaigns and add weights from the weight array\n    for (let i = 0; i < shortlistedCampaigns.length; i++) {\n      const campaignId = shortlistedCampaigns[i].id;\n      if (!isUndefined(wt[campaignId])) {\n        const clonedCampaign = cloneObject(shortlistedCampaigns[i]);\n        clonedCampaign.weight = wt[campaignId];\n        participatingCampaignList.push(clonedCampaign);\n      }\n    }\n    /* Finding winner campaign using weighted Distibution :\n      1. Re-distribute the traffic by assigning range values for each camapign in particaptingCampaignList\n      2. Calculate bucket value for the given userId and groupId\n      3. Get the winnerCampaign by checking the Start and End Bucket Allocations of each campaign\n    */\n\n    // make participatingCampaignList as array of VariationModel\n    participatingCampaignList = participatingCampaignList.map((campaign) =>\n      new VariationModel().modelFromDictionary(campaign),\n    );\n    setCampaignAllocation(participatingCampaignList);\n    winnerCampaign = new CampaignDecisionService().getVariation(\n      participatingCampaignList,\n      new DecisionMaker().calculateBucketValue(getBucketingSeed(context.getId(), undefined, groupId)),\n    );\n  }\n  // WinnerCampaign should not be null, in case when winnerCampaign hasn't been found through PriorityOrder and\n  // also shortlistedCampaigns and wt array does not have a single campaign id in common\n  LogManager.Instance.info(\n    buildMessage(InfoLogMessagesEnum.MEG_WINNER_CAMPAIGN, {\n      campaignKey: winnerCampaign.key,\n      groupId,\n      userId: context.getId(),\n      algo: 'using advanced algorithm',\n    }),\n  );\n\n  if (calledCampaignIds.includes(winnerCampaign.id)) {\n    return winnerCampaign;\n  }\n  return null;\n};\n","/**\n * Copyright 2024 Wingify Software Pvt. Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { getCurrentUnixTimestamp, getCurrentUnixTimestampInMillis, getRandomNumber } from './FunctionUtil';\nimport { getUUID } from './UuidUtil';\n\nimport { Constants } from '../constants';\nimport { HeadersEnum } from '../enums/HeadersEnum';\nimport { HttpMethodEnum } from '../enums/HttpMethodEnum';\nimport { UrlEnum } from '../enums/UrlEnum';\nimport { DebugLogMessagesEnum, ErrorLogMessagesEnum } from '../enums/log-messages';\nimport { SettingsModel } from '../models/settings/SettingsModel';\nimport { LogManager } from '../packages/logger';\nimport { NetworkManager, RequestModel, ResponseModel } from '../packages/network-layer';\nimport { SettingsService } from '../services/SettingsService';\nimport { dynamic } from '../types/Common';\nimport { isObject } from './DataTypeUtil';\nimport { buildMessage } from './LogMessageUtil';\nimport { UrlUtil } from './UrlUtil';\n\n/**\n * Constructs base properties for bulk operations.\n * @param {string} accountId - The account identifier.\n * @param {string} userId - The user identifier.\n * @returns {Record<string, dynamic>} - The base properties including session ID and UUID.\n */\nexport function getBasePropertiesForBulk(accountId: string, userId: string): Record<string, dynamic> {\n  const path: Record<string, dynamic> = {\n    sId: getCurrentUnixTimestamp(), // Session ID based on current Unix timestamp\n    u: getUUID(userId, accountId), // UUID generated based on user and account ID\n  };\n  return path;\n}\n\n/**\n * Constructs the settings path with API key and account ID.\n * @param {string} sdkKey - The API key.\n * @param {any} accountId - The account identifier.\n * @returns {Record<string, dynamic>} - The settings path including API key, random number, and account ID.\n */\nexport function getSettingsPath(sdkKey: string, accountId: string | number): Record<string, dynamic> {\n  const path: Record<string, dynamic> = {\n    i: `${sdkKey}`, // Inject API key\n    r: Math.random(), // Random number for cache busting\n    a: accountId, // Account ID\n  };\n  return path;\n}\n\n/**\n * Constructs the tracking path for an event.\n * @param {string} event - The event type.\n * @param {string} accountId - The account identifier.\n * @param {string} userId - The user identifier.\n * @returns {Record<string, dynamic>} - The tracking path for the event.\n */\nexport function getTrackEventPath(event: string, accountId: string, userId: string): Record<string, dynamic> {\n  const path: Record<string, dynamic> = {\n    event_type: event, // Type of the event\n    account_id: accountId, // Account ID\n    uId: userId, // User ID\n    u: getUUID(userId, accountId), // UUID generated for the user\n    sdk: Constants.SDK_NAME, // SDK name constant\n    'sdk-v': Constants.SDK_VERSION, // SDK version\n    random: getRandomNumber(), // Random number for uniqueness\n    ap: Constants.PLATFORM, // Application platform\n    sId: getCurrentUnixTimestamp(), // Session ID\n    ed: JSON.stringify({ p: 'server' }), // Additional encoded data\n  };\n\n  return path;\n}\n\n/**\n * Constructs query parameters for event batching.\n * @param {string} accountId - The account identifier.\n * @returns {Record<string, dynamic>} - The query parameters for event batching.\n */\nexport function getEventBatchingQueryParams(accountId: string): Record<string, dynamic> {\n  const path: Record<string, dynamic> = {\n    a: accountId, // Account ID\n    sd: Constants.SDK_NAME, // SDK name\n    sv: Constants.SDK_VERSION, // SDK version\n  };\n\n  return path;\n}\n\n/**\n * Builds generic properties for different tracking calls required by VWO servers.\n * @param {Object} configObj\n * @param {String} eventName\n * @returns properties\n */\nexport function getEventsBaseProperties(\n  setting: SettingsModel,\n  eventName: string,\n  visitorUserAgent: string = '',\n  ipAddress: string = '',\n): Record<string, any> {\n  const sdkKey = setting.getSdkkey();\n\n  const properties = Object.assign({\n    en: eventName,\n    a: setting.getAccountId(),\n    env: sdkKey,\n    eTime: getCurrentUnixTimestampInMillis(),\n    random: getRandomNumber(),\n    p: 'FS',\n    visitor_ua: visitorUserAgent,\n    visitor_ip: ipAddress,\n  });\n\n  properties.url = Constants.HTTPS_PROTOCOL + UrlUtil.getBaseUrl() + UrlEnum.EVENTS;\n  return properties;\n}\n\n/**\n * Builds generic payload required by all the different tracking calls.\n * @param {Object} settings   settings file\n * @param {String} userId     user id\n * @param {String} eventName  event name\n * @returns properties\n */\nexport function _getEventBasePayload(\n  settings: SettingsModel,\n  userId: string | number,\n  eventName: string,\n  visitorUserAgent = '',\n  ipAddress = '',\n): Record<string, any> {\n  const uuid = getUUID(userId.toString(), settings.getAccountId());\n  const sdkKey = settings.getSdkkey();\n\n  const props: {\n    vwo_sdkName: string;\n    vwo_sdkVersion: string;\n    vwo_envKey: string;\n    id?: string | number;\n    variation?: string | number;\n    isFirst?: number;\n    isCustomEvent?: boolean;\n  } = {\n    vwo_sdkName: Constants.SDK_NAME,\n    vwo_sdkVersion: Constants.SDK_VERSION,\n    vwo_envKey: sdkKey,\n  };\n\n  const properties = {\n    d: {\n      msgId: `${uuid}-${getCurrentUnixTimestampInMillis()}`,\n      visId: uuid,\n      sessionId: getCurrentUnixTimestamp(),\n      visitor_ua: visitorUserAgent,\n      visitor_ip: ipAddress,\n      event: {\n        props: props,\n        name: eventName,\n        time: getCurrentUnixTimestampInMillis(),\n      },\n      visitor: {\n        props: {\n          vwo_fs_environment: sdkKey,\n        },\n      },\n    },\n  };\n\n  return properties;\n}\n\n/**\n * Builds payload to track the visitor.\n * @param {Object} configObj\n * @param {String} userId\n * @param {String} eventName\n * @param {String} campaignId\n * @param {Number} variationId\n * @returns track-user payload\n */\nexport function getTrackUserPayloadData(\n  settings: SettingsModel,\n  userId: string | number,\n  eventName: string,\n  campaignId: number,\n  variationId: number,\n  visitorUserAgent: string = '',\n  ipAddress: string = '',\n): Record<string, any> {\n  const properties = _getEventBasePayload(settings, userId, eventName, visitorUserAgent, ipAddress);\n\n  properties.d.event.props.id = campaignId;\n  properties.d.event.props.variation = variationId;\n  properties.d.event.props.isFirst = 1;\n\n  LogManager.Instance.debug(\n    buildMessage(DebugLogMessagesEnum.IMPRESSION_FOR_TRACK_USER, {\n      accountId: settings.getAccountId(),\n      userId,\n      campaignId,\n    }),\n  );\n\n  return properties;\n}\n\n/**\n * Constructs the payload data for tracking goals with custom event properties.\n * @param {any} settings - Configuration settings.\n * @param {any} userId - User identifier.\n * @param {string} eventName - Name of the event.\n * @param {any} eventProperties - Custom properties for the event.\n * @param {string} [visitorUserAgent=''] - Visitor's user agent.\n * @param {string} [ipAddress=''] - Visitor's IP address.\n * @returns {any} - The constructed payload data.\n */\nexport function getTrackGoalPayloadData(\n  settings: SettingsModel,\n  userId: string | number,\n  eventName: string,\n  eventProperties: Record<string, any>,\n  visitorUserAgent: string = '',\n  ipAddress: string = '',\n): Record<string, any> {\n  const properties = _getEventBasePayload(settings, userId, eventName, visitorUserAgent, ipAddress);\n  properties.d.event.props.isCustomEvent = true; // Mark as a custom event\n  properties.d.event.props.variation = 1; // Temporary value for variation\n  properties.d.event.props.id = 1; // Temporary value for ID\n\n  // Add custom event properties if provided\n  if (eventProperties && isObject(eventProperties) && Object.keys(eventProperties).length > 0) {\n    for (const prop in eventProperties) {\n      properties.d.event.props[prop] = eventProperties[prop];\n    }\n  }\n\n  LogManager.Instance.debug(\n    buildMessage(DebugLogMessagesEnum.IMPRESSION_FOR_TRACK_USER, {\n      eventName,\n      accountId: settings.getAccountId(),\n      userId,\n    }),\n  );\n\n  return properties;\n}\n\n/**\n * Constructs the payload data for syncing visitor attributes.\n * @param {any} settings - Configuration settings.\n * @param {any} userId - User identifier.\n * @param {string} eventName - Name of the event.\n * @param {any} attributeKey - Key of the attribute to sync.\n * @param {any} attributeValue - Value of the attribute.\n * @param {string} [visitorUserAgent=''] - Visitor's user agent.\n * @param {string} [ipAddress=''] - Visitor's IP address.\n * @returns {any} - The constructed payload data.\n */\nexport function getAttributePayloadData(\n  settings: SettingsModel,\n  userId: string | number,\n  eventName: string,\n  attributeKey: string,\n  attributeValue: dynamic,\n  visitorUserAgent: string = '',\n  ipAddress: string = '',\n): Record<string, any> {\n  const properties = _getEventBasePayload(settings, userId, eventName, visitorUserAgent, ipAddress);\n\n  properties.d.event.props.isCustomEvent = true; // Mark as a custom event\n  properties.d.event.props[Constants.VWO_FS_ENVIRONMENT] = settings.getSdkkey(); // Set environment key\n  properties.d.visitor.props[attributeKey] = attributeValue; // Set attribute value\n\n  LogManager.Instance.debug(\n    buildMessage(DebugLogMessagesEnum.IMPRESSION_FOR_TRACK_USER, {\n      eventName,\n      accountId: settings.getAccountId(),\n      userId,\n    }),\n  );\n\n  return properties;\n}\n\n/**\n * Sends a POST API request with the specified properties and payload.\n * @param {any} properties - Properties for the request.\n * @param {any} payload - Payload for the request.\n */\nexport function sendPostApiRequest(properties: any, payload: any) {\n  NetworkManager.Instance.attachClient();\n\n  const headers: Record<string, string> = {};\n\n  const userAgent = payload.d.visitor_ua; // Extract user agent from payload\n  const ipAddress = payload.d.visitor_ip; // Extract IP address from payload\n\n  // Set headers if available\n  if (userAgent) headers[HeadersEnum.USER_AGENT] = userAgent;\n  if (ipAddress) headers[HeadersEnum.IP] = ipAddress;\n\n  const request: RequestModel = new RequestModel(\n    UrlUtil.getBaseUrl(),\n    HttpMethodEnum.POST,\n    UrlEnum.EVENTS,\n    properties,\n    payload,\n    headers,\n    SettingsService.Instance.protocol,\n    SettingsService.Instance.port,\n  );\n\n  NetworkManager.Instance.post(request).catch((err: ResponseModel) => {\n    LogManager.Instance.error(\n      buildMessage(ErrorLogMessagesEnum.NETWORK_CALL_FAILED, {\n        method: HttpMethodEnum.POST,\n        err: isObject(err) ? JSON.stringify(err) : err,\n      }),\n    );\n  });\n}\n\n/**\n * Sends a GET API request to the specified endpoint with the given properties.\n * @param {any} properties - Properties for the request.\n * @param {any} endpoint - Endpoint for the GET request.\n * @returns {Promise<any>} - The response from the GET request.\n */\nexport async function sendGetApiRequest(properties: any, endpoint: any): Promise<any> {\n  NetworkManager.Instance.attachClient();\n  const request: RequestModel = new RequestModel(\n    UrlUtil.getBaseUrl(),\n    HttpMethodEnum.GET,\n    endpoint,\n    properties,\n    null,\n    null,\n    SettingsService.Instance.protocol,\n    SettingsService.Instance.port,\n  );\n  try {\n    const response: ResponseModel = await NetworkManager.Instance.get(request);\n    return response; // Return the response model\n  } catch (err) {\n    LogManager.Instance.error(\n      buildMessage(ErrorLogMessagesEnum.NETWORK_CALL_FAILED, {\n        method: HttpMethodEnum.GET,\n        err: isObject(err) ? JSON.stringify(err) : err,\n      }),\n    );\n    return null;\n  }\n}\n","/**\n * Copyright 2024 Wingify Software Pvt. Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { dynamic } from '../types/Common';\n\n/**\n * Creates a Deferred object with properties for promise, resolve, and reject.\n * This allows manual control over the resolution and rejection of a promise.\n * @returns {Deferred} The Deferred object with promise, resolve, and reject methods.\n */\nexport function Deferred(): void {\n  // Create a new Promise and attach resolve and reject methods to the Deferred object\n  this.promise = new Promise((resolve: dynamic, reject: dynamic) => {\n    this.resolve = resolve; // Method to resolve the promise\n    this.reject = reject; // Method to reject the promise\n  });\n\n  return this; // Return the Deferred object with attached methods\n}\n","/**\n * Copyright 2024 Wingify Software Pvt. Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { CampaignModel } from '../models/campaign/CampaignModel';\nimport { FeatureModel } from '../models/campaign/FeatureModel';\nimport { SettingsModel } from '../models/settings/SettingsModel';\nimport { ContextModel } from '../models/user/ContextModel';\nimport { IStorageService } from '../services/StorageService';\nimport { isObject } from './DataTypeUtil';\nimport { checkWhitelistingAndPreSeg } from './DecisionUtil';\nimport { createAndSendImpressionForVariationShown } from './ImpressionUtil';\n\n/**\n * Evaluates the rules for a given campaign and feature based on the provided context.\n * This function checks for whitelisting and pre-segmentation conditions, and if applicable,\n * sends an impression for the variation shown.\n *\n * @param {SettingsModel} settings - The settings configuration for the evaluation.\n * @param {FeatureModel} feature - The feature being evaluated.\n * @param {CampaignModel} campaign - The campaign associated with the feature.\n * @param {ContextModel} context - The user context for evaluation.\n * @param {Map<string, any>} evaluatedFeatureMap - A map of evaluated features.\n * @param {Map<number, number>} megGroupWinnerCampaigns - A map of MEG group winner campaigns.\n * @param {StorageService} storageService - The storage service for persistence.\n * @param {any} decision - The decision object that will be updated based on the evaluation.\n * @returns {Promise<[boolean, any]>} A promise that resolves to a tuple containing the result of the pre-segmentation\n * and the whitelisted object, if any.\n */\nexport const evaluateRule = async (\n  settings: SettingsModel,\n  feature: FeatureModel,\n  campaign: CampaignModel,\n  context: ContextModel,\n  evaluatedFeatureMap: Map<string, unknown>,\n  megGroupWinnerCampaigns: Map<number, number>,\n  storageService: IStorageService,\n  decision: any,\n): Promise<Record<string, any>> => {\n  // Perform whitelisting and pre-segmentation checks\n  const [preSegmentationResult, whitelistedObject] = await checkWhitelistingAndPreSeg(\n    settings,\n    feature,\n    campaign,\n    context,\n    evaluatedFeatureMap,\n    megGroupWinnerCampaigns,\n    storageService,\n    decision,\n  );\n\n  // If pre-segmentation is successful and a whitelisted object exists, proceed to send an impression\n  if (preSegmentationResult && isObject(whitelistedObject) && Object.keys(whitelistedObject).length > 0) {\n    // Update the decision object with campaign and variation details\n    Object.assign(decision, {\n      experimentId: campaign.getId(),\n      experimentKey: campaign.getKey(),\n      experimentVariationId: whitelistedObject.variationId,\n    });\n\n    // Send an impression for the variation shown\n    createAndSendImpressionForVariationShown(settings, campaign.getId(), whitelistedObject.variation.id, context);\n  }\n\n  // Return the results of the evaluation\n  return { preSegmentationResult, whitelistedObject, updatedDecision: decision };\n};\n","/**\n * Copyright 2024 Wingify Software Pvt. Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SettingsModel } from '../models/settings/SettingsModel';\nimport { setVariationAllocation } from './CampaignUtil';\nimport { addLinkedCampaignsToSettings } from './FunctionUtil';\nimport { addIsGatewayServiceRequiredFlag } from './GatewayServiceUtil';\n\nexport function setSettingsAndAddCampaignsToRules(settings, vwoClientInstance) {\n  vwoClientInstance.settings = new SettingsModel(settings);\n  vwoClientInstance.originalSettings = settings;\n  // Optimize loop by avoiding multiple calls to `getCampaigns()`\n  const campaigns = vwoClientInstance.settings.getCampaigns();\n  campaigns.forEach((campaign, index) => {\n    setVariationAllocation(campaign);\n    campaigns[index] = campaign;\n  });\n  addLinkedCampaignsToSettings(vwoClientInstance.settings);\n  addIsGatewayServiceRequiredFlag(vwoClientInstance.settings);\n}\n","/**\n * Copyright 2024 Wingify Software Pvt. Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SettingsService } from '../services/SettingsService';\nimport { isString } from './DataTypeUtil';\n\ninterface IUrlUtil {\n  collectionPrefix?: string;\n  init({ collectionPrefix }?: { collectionPrefix?: string }): IUrlUtil;\n  getBaseUrl(): string;\n}\n\nexport const UrlUtil: IUrlUtil = {\n  /**\n   * Initializes the UrlUtil with optional collectionPrefix and gatewayServiceUrl.\n   * If provided, these values are set after validation.\n   * @param {string} [collectionPrefix] - Optional prefix for URL collections.\n   * @returns {IUrlUtil} The instance of UrlUtil with updated properties.\n   */\n  init: ({ collectionPrefix }: { collectionPrefix?: string } = {}) => {\n    // Set collectionPrefix if it is a valid string\n    if (collectionPrefix && isString(collectionPrefix)) {\n      UrlUtil.collectionPrefix = collectionPrefix;\n    }\n\n    return UrlUtil;\n  },\n\n  /**\n   * Retrieves the base URL.\n   * If gatewayServiceUrl is set, it returns that; otherwise, it constructs the URL using baseUrl and collectionPrefix.\n   * @returns {string} The base URL.\n   */\n  getBaseUrl: () => {\n    const baseUrl: string = SettingsService.Instance.hostname;\n\n    if (SettingsService.Instance.isGatewayServiceProvided) {\n      return baseUrl;\n    }\n\n    // Construct URL with collectionPrefix if it exists\n    if (UrlUtil.collectionPrefix) {\n      return `${baseUrl}/${UrlUtil.collectionPrefix}`;\n    }\n\n    // Return the default baseUrl if no specific URL components are set\n    return baseUrl;\n  },\n};\n","/**\n * Copyright 2024 Wingify Software Pvt. Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SEED_URL } from '../constants/Url';\nimport { v4 as uuidv4 } from 'uuid';\nimport { v5 as uuidv5 } from 'uuid';\n\n/**\n * Generates a random UUID based on an API key.\n * @param sdkKey The API key used to generate a namespace for the UUID.\n * @returns A random UUID string.\n */\nexport function getRandomUUID(sdkKey: string): string {\n  // Generate a namespace based on the API key using DNS namespace\n  const namespace = uuidv5(sdkKey, uuidv5.DNS);\n  // Generate a random UUID using the namespace derived from the API key\n  const randomUUID = uuidv5(uuidv4(), namespace);\n\n  return randomUUID;\n}\n\n/**\n * Generates a UUID for a user based on their userId and accountId.\n * @param userId The user's ID.\n * @param accountId The account ID associated with the user.\n * @returns A UUID string formatted without dashes and in uppercase.\n */\nexport function getUUID(userId: string, accountId: string): string {\n  const VWO_NAMESPACE = uuidv5(SEED_URL, uuidv5.URL);\n  // Convert userId and accountId to string to ensure proper type\n  userId = String(userId);\n  accountId = String(accountId);\n  // Generate a namespace UUID based on the accountId\n  const userIdNamespace = generateUUID(accountId, VWO_NAMESPACE);\n  // Generate a UUID based on the userId and the previously generated namespace\n  const uuidForUserIdAccountId = generateUUID(userId, userIdNamespace);\n\n  // Remove all dashes from the UUID and convert it to uppercase\n  const desiredUuid = uuidForUserIdAccountId?.replace(/-/gi, '').toUpperCase();\n\n  return desiredUuid;\n}\n\n/**\n * Helper function to generate a UUID v5 based on a name and a namespace.\n * @param name The name from which to generate the UUID.\n * @param namespace The namespace used to generate the UUID.\n * @returns A UUID string or undefined if inputs are invalid.\n */\nexport function generateUUID(name: string, namespace: string) {\n  // Check for valid input to prevent errors\n  if (!name || !namespace) {\n    return;\n  }\n\n  // Generate and return the UUID v5\n  return uuidv5(name, namespace);\n}\n","/**\n * Copyright 2024 Wingify Software Pvt. Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { HttpMethodEnum } from '../enums/HttpMethodEnum';\nimport { LogManager } from '../packages/logger';\nimport { buildMessage } from './LogMessageUtil';\nimport { ErrorLogMessagesEnum } from '../enums/log-messages';\n\nconst noop = () => {};\n\nexport function sendGetCall(options) {\n  sendRequest(HttpMethodEnum.GET, options);\n}\n\nexport function sendPostCall(options) {\n  sendRequest(HttpMethodEnum.POST, options);\n}\n\nfunction sendRequest(method, options) {\n  const { networkOptions, successCallback = noop, errorCallback = noop } = options;\n\n  let url = `${networkOptions.scheme}://${networkOptions.hostname}${networkOptions.path}`;\n  if (networkOptions.port) {\n    url = `${networkOptions.scheme}://${networkOptions.hostname}:${networkOptions.port}${networkOptions.path}`;\n  }\n  const body = networkOptions.body;\n  const customHeaders = networkOptions.headers || {};\n  const timeout = networkOptions.timeout;\n\n  const xhr = new XMLHttpRequest();\n\n  if (timeout) {\n    xhr.timeout = timeout;\n  }\n\n  xhr.onload = function () {\n    if (xhr.status >= 200 && xhr.status < 300) {\n      const response = xhr.responseText;\n\n      if (method === HttpMethodEnum.GET) {\n        const parsedResponse = JSON.parse(response);\n        successCallback(parsedResponse);\n      } else {\n        successCallback(response);\n      }\n    } else {\n      errorCallback(xhr.statusText);\n    }\n  };\n\n  // Set up a callback function that is called if the request fails\n  xhr.onerror = function () {\n    // An error occurred during the transaction\n    LogManager.Instance.error(\n      buildMessage(ErrorLogMessagesEnum.NETWORK_CALL_FAILED, {\n        method: HttpMethodEnum.POST,\n        err: `${xhr.statusText}, status: ${xhr.status}`,\n      }),\n    );\n    errorCallback(xhr.statusText);\n  };\n\n  // Set up a callback function that is called if the request times out\n  if (timeout) {\n    xhr.ontimeout = function () {\n      // The request timed out\n      LogManager.Instance.error(\n        buildMessage(ErrorLogMessagesEnum.NETWORK_CALL_FAILED, {\n          method: HttpMethodEnum.POST,\n          err: `Request timed out`,\n        }),\n      );\n    };\n  }\n\n  xhr.open(method, url, true);\n\n  for (const headerName in customHeaders) {\n    if (headerName in customHeaders) {\n      // Skip the Content-Type header\n      // Request header field content-type is not allowed by Access-Control-Allow-Headers\n      if (headerName !== 'Content-Type' && headerName !== 'Content-Length') {\n        xhr.setRequestHeader(headerName, customHeaders[headerName]);\n      }\n    }\n  }\n\n  if (method === HttpMethodEnum.POST) {\n    xhr.send(JSON.stringify(body));\n  } else if (method === HttpMethodEnum.GET) {\n    xhr.send();\n  }\n}\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"NIL\", {\n  enumerable: true,\n  get: function get() {\n    return _nil.default;\n  }\n});\nObject.defineProperty(exports, \"parse\", {\n  enumerable: true,\n  get: function get() {\n    return _parse.default;\n  }\n});\nObject.defineProperty(exports, \"stringify\", {\n  enumerable: true,\n  get: function get() {\n    return _stringify.default;\n  }\n});\nObject.defineProperty(exports, \"v1\", {\n  enumerable: true,\n  get: function get() {\n    return _v.default;\n  }\n});\nObject.defineProperty(exports, \"v3\", {\n  enumerable: true,\n  get: function get() {\n    return _v2.default;\n  }\n});\nObject.defineProperty(exports, \"v4\", {\n  enumerable: true,\n  get: function get() {\n    return _v3.default;\n  }\n});\nObject.defineProperty(exports, \"v5\", {\n  enumerable: true,\n  get: function get() {\n    return _v4.default;\n  }\n});\nObject.defineProperty(exports, \"validate\", {\n  enumerable: true,\n  get: function get() {\n    return _validate.default;\n  }\n});\nObject.defineProperty(exports, \"version\", {\n  enumerable: true,\n  get: function get() {\n    return _version.default;\n  }\n});\n\nvar _v = _interopRequireDefault(require(\"./v1.js\"));\n\nvar _v2 = _interopRequireDefault(require(\"./v3.js\"));\n\nvar _v3 = _interopRequireDefault(require(\"./v4.js\"));\n\nvar _v4 = _interopRequireDefault(require(\"./v5.js\"));\n\nvar _nil = _interopRequireDefault(require(\"./nil.js\"));\n\nvar _version = _interopRequireDefault(require(\"./version.js\"));\n\nvar _validate = _interopRequireDefault(require(\"./validate.js\"));\n\nvar _stringify = _interopRequireDefault(require(\"./stringify.js\"));\n\nvar _parse = _interopRequireDefault(require(\"./parse.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n/*\n * Browser-compatible JavaScript MD5\n *\n * Modification of JavaScript MD5\n * https://github.com/blueimp/JavaScript-MD5\n *\n * Copyright 2011, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n *\n * Based on\n * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message\n * Digest Algorithm, as defined in RFC 1321.\n * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n * Distributed under the BSD License\n * See http://pajhome.org.uk/crypt/md5 for more info.\n */\nfunction md5(bytes) {\n  if (typeof bytes === 'string') {\n    const msg = unescape(encodeURIComponent(bytes)); // UTF8 escape\n\n    bytes = new Uint8Array(msg.length);\n\n    for (let i = 0; i < msg.length; ++i) {\n      bytes[i] = msg.charCodeAt(i);\n    }\n  }\n\n  return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));\n}\n/*\n * Convert an array of little-endian words to an array of bytes\n */\n\n\nfunction md5ToHexEncodedArray(input) {\n  const output = [];\n  const length32 = input.length * 32;\n  const hexTab = '0123456789abcdef';\n\n  for (let i = 0; i < length32; i += 8) {\n    const x = input[i >> 5] >>> i % 32 & 0xff;\n    const hex = parseInt(hexTab.charAt(x >>> 4 & 0x0f) + hexTab.charAt(x & 0x0f), 16);\n    output.push(hex);\n  }\n\n  return output;\n}\n/**\n * Calculate output length with padding and bit length\n */\n\n\nfunction getOutputLength(inputLength8) {\n  return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;\n}\n/*\n * Calculate the MD5 of an array of little-endian words, and a bit length.\n */\n\n\nfunction wordsToMd5(x, len) {\n  /* append padding */\n  x[len >> 5] |= 0x80 << len % 32;\n  x[getOutputLength(len) - 1] = len;\n  let a = 1732584193;\n  let b = -271733879;\n  let c = -1732584194;\n  let d = 271733878;\n\n  for (let i = 0; i < x.length; i += 16) {\n    const olda = a;\n    const oldb = b;\n    const oldc = c;\n    const oldd = d;\n    a = md5ff(a, b, c, d, x[i], 7, -680876936);\n    d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);\n    c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);\n    b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);\n    a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);\n    d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);\n    c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);\n    b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);\n    a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);\n    d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);\n    c = md5ff(c, d, a, b, x[i + 10], 17, -42063);\n    b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);\n    a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);\n    d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);\n    c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);\n    b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);\n    a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);\n    d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);\n    c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);\n    b = md5gg(b, c, d, a, x[i], 20, -373897302);\n    a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);\n    d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);\n    c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);\n    b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);\n    a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);\n    d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);\n    c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);\n    b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);\n    a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);\n    d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);\n    c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);\n    b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);\n    a = md5hh(a, b, c, d, x[i + 5], 4, -378558);\n    d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);\n    c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);\n    b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);\n    a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);\n    d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);\n    c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);\n    b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);\n    a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);\n    d = md5hh(d, a, b, c, x[i], 11, -358537222);\n    c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);\n    b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);\n    a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);\n    d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);\n    c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);\n    b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);\n    a = md5ii(a, b, c, d, x[i], 6, -198630844);\n    d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);\n    c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);\n    b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);\n    a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);\n    d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);\n    c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);\n    b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);\n    a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);\n    d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);\n    c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);\n    b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);\n    a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);\n    d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);\n    c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);\n    b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);\n    a = safeAdd(a, olda);\n    b = safeAdd(b, oldb);\n    c = safeAdd(c, oldc);\n    d = safeAdd(d, oldd);\n  }\n\n  return [a, b, c, d];\n}\n/*\n * Convert an array bytes to an array of little-endian words\n * Characters >255 have their high-byte silently ignored.\n */\n\n\nfunction bytesToWords(input) {\n  if (input.length === 0) {\n    return [];\n  }\n\n  const length8 = input.length * 8;\n  const output = new Uint32Array(getOutputLength(length8));\n\n  for (let i = 0; i < length8; i += 8) {\n    output[i >> 5] |= (input[i / 8] & 0xff) << i % 32;\n  }\n\n  return output;\n}\n/*\n * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n * to work around bugs in some JS interpreters.\n */\n\n\nfunction safeAdd(x, y) {\n  const lsw = (x & 0xffff) + (y & 0xffff);\n  const msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n  return msw << 16 | lsw & 0xffff;\n}\n/*\n * Bitwise rotate a 32-bit number to the left.\n */\n\n\nfunction bitRotateLeft(num, cnt) {\n  return num << cnt | num >>> 32 - cnt;\n}\n/*\n * These functions implement the four basic operations the algorithm uses.\n */\n\n\nfunction md5cmn(q, a, b, x, s, t) {\n  return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);\n}\n\nfunction md5ff(a, b, c, d, x, s, t) {\n  return md5cmn(b & c | ~b & d, a, b, x, s, t);\n}\n\nfunction md5gg(a, b, c, d, x, s, t) {\n  return md5cmn(b & d | c & ~d, a, b, x, s, t);\n}\n\nfunction md5hh(a, b, c, d, x, s, t) {\n  return md5cmn(b ^ c ^ d, a, b, x, s, t);\n}\n\nfunction md5ii(a, b, c, d, x, s, t) {\n  return md5cmn(c ^ (b | ~d), a, b, x, s, t);\n}\n\nvar _default = md5;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nconst randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);\nvar _default = {\n  randomUUID\n};\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _default = '00000000-0000-0000-0000-000000000000';\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _validate = _interopRequireDefault(require(\"./validate.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction parse(uuid) {\n  if (!(0, _validate.default)(uuid)) {\n    throw TypeError('Invalid UUID');\n  }\n\n  let v;\n  const arr = new Uint8Array(16); // Parse ########-....-....-....-............\n\n  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;\n  arr[1] = v >>> 16 & 0xff;\n  arr[2] = v >>> 8 & 0xff;\n  arr[3] = v & 0xff; // Parse ........-####-....-....-............\n\n  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;\n  arr[5] = v & 0xff; // Parse ........-....-####-....-............\n\n  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;\n  arr[7] = v & 0xff; // Parse ........-....-....-####-............\n\n  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;\n  arr[9] = v & 0xff; // Parse ........-....-....-....-############\n  // (Use \"/\" to avoid 32-bit truncation when bit-shifting high-order bytes)\n\n  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000 & 0xff;\n  arr[11] = v / 0x100000000 & 0xff;\n  arr[12] = v >>> 24 & 0xff;\n  arr[13] = v >>> 16 & 0xff;\n  arr[14] = v >>> 8 & 0xff;\n  arr[15] = v & 0xff;\n  return arr;\n}\n\nvar _default = parse;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = rng;\n// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nlet getRandomValues;\nconst rnds8 = new Uint8Array(16);\n\nfunction rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n// Adapted from Chris Veness' SHA1 code at\n// http://www.movable-type.co.uk/scripts/sha1.html\nfunction f(s, x, y, z) {\n  switch (s) {\n    case 0:\n      return x & y ^ ~x & z;\n\n    case 1:\n      return x ^ y ^ z;\n\n    case 2:\n      return x & y ^ x & z ^ y & z;\n\n    case 3:\n      return x ^ y ^ z;\n  }\n}\n\nfunction ROTL(x, n) {\n  return x << n | x >>> 32 - n;\n}\n\nfunction sha1(bytes) {\n  const K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6];\n  const H = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];\n\n  if (typeof bytes === 'string') {\n    const msg = unescape(encodeURIComponent(bytes)); // UTF8 escape\n\n    bytes = [];\n\n    for (let i = 0; i < msg.length; ++i) {\n      bytes.push(msg.charCodeAt(i));\n    }\n  } else if (!Array.isArray(bytes)) {\n    // Convert Array-like to Array\n    bytes = Array.prototype.slice.call(bytes);\n  }\n\n  bytes.push(0x80);\n  const l = bytes.length / 4 + 2;\n  const N = Math.ceil(l / 16);\n  const M = new Array(N);\n\n  for (let i = 0; i < N; ++i) {\n    const arr = new Uint32Array(16);\n\n    for (let j = 0; j < 16; ++j) {\n      arr[j] = bytes[i * 64 + j * 4] << 24 | bytes[i * 64 + j * 4 + 1] << 16 | bytes[i * 64 + j * 4 + 2] << 8 | bytes[i * 64 + j * 4 + 3];\n    }\n\n    M[i] = arr;\n  }\n\n  M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);\n  M[N - 1][14] = Math.floor(M[N - 1][14]);\n  M[N - 1][15] = (bytes.length - 1) * 8 & 0xffffffff;\n\n  for (let i = 0; i < N; ++i) {\n    const W = new Uint32Array(80);\n\n    for (let t = 0; t < 16; ++t) {\n      W[t] = M[i][t];\n    }\n\n    for (let t = 16; t < 80; ++t) {\n      W[t] = ROTL(W[t - 3] ^ W[t - 8] ^ W[t - 14] ^ W[t - 16], 1);\n    }\n\n    let a = H[0];\n    let b = H[1];\n    let c = H[2];\n    let d = H[3];\n    let e = H[4];\n\n    for (let t = 0; t < 80; ++t) {\n      const s = Math.floor(t / 20);\n      const T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[t] >>> 0;\n      e = d;\n      d = c;\n      c = ROTL(b, 30) >>> 0;\n      b = a;\n      a = T;\n    }\n\n    H[0] = H[0] + a >>> 0;\n    H[1] = H[1] + b >>> 0;\n    H[2] = H[2] + c >>> 0;\n    H[3] = H[3] + d >>> 0;\n    H[4] = H[4] + e >>> 0;\n  }\n\n  return [H[0] >> 24 & 0xff, H[0] >> 16 & 0xff, H[0] >> 8 & 0xff, H[0] & 0xff, H[1] >> 24 & 0xff, H[1] >> 16 & 0xff, H[1] >> 8 & 0xff, H[1] & 0xff, H[2] >> 24 & 0xff, H[2] >> 16 & 0xff, H[2] >> 8 & 0xff, H[2] & 0xff, H[3] >> 24 & 0xff, H[3] >> 16 & 0xff, H[3] >> 8 & 0xff, H[3] & 0xff, H[4] >> 24 & 0xff, H[4] >> 16 & 0xff, H[4] >> 8 & 0xff, H[4] & 0xff];\n}\n\nvar _default = sha1;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nexports.unsafeStringify = unsafeStringify;\n\nvar _validate = _interopRequireDefault(require(\"./validate.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\n\nfunction unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];\n}\n\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!(0, _validate.default)(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nvar _default = stringify;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _rng = _interopRequireDefault(require(\"./rng.js\"));\n\nvar _stringify = require(\"./stringify.js\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\nlet _nodeId;\n\nlet _clockseq; // Previous uuid creation time\n\n\nlet _lastMSecs = 0;\nlet _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details\n\nfunction v1(options, buf, offset) {\n  let i = buf && offset || 0;\n  const b = buf || new Array(16);\n  options = options || {};\n  let node = options.node || _nodeId;\n  let clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not\n  // specified.  We do this lazily to minimize issues related to insufficient\n  // system entropy.  See #189\n\n  if (node == null || clockseq == null) {\n    const seedBytes = options.random || (options.rng || _rng.default)();\n\n    if (node == null) {\n      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\n      node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];\n    }\n\n    if (clockseq == null) {\n      // Per 4.2.2, randomize (14 bit) clockseq\n      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;\n    }\n  } // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n\n\n  let msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n\n  let nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)\n\n  const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression\n\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n\n\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  } // Per 4.2.1.2 Throw error if too many uuids are requested\n\n\n  if (nsecs >= 10000) {\n    throw new Error(\"uuid.v1(): Can't create more than 10M uuids/sec\");\n  }\n\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n\n  msecs += 12219292800000; // `time_low`\n\n  const tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff; // `time_mid`\n\n  const tmh = msecs / 0x100000000 * 10000 & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff; // `time_high_and_version`\n\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n\n  b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n\n  b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`\n\n  b[i++] = clockseq & 0xff; // `node`\n\n  for (let n = 0; n < 6; ++n) {\n    b[i + n] = node[n];\n  }\n\n  return buf || (0, _stringify.unsafeStringify)(b);\n}\n\nvar _default = v1;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _v = _interopRequireDefault(require(\"./v35.js\"));\n\nvar _md = _interopRequireDefault(require(\"./md5.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst v3 = (0, _v.default)('v3', 0x30, _md.default);\nvar _default = v3;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.URL = exports.DNS = void 0;\nexports.default = v35;\n\nvar _stringify = require(\"./stringify.js\");\n\nvar _parse = _interopRequireDefault(require(\"./parse.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction stringToBytes(str) {\n  str = unescape(encodeURIComponent(str)); // UTF8 escape\n\n  const bytes = [];\n\n  for (let i = 0; i < str.length; ++i) {\n    bytes.push(str.charCodeAt(i));\n  }\n\n  return bytes;\n}\n\nconst DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';\nexports.DNS = DNS;\nconst URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';\nexports.URL = URL;\n\nfunction v35(name, version, hashfunc) {\n  function generateUUID(value, namespace, buf, offset) {\n    var _namespace;\n\n    if (typeof value === 'string') {\n      value = stringToBytes(value);\n    }\n\n    if (typeof namespace === 'string') {\n      namespace = (0, _parse.default)(namespace);\n    }\n\n    if (((_namespace = namespace) === null || _namespace === void 0 ? void 0 : _namespace.length) !== 16) {\n      throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');\n    } // Compute hash of namespace and value, Per 4.3\n    // Future: Use spread syntax when supported on all platforms, e.g. `bytes =\n    // hashfunc([...namespace, ... value])`\n\n\n    let bytes = new Uint8Array(16 + value.length);\n    bytes.set(namespace);\n    bytes.set(value, namespace.length);\n    bytes = hashfunc(bytes);\n    bytes[6] = bytes[6] & 0x0f | version;\n    bytes[8] = bytes[8] & 0x3f | 0x80;\n\n    if (buf) {\n      offset = offset || 0;\n\n      for (let i = 0; i < 16; ++i) {\n        buf[offset + i] = bytes[i];\n      }\n\n      return buf;\n    }\n\n    return (0, _stringify.unsafeStringify)(bytes);\n  } // Function#name is not settable on some platforms (#270)\n\n\n  try {\n    generateUUID.name = name; // eslint-disable-next-line no-empty\n  } catch (err) {} // For CommonJS default export support\n\n\n  generateUUID.DNS = DNS;\n  generateUUID.URL = URL;\n  return generateUUID;\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _native = _interopRequireDefault(require(\"./native.js\"));\n\nvar _rng = _interopRequireDefault(require(\"./rng.js\"));\n\nvar _stringify = require(\"./stringify.js\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction v4(options, buf, offset) {\n  if (_native.default.randomUUID && !buf && !options) {\n    return _native.default.randomUUID();\n  }\n\n  options = options || {};\n\n  const rnds = options.random || (options.rng || _rng.default)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return (0, _stringify.unsafeStringify)(rnds);\n}\n\nvar _default = v4;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _v = _interopRequireDefault(require(\"./v35.js\"));\n\nvar _sha = _interopRequireDefault(require(\"./sha1.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst v5 = (0, _v.default)('v5', 0x50, _sha.default);\nvar _default = v5;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _regex = _interopRequireDefault(require(\"./regex.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && _regex.default.test(uuid);\n}\n\nvar _default = validate;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _validate = _interopRequireDefault(require(\"./validate.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction version(uuid) {\n  if (!(0, _validate.default)(uuid)) {\n    throw TypeError('Invalid UUID');\n  }\n\n  return parseInt(uuid.slice(14, 15), 16);\n}\n\nvar _default = version;\nexports.default = _default;","module.exports = {\n  debugMessages: require('./src/debug-messages.json'),\n  infoMessages: require('./src/info-messages.json'),\n  warnMessages: require('./src/warn-messages.json'),\n  errorMessages: require('./src/error-messages.json'),\n  traceMessages: require('./src/trace-messages.json')\n}\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n/**\n * A `StructFailure` represents a single specific failure in validation.\n */\n\n/**\n * `StructError` objects are thrown (or returned) when validation fails.\n *\n * Validation logic is design to exit early for maximum performance. The error\n * represents the first error encountered during validation. For more detail,\n * the `error.failures` property is a generator function that can be run to\n * continue validation and receive all the failures in the data.\n */\nclass StructError extends TypeError {\n  constructor(failure, failures) {\n    let cached;\n    const {\n      message,\n      ...rest\n    } = failure;\n    const {\n      path\n    } = failure;\n    const msg = path.length === 0 ? message : \"At path: \" + path.join('.') + \" -- \" + message;\n    super(msg);\n    Object.assign(this, rest);\n    this.name = this.constructor.name;\n\n    this.failures = () => {\n      var _cached;\n\n      return (_cached = cached) != null ? _cached : cached = [failure, ...failures()];\n    };\n  }\n\n}\n\n/**\n * Check if a value is an iterator.\n */\nfunction isIterable(x) {\n  return isObject(x) && typeof x[Symbol.iterator] === 'function';\n}\n/**\n * Check if a value is a plain object.\n */\n\n\nfunction isObject(x) {\n  return typeof x === 'object' && x != null;\n}\n/**\n * Check if a value is a plain object.\n */\n\nfunction isPlainObject(x) {\n  if (Object.prototype.toString.call(x) !== '[object Object]') {\n    return false;\n  }\n\n  const prototype = Object.getPrototypeOf(x);\n  return prototype === null || prototype === Object.prototype;\n}\n/**\n * Return a value as a printable string.\n */\n\nfunction print(value) {\n  return typeof value === 'string' ? JSON.stringify(value) : \"\" + value;\n}\n/**\n * Shifts (removes and returns) the first value from the `input` iterator.\n * Like `Array.prototype.shift()` but for an `Iterator`.\n */\n\nfunction shiftIterator(input) {\n  const {\n    done,\n    value\n  } = input.next();\n  return done ? undefined : value;\n}\n/**\n * Convert a single validation result to a failure.\n */\n\nfunction toFailure(result, context, struct, value) {\n  if (result === true) {\n    return;\n  } else if (result === false) {\n    result = {};\n  } else if (typeof result === 'string') {\n    result = {\n      message: result\n    };\n  }\n\n  const {\n    path,\n    branch\n  } = context;\n  const {\n    type\n  } = struct;\n  const {\n    refinement,\n    message = \"Expected a value of type `\" + type + \"`\" + (refinement ? \" with refinement `\" + refinement + \"`\" : '') + \", but received: `\" + print(value) + \"`\"\n  } = result;\n  return {\n    value,\n    type,\n    refinement,\n    key: path[path.length - 1],\n    path,\n    branch,\n    ...result,\n    message\n  };\n}\n/**\n * Convert a validation result to an iterable of failures.\n */\n\nfunction* toFailures(result, context, struct, value) {\n  if (!isIterable(result)) {\n    result = [result];\n  }\n\n  for (const r of result) {\n    const failure = toFailure(r, context, struct, value);\n\n    if (failure) {\n      yield failure;\n    }\n  }\n}\n/**\n * Check a value against a struct, traversing deeply into nested values, and\n * returning an iterator of failures or success.\n */\n\nfunction* run(value, struct, options = {}) {\n  const {\n    path = [],\n    branch = [value],\n    coerce = false,\n    mask = false\n  } = options;\n  const ctx = {\n    path,\n    branch\n  };\n\n  if (coerce) {\n    value = struct.coercer(value, ctx);\n\n    if (mask && struct.type !== 'type' && isObject(struct.schema) && isObject(value) && !Array.isArray(value)) {\n      for (const key in value) {\n        if (struct.schema[key] === undefined) {\n          delete value[key];\n        }\n      }\n    }\n  }\n\n  let valid = true;\n\n  for (const failure of struct.validator(value, ctx)) {\n    valid = false;\n    yield [failure, undefined];\n  }\n\n  for (let [k, v, s] of struct.entries(value, ctx)) {\n    const ts = run(v, s, {\n      path: k === undefined ? path : [...path, k],\n      branch: k === undefined ? branch : [...branch, v],\n      coerce,\n      mask\n    });\n\n    for (const t of ts) {\n      if (t[0]) {\n        valid = false;\n        yield [t[0], undefined];\n      } else if (coerce) {\n        v = t[1];\n\n        if (k === undefined) {\n          value = v;\n        } else if (value instanceof Map) {\n          value.set(k, v);\n        } else if (value instanceof Set) {\n          value.add(v);\n        } else if (isObject(value)) {\n          value[k] = v;\n        }\n      }\n    }\n  }\n\n  if (valid) {\n    for (const failure of struct.refiner(value, ctx)) {\n      valid = false;\n      yield [failure, undefined];\n    }\n  }\n\n  if (valid) {\n    yield [undefined, value];\n  }\n}\n\n/**\n * `Struct` objects encapsulate the validation logic for a specific type of\n * values. Once constructed, you use the `assert`, `is` or `validate` helpers to\n * validate unknown input data against the struct.\n */\n\nclass Struct {\n  constructor(props) {\n    const {\n      type,\n      schema,\n      validator,\n      refiner,\n      coercer = value => value,\n      entries = function* () {}\n    } = props;\n    this.type = type;\n    this.schema = schema;\n    this.entries = entries;\n    this.coercer = coercer;\n\n    if (validator) {\n      this.validator = (value, context) => {\n        const result = validator(value, context);\n        return toFailures(result, context, this, value);\n      };\n    } else {\n      this.validator = () => [];\n    }\n\n    if (refiner) {\n      this.refiner = (value, context) => {\n        const result = refiner(value, context);\n        return toFailures(result, context, this, value);\n      };\n    } else {\n      this.refiner = () => [];\n    }\n  }\n  /**\n   * Assert that a value passes the struct's validation, throwing if it doesn't.\n   */\n\n\n  assert(value) {\n    return assert(value, this);\n  }\n  /**\n   * Create a value with the struct's coercion logic, then validate it.\n   */\n\n\n  create(value) {\n    return create(value, this);\n  }\n  /**\n   * Check if a value passes the struct's validation.\n   */\n\n\n  is(value) {\n    return is(value, this);\n  }\n  /**\n   * Mask a value, coercing and validating it, but returning only the subset of\n   * properties defined by the struct's schema.\n   */\n\n\n  mask(value) {\n    return mask(value, this);\n  }\n  /**\n   * Validate a value with the struct's validation logic, returning a tuple\n   * representing the result.\n   *\n   * You may optionally pass `true` for the `withCoercion` argument to coerce\n   * the value before attempting to validate it. If you do, the result will\n   * contain the coerced result when successful.\n   */\n\n\n  validate(value, options = {}) {\n    return validate(value, this, options);\n  }\n\n}\n/**\n * Assert that a value passes a struct, throwing if it doesn't.\n */\n\nfunction assert(value, struct) {\n  const result = validate(value, struct);\n\n  if (result[0]) {\n    throw result[0];\n  }\n}\n/**\n * Create a value with the coercion logic of struct and validate it.\n */\n\nfunction create(value, struct) {\n  const result = validate(value, struct, {\n    coerce: true\n  });\n\n  if (result[0]) {\n    throw result[0];\n  } else {\n    return result[1];\n  }\n}\n/**\n * Mask a value, returning only the subset of properties defined by a struct.\n */\n\nfunction mask(value, struct) {\n  const result = validate(value, struct, {\n    coerce: true,\n    mask: true\n  });\n\n  if (result[0]) {\n    throw result[0];\n  } else {\n    return result[1];\n  }\n}\n/**\n * Check if a value passes a struct.\n */\n\nfunction is(value, struct) {\n  const result = validate(value, struct);\n  return !result[0];\n}\n/**\n * Validate a value against a struct, returning an error if invalid, or the\n * value (with potential coercion) if valid.\n */\n\nfunction validate(value, struct, options = {}) {\n  const tuples = run(value, struct, options);\n  const tuple = shiftIterator(tuples);\n\n  if (tuple[0]) {\n    const error = new StructError(tuple[0], function* () {\n      for (const t of tuples) {\n        if (t[0]) {\n          yield t[0];\n        }\n      }\n    });\n    return [error, undefined];\n  } else {\n    const v = tuple[1];\n    return [undefined, v];\n  }\n}\n\nfunction assign(...Structs) {\n  const schemas = Structs.map(s => s.schema);\n  const schema = Object.assign({}, ...schemas);\n  return object(schema);\n}\n/**\n * Define a new struct type with a custom validation function.\n */\n\nfunction define(name, validator) {\n  return new Struct({\n    type: name,\n    schema: null,\n    validator\n  });\n}\n/**\n * Create a new struct based on an existing struct, but the value is allowed to\n * be `undefined`. `log` will be called if the value is not `undefined`.\n */\n\nfunction deprecated(struct, log) {\n  return new Struct({ ...struct,\n    refiner: (value, ctx) => value === undefined || struct.refiner(value, ctx),\n\n    validator(value, ctx) {\n      if (value === undefined) {\n        return true;\n      } else {\n        log(value, ctx);\n        return struct.validator(value, ctx);\n      }\n    }\n\n  });\n}\n/**\n * Create a struct with dynamic validation logic.\n *\n * The callback will receive the value currently being validated, and must\n * return a struct object to validate it with. This can be useful to model\n * validation logic that changes based on its input.\n */\n\nfunction dynamic(fn) {\n  return new Struct({\n    type: 'dynamic',\n    schema: null,\n\n    *entries(value, ctx) {\n      const struct = fn(value, ctx);\n      yield* struct.entries(value, ctx);\n    },\n\n    validator(value, ctx) {\n      const struct = fn(value, ctx);\n      return struct.validator(value, ctx);\n    },\n\n    coercer(value, ctx) {\n      const struct = fn(value, ctx);\n      return struct.coercer(value, ctx);\n    }\n\n  });\n}\n/**\n * Create a struct with lazily evaluated validation logic.\n *\n * The first time validation is run with the struct, the callback will be called\n * and must return a struct object to use. This is useful for cases where you\n * want to have self-referential structs for nested data structures to avoid a\n * circular definition problem.\n */\n\nfunction lazy(fn) {\n  let struct;\n  return new Struct({\n    type: 'lazy',\n    schema: null,\n\n    *entries(value, ctx) {\n      var _struct;\n\n      (_struct = struct) != null ? _struct : struct = fn();\n      yield* struct.entries(value, ctx);\n    },\n\n    validator(value, ctx) {\n      var _struct2;\n\n      (_struct2 = struct) != null ? _struct2 : struct = fn();\n      return struct.validator(value, ctx);\n    },\n\n    coercer(value, ctx) {\n      var _struct3;\n\n      (_struct3 = struct) != null ? _struct3 : struct = fn();\n      return struct.coercer(value, ctx);\n    }\n\n  });\n}\n/**\n * Create a new struct based on an existing object struct, but excluding\n * specific properties.\n *\n * Like TypeScript's `Omit` utility.\n */\n\nfunction omit(struct, keys) {\n  const {\n    schema\n  } = struct;\n  const subschema = { ...schema\n  };\n\n  for (const key of keys) {\n    delete subschema[key];\n  }\n\n  return object(subschema);\n}\n/**\n * Create a new struct based on an existing object struct, but with all of its\n * properties allowed to be `undefined`.\n *\n * Like TypeScript's `Partial` utility.\n */\n\nfunction partial(struct) {\n  const schema = struct instanceof Struct ? { ...struct.schema\n  } : { ...struct\n  };\n\n  for (const key in schema) {\n    schema[key] = optional(schema[key]);\n  }\n\n  return object(schema);\n}\n/**\n * Create a new struct based on an existing object struct, but only including\n * specific properties.\n *\n * Like TypeScript's `Pick` utility.\n */\n\nfunction pick(struct, keys) {\n  const {\n    schema\n  } = struct;\n  const subschema = {};\n\n  for (const key of keys) {\n    subschema[key] = schema[key];\n  }\n\n  return object(subschema);\n}\n/**\n * Define a new struct type with a custom validation function.\n *\n * @deprecated This function has been renamed to `define`.\n */\n\nfunction struct(name, validator) {\n  console.warn('superstruct@0.11 - The `struct` helper has been renamed to `define`.');\n  return define(name, validator);\n}\n\n/**\n * Ensure that any value passes validation.\n */\n\nfunction any() {\n  return define('any', () => true);\n}\nfunction array(Element) {\n  return new Struct({\n    type: 'array',\n    schema: Element,\n\n    *entries(value) {\n      if (Element && Array.isArray(value)) {\n        for (const [i, v] of value.entries()) {\n          yield [i, v, Element];\n        }\n      }\n    },\n\n    coercer(value) {\n      return Array.isArray(value) ? value.slice() : value;\n    },\n\n    validator(value) {\n      return Array.isArray(value) || \"Expected an array value, but received: \" + print(value);\n    }\n\n  });\n}\n/**\n * Ensure that a value is a boolean.\n */\n\nfunction boolean() {\n  return define('boolean', value => {\n    return typeof value === 'boolean';\n  });\n}\n/**\n * Ensure that a value is a valid `Date`.\n *\n * Note: this also ensures that the value is *not* an invalid `Date` object,\n * which can occur when parsing a date fails but still returns a `Date`.\n */\n\nfunction date() {\n  return define('date', value => {\n    return value instanceof Date && !isNaN(value.getTime()) || \"Expected a valid `Date` object, but received: \" + print(value);\n  });\n}\nfunction enums(values) {\n  const schema = {};\n  const description = values.map(v => print(v)).join();\n\n  for (const key of values) {\n    schema[key] = key;\n  }\n\n  return new Struct({\n    type: 'enums',\n    schema,\n\n    validator(value) {\n      return values.includes(value) || \"Expected one of `\" + description + \"`, but received: \" + print(value);\n    }\n\n  });\n}\n/**\n * Ensure that a value is a function.\n */\n\nfunction func() {\n  return define('func', value => {\n    return typeof value === 'function' || \"Expected a function, but received: \" + print(value);\n  });\n}\n/**\n * Ensure that a value is an instance of a specific class.\n */\n\nfunction instance(Class) {\n  return define('instance', value => {\n    return value instanceof Class || \"Expected a `\" + Class.name + \"` instance, but received: \" + print(value);\n  });\n}\n/**\n * Ensure that a value is an integer.\n */\n\nfunction integer() {\n  return define('integer', value => {\n    return typeof value === 'number' && !isNaN(value) && Number.isInteger(value) || \"Expected an integer, but received: \" + print(value);\n  });\n}\nfunction intersection(Structs) {\n  return new Struct({\n    type: 'intersection',\n    schema: null,\n\n    *entries(value, ctx) {\n      for (const S of Structs) {\n        yield* S.entries(value, ctx);\n      }\n    },\n\n    *validator(value, ctx) {\n      for (const S of Structs) {\n        yield* S.validator(value, ctx);\n      }\n    },\n\n    *refiner(value, ctx) {\n      for (const S of Structs) {\n        yield* S.refiner(value, ctx);\n      }\n    }\n\n  });\n}\nfunction literal(constant) {\n  const description = print(constant);\n  const t = typeof constant;\n  return new Struct({\n    type: 'literal',\n    schema: t === 'string' || t === 'number' || t === 'boolean' ? constant : null,\n\n    validator(value) {\n      return value === constant || \"Expected the literal `\" + description + \"`, but received: \" + print(value);\n    }\n\n  });\n}\nfunction map(Key, Value) {\n  return new Struct({\n    type: 'map',\n    schema: null,\n\n    *entries(value) {\n      if (Key && Value && value instanceof Map) {\n        for (const [k, v] of value.entries()) {\n          yield [k, k, Key];\n          yield [k, v, Value];\n        }\n      }\n    },\n\n    coercer(value) {\n      return value instanceof Map ? new Map(value) : value;\n    },\n\n    validator(value) {\n      return value instanceof Map || \"Expected a `Map` object, but received: \" + print(value);\n    }\n\n  });\n}\n/**\n * Ensure that no value ever passes validation.\n */\n\nfunction never() {\n  return define('never', () => false);\n}\n/**\n * Augment an existing struct to allow `null` values.\n */\n\nfunction nullable(struct) {\n  return new Struct({ ...struct,\n    validator: (value, ctx) => value === null || struct.validator(value, ctx),\n    refiner: (value, ctx) => value === null || struct.refiner(value, ctx)\n  });\n}\n/**\n * Ensure that a value is a number.\n */\n\nfunction number() {\n  return define('number', value => {\n    return typeof value === 'number' && !isNaN(value) || \"Expected a number, but received: \" + print(value);\n  });\n}\nfunction object(schema) {\n  const knowns = schema ? Object.keys(schema) : [];\n  const Never = never();\n  return new Struct({\n    type: 'object',\n    schema: schema ? schema : null,\n\n    *entries(value) {\n      if (schema && isObject(value)) {\n        const unknowns = new Set(Object.keys(value));\n\n        for (const key of knowns) {\n          unknowns.delete(key);\n          yield [key, value[key], schema[key]];\n        }\n\n        for (const key of unknowns) {\n          yield [key, value[key], Never];\n        }\n      }\n    },\n\n    validator(value) {\n      return isObject(value) || \"Expected an object, but received: \" + print(value);\n    },\n\n    coercer(value) {\n      return isObject(value) ? { ...value\n      } : value;\n    }\n\n  });\n}\n/**\n * Augment a struct to allow `undefined` values.\n */\n\nfunction optional(struct) {\n  return new Struct({ ...struct,\n    validator: (value, ctx) => value === undefined || struct.validator(value, ctx),\n    refiner: (value, ctx) => value === undefined || struct.refiner(value, ctx)\n  });\n}\n/**\n * Ensure that a value is an object with keys and values of specific types, but\n * without ensuring any specific shape of properties.\n *\n * Like TypeScript's `Record` utility.\n */\n\nfunction record(Key, Value) {\n  return new Struct({\n    type: 'record',\n    schema: null,\n\n    *entries(value) {\n      if (isObject(value)) {\n        for (const k in value) {\n          const v = value[k];\n          yield [k, k, Key];\n          yield [k, v, Value];\n        }\n      }\n    },\n\n    validator(value) {\n      return isObject(value) || \"Expected an object, but received: \" + print(value);\n    }\n\n  });\n}\n/**\n * Ensure that a value is a `RegExp`.\n *\n * Note: this does not test the value against the regular expression! For that\n * you need to use the `pattern()` refinement.\n */\n\nfunction regexp() {\n  return define('regexp', value => {\n    return value instanceof RegExp;\n  });\n}\nfunction set(Element) {\n  return new Struct({\n    type: 'set',\n    schema: null,\n\n    *entries(value) {\n      if (Element && value instanceof Set) {\n        for (const v of value) {\n          yield [v, v, Element];\n        }\n      }\n    },\n\n    coercer(value) {\n      return value instanceof Set ? new Set(value) : value;\n    },\n\n    validator(value) {\n      return value instanceof Set || \"Expected a `Set` object, but received: \" + print(value);\n    }\n\n  });\n}\n/**\n * Ensure that a value is a string.\n */\n\nfunction string() {\n  return define('string', value => {\n    return typeof value === 'string' || \"Expected a string, but received: \" + print(value);\n  });\n}\nfunction tuple(Elements) {\n  const Never = never();\n  return new Struct({\n    type: 'tuple',\n    schema: null,\n\n    *entries(value) {\n      if (Array.isArray(value)) {\n        const length = Math.max(Elements.length, value.length);\n\n        for (let i = 0; i < length; i++) {\n          yield [i, value[i], Elements[i] || Never];\n        }\n      }\n    },\n\n    validator(value) {\n      return Array.isArray(value) || \"Expected an array, but received: \" + print(value);\n    }\n\n  });\n}\n/**\n * Ensure that a value has a set of known properties of specific types.\n *\n * Note: Unrecognized properties are allowed and untouched. This is similar to\n * how TypeScript's structural typing works.\n */\n\nfunction type(schema) {\n  const keys = Object.keys(schema);\n  return new Struct({\n    type: 'type',\n    schema,\n\n    *entries(value) {\n      if (isObject(value)) {\n        for (const k of keys) {\n          yield [k, value[k], schema[k]];\n        }\n      }\n    },\n\n    validator(value) {\n      return isObject(value) || \"Expected an object, but received: \" + print(value);\n    }\n\n  });\n}\nfunction union(Structs) {\n  const description = Structs.map(s => s.type).join(' | ');\n  return new Struct({\n    type: 'union',\n    schema: null,\n\n    validator(value, ctx) {\n      const failures = [];\n\n      for (const S of Structs) {\n        const [...tuples] = run(value, S, ctx);\n        const [first] = tuples;\n\n        if (!first[0]) {\n          return [];\n        } else {\n          for (const [failure] of tuples) {\n            if (failure) {\n              failures.push(failure);\n            }\n          }\n        }\n      }\n\n      return [\"Expected the value to satisfy a union of `\" + description + \"`, but received: \" + print(value), ...failures];\n    }\n\n  });\n}\n/**\n * Ensure that any value passes validation, without widening its type to `any`.\n */\n\nfunction unknown() {\n  return define('unknown', () => true);\n}\n\n/**\n * Augment a `Struct` to add an additional coercion step to its input.\n *\n * This allows you to transform input data before validating it, to increase the\n * likelihood that it passes validation—for example for default values, parsing\n * different formats, etc.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nfunction coerce(struct, condition, coercer) {\n  return new Struct({ ...struct,\n    coercer: (value, ctx) => {\n      return is(value, condition) ? struct.coercer(coercer(value, ctx), ctx) : struct.coercer(value, ctx);\n    }\n  });\n}\n/**\n * Augment a struct to replace `undefined` values with a default.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nfunction defaulted(struct, fallback, options = {}) {\n  return coerce(struct, unknown(), x => {\n    const f = typeof fallback === 'function' ? fallback() : fallback;\n\n    if (x === undefined) {\n      return f;\n    }\n\n    if (!options.strict && isPlainObject(x) && isPlainObject(f)) {\n      const ret = { ...x\n      };\n      let changed = false;\n\n      for (const key in f) {\n        if (ret[key] === undefined) {\n          ret[key] = f[key];\n          changed = true;\n        }\n      }\n\n      if (changed) {\n        return ret;\n      }\n    }\n\n    return x;\n  });\n}\n/**\n * Augment a struct to trim string inputs.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nfunction trimmed(struct) {\n  return coerce(struct, string(), x => x.trim());\n}\n\n/**\n * Ensure that a string, array, map, or set is empty.\n */\n\nfunction empty(struct) {\n  const expected = \"Expected an empty \" + struct.type;\n  return refine(struct, 'empty', value => {\n    if (value instanceof Map || value instanceof Set) {\n      const {\n        size\n      } = value;\n      return size === 0 || expected + \" but received one with a size of `\" + size + \"`\";\n    } else {\n      const {\n        length\n      } = value;\n      return length === 0 || expected + \" but received one with a length of `\" + length + \"`\";\n    }\n  });\n}\n/**\n * Ensure that a number or date is below a threshold.\n */\n\nfunction max(struct, threshold, options = {}) {\n  const {\n    exclusive\n  } = options;\n  return refine(struct, 'max', value => {\n    return exclusive ? value < threshold : value <= threshold || \"Expected a \" + struct.type + \" greater than \" + (exclusive ? '' : 'or equal to ') + threshold + \" but received `\" + value + \"`\";\n  });\n}\n/**\n * Ensure that a number or date is above a threshold.\n */\n\nfunction min(struct, threshold, options = {}) {\n  const {\n    exclusive\n  } = options;\n  return refine(struct, 'min', value => {\n    return exclusive ? value > threshold : value >= threshold || \"Expected a \" + struct.type + \" greater than \" + (exclusive ? '' : 'or equal to ') + threshold + \" but received `\" + value + \"`\";\n  });\n}\n/**\n * Ensure that a string matches a regular expression.\n */\n\nfunction pattern(struct, regexp) {\n  return refine(struct, 'pattern', value => {\n    return regexp.test(value) || \"Expected a \" + struct.type + \" matching `/\" + regexp.source + \"/` but received \\\"\" + value + \"\\\"\";\n  });\n}\n/**\n * Ensure that a string, array, number, date, map, or set has a size (or length, or time) between `min` and `max`.\n */\n\nfunction size(struct, min, max = min) {\n  const expected = \"Expected a \" + struct.type;\n  const of = min === max ? \"of `\" + min + \"`\" : \"between `\" + min + \"` and `\" + max + \"`\";\n  return refine(struct, 'size', value => {\n    if (typeof value === 'number' || value instanceof Date) {\n      return min <= value && value <= max || expected + \" \" + of + \" but received `\" + value + \"`\";\n    } else if (value instanceof Map || value instanceof Set) {\n      const {\n        size\n      } = value;\n      return min <= size && size <= max || expected + \" with a size \" + of + \" but received one with a size of `\" + size + \"`\";\n    } else {\n      const {\n        length\n      } = value;\n      return min <= length && length <= max || expected + \" with a length \" + of + \" but received one with a length of `\" + length + \"`\";\n    }\n  });\n}\n/**\n * Augment a `Struct` to add an additional refinement to the validation.\n *\n * The refiner function is guaranteed to receive a value of the struct's type,\n * because the struct's existing validation will already have passed. This\n * allows you to layer additional validation on top of existing structs.\n */\n\nfunction refine(struct, name, refiner) {\n  return new Struct({ ...struct,\n\n    *refiner(value, ctx) {\n      yield* struct.refiner(value, ctx);\n      const result = refiner(value, ctx);\n      const failures = toFailures(result, ctx, struct, value);\n\n      for (const failure of failures) {\n        yield { ...failure,\n          refinement: name\n        };\n      }\n    }\n\n  });\n}\n\nexports.Struct = Struct;\nexports.StructError = StructError;\nexports.any = any;\nexports.array = array;\nexports.assert = assert;\nexports.assign = assign;\nexports.boolean = boolean;\nexports.coerce = coerce;\nexports.create = create;\nexports.date = date;\nexports.defaulted = defaulted;\nexports.define = define;\nexports.deprecated = deprecated;\nexports.dynamic = dynamic;\nexports.empty = empty;\nexports.enums = enums;\nexports.func = func;\nexports.instance = instance;\nexports.integer = integer;\nexports.intersection = intersection;\nexports.is = is;\nexports.lazy = lazy;\nexports.literal = literal;\nexports.map = map;\nexports.mask = mask;\nexports.max = max;\nexports.min = min;\nexports.never = never;\nexports.nullable = nullable;\nexports.number = number;\nexports.object = object;\nexports.omit = omit;\nexports.optional = optional;\nexports.partial = partial;\nexports.pattern = pattern;\nexports.pick = pick;\nexports.record = record;\nexports.refine = refine;\nexports.regexp = regexp;\nexports.set = set;\nexports.size = size;\nexports.string = string;\nexports.struct = struct;\nexports.trimmed = trimmed;\nexports.tuple = tuple;\nexports.type = type;\nexports.union = union;\nexports.unknown = unknown;\nexports.validate = validate;\n//# sourceMappingURL=index.cjs.map\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/**\n * Copyright 2024 Wingify Software Pvt. Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LogLevelEnum } from './packages/logger/enums/LogLevelEnum';\nimport { Connector } from './packages/storage/Connector';\n\nexport { LogLevelEnum, Connector as StorageConnector };\nexport { init, onInit } from './VWO';\n"],"names":["root","factory","exports","module","define","amd","this","createBuffer","val","TextEncoder","encode","MurmurHashV3","key","seed","remainder","bytes","h1","h1b","c1","c2","k1","i","length","murmur","v2","str","k","l","h","v3","options","VWO","setInstance","optionsVWOBuilder","vwoBuilder","VWOBuilder","instance","setLogger","setSettingsService","setStorage","setNetworkManager","setSegmentation","initPolling","getSettings","then","settings","build","_global","date","Date","toISOString","isObject","msg","buildMessage","ErrorLogMessagesEnum","INIT_OPTIONS_ERROR","console","error","sdkKey","isString","INIT_OPTIONS_SDK_KEY_ERROR","accountId","INIT_OPTIONS_ACCOUNT_ID_ERROR","platform","PlatformEnum","CLIENT","vwoInitDeferred","Deferred","isSettingsFetched","_vwoInstance","resolve","err","API_THROW_ERROR","apiName","info","InfoLogMessagesEnum","ON_INIT_ALREADY_RESOLVED","setTimeout","ON_INIT_SETTINGS_FAILED","reject","Error","promise","networkInstance","NetworkManager","Instance","attachClient","network","client","LogManager","debug","DebugLogMessagesEnum","SERVICE_INITIALIZED","service","getConfig","setDevelopmentMode","isDevelopmentMode","SegmentationManager","attachEvaluator","segmentation","fetchSettings","force","deferredObject","isSettingsFetchInProgress","settingFileManager","originalSettings","storage","Storage","attachConnector","SettingsService","logManager","logger","getRandomUserId","API_CALLED","getRandomUUID","pollInterval","isNumber","INIT_OPTIONS_INVALID","correctType","checkAndPoll","vwoInstance","VWOClient","pollingInterval","setInterval","latestSettings","lastSettings","JSON","stringify","clonedSettings","cloneObject","POLLING_SET_SETTINGS","setSettingsAndAddCampaignsToRules","POLLING_NO_CHANGE_IN_SETTINGS","catch","POLLING_FETCH_SETTINGS_FAILED","UrlUtil","init","collectionPrefix","getCollectionPrefix","CLIENT_INITIALIZED","getFlag","featureKey","context","errorReturnSchema","isEnabled","getVariables","getVariable","_key","defaultValue","hooksService","API_INVALID_PARAM","type","getType","TypeError","SettingsSchema","isSettingsValid","API_SETTING_INVALID","id","API_CONTEXT_INVALID","contextModel","ContextModel","modelFromDictionary","FlagApi","get","data","trackEvent","eventName","eventProperties","TrackApi","track","setAttribute","attributeKey","attributeValue","isBoolean","SetAttributeApi","rolloutVariationToReturn","experimentVariationToReturn","shouldCheckForExperimentsRules","passedRulesInformation","evaluatedFeatureMap","Map","feature","getFeatureFromKey","decision","featureName","getName","featureId","getId","getKey","userId","api","ApiEnum","GET_FLAG","storageService","StorageService","StorageDecorator","getFeatureFromStorage","storedData","experimentVariationId","experimentKey","getVariationFromCampaignKey","STORED_VARIATION_FOUND","variationKey","experimentType","find","variable","VariableModel","getValue","rolloutKey","rolloutId","variation","rolloutVariationId","EXPERIMENTS_EVALUATION_WHEN_ROLLOUT_PASSED","featureInfo","set","Object","assign","undefined","setContextualData","FEATURE_NOT_FOUND","rollOutRules","getSpecificRulesBasedOnType","CampaignTypeEnum","ROLLOUT","rolloutRulesToEvaluate","rule","evaluateRule","preSegmentationResult","updatedDecision","push","getVariations","passedRolloutCampaign","CampaignModel","evaluateTrafficAndGetVariation","keys","_updateIntegrationsDecisionObject","createAndSendImpressionForVariationShown","EXPERIMENTS_EVALUATION_WHEN_NO_ROLLOUT_PRESENT","experimentRulesToEvaluate","experimentRules","getAllExperimentRules","megGroupWinnerCampaigns","whitelistedObject","experimentId","variationId","campaign","setDataInStorage","execute","getImpactCampaign","getCampaignId","IMPACT_ANALYSIS","status","variablesForEvaluatedFlag","variables","value","createImpressionForAttribute","properties","getEventsBaseProperties","EventEnum","VWO_SYNC_VISITOR_PROP","encodeURIComponent","getUserAgent","getIpAddress","payload","getAttributePayloadData","sendPostApiRequest","doesEventBelongToAnyFeature","createImpressionForTrack","TRACK","EVENT_NOT_FOUND","getTrackGoalPayloadData","HTTP","HTTPS","SEED_URL","HTTP_PROTOCOL","HTTPS_PROTOCOL","BASE_URL","packageFile","name","version","Constants","SDK_NAME","SDK_VERSION","PLATFORM","MAX_TRAFFIC_PERCENT","MAX_TRAFFIC_VALUE","STATUS_RUNNING","SEED_VALUE","MAX_EVENTS_PER_REQUEST","DEFAULT_REQUEST_TIME_INTERVAL","DEFAULT_EVENTS_PER_REQUEST","SETTINGS","SETTINGS_EXPIRY","SETTINGS_TIMEOUT","HOST_NAME","SETTINTS_ENDPOINT","LOCATION_ENDPOINT","VWO_FS_ENVIRONMENT","RANDOM_ALGO","API_VERSION","getDataInStorage","campaignMap","StorageEnum","STORAGE_UNDEFINED","NO_DATA_FOUND","INCORRECT_DATA","CAMPAIGN_PAUSED","VARIATION_NOT_FOUND","WHITELISTED_VARIATION","STORING_DATA_ERROR","user","HeadersEnum","HttpMethodEnum","StatusEnum","UrlEnum","messages","debugMessages","infoMessages","errorMessages","variations","metrics","copy","campaignModel","processCampaignKeys","processCampaignProperties","constructor","forEach","VariationModel","metric","MetricModel","percentTraffic","campaignId","ruleKey","isForcedVariationEnabled","isUserListEnabled","segments","getSegments","getTraffic","getIsForcedVariationEnabled","getIsUserListEnabled","getMetrics","getRuleKey","m","rules","impactCampaign","rulesLinkedCampaign","isGatewayServiceRequired","ImpactCapmaignModel","metricList","ruleList","RuleModel","linkedCampaignList","getRules","getRulesLinkedCampaign","setRulesLinkedCampaign","getIsGatewayServiceRequired","setIsGatewayServiceRequired","FeatureModel","identifier","t","getIdentifier","getVariationId","getStatus","setValue","setKey","setType","n","weight","w","setStartRange","startRangeVariation","setEndRange","endRangeVariation","seg","startRange","endRange","setWeight","getWeight","getStartRangeVariation","getEndRangeVariation","initializeSchemas","campaignMetricSchema","object","union","number","string","mca","optional","hasProps","boolean","revenueProp","variableObjectSchema","campaignVariationSchema","array","campaignObjectSchema","isAlwaysCheckSegment","ruleSchema","featureSchema","settingsSchema","features","campaigns","groups","campaignGroups","validate","f","c","cG","g","sK","a","v","getFeatures","getCampaigns","getSdkkey","getAccountId","getVersion","getCampaignGroups","getGroups","SettingsModel","userAgent","ipAddress","customVariables","variationTargetingVariables","_vwo","ContextVWOModel","toString","getCustomVariables","setCustomVariables","getVariationTargetingVariables","setVariationTargetingVariables","getVwo","setVwo","location","getLocation","getUaInfo","generateBucketValue","hashValue","maxValue","multiplier","multipliedValue","Math","pow","floor","getBucketValueForUser","hashKey","Hasher","calculateBucketValue","generateHashValue","DecisionMaker","AnsiColorEnum","loggerConfig","transportConfig","prefix","dateTimeFormat","formatMessage","level","message","getFormattedLevel","getFormattedPrefix","getFormattedDateTime","isAnsiColorEnabled","LogLevelColorInfoEnum","upperCaseLevel","toUpperCase","LogLevelEnum","TRACE","DEBUG","INFO","WARN","ERROR","LogMessageBuilder","Logger","config","requestId","isAlwaysNewInstance","transportManager","LogTransportManager","handleTransports","transports","addTransports","transport","addTransport","ConsoleTransport","trace","log","warn","LogLevelNumberEnum","shouldLog","transportLevel","configLevel","formattedMessage","isFunction","consoleLog","GET","requestModel","deferred","networkOptions","getOptions","responseModel","ResponseModel","sendGetCall","successCallback","setData","errorCallback","setError","POST","request","sendPostCall","NetworkBrowserClient","createRequest","getBaseUrl","getUrl","setUrl","getTimeout","setBody","getBody","setHeaders","getHeaders","requestQueryParams","getQuery","configQueryParams","queryKey","prototype","hasOwnProperty","call","setQuery","RequestHandler","NetworkClient","GlobalRequestModel","RequestModel","setConfig","response","errorResponse","post","url","query","body","headers","timeout","setBaseUrl","getDevelopmentMode","method","path","scheme","port","getMethod","setMethod","getScheme","setScheme","getPort","setPort","getPath","setPath","queryParams","split","hostname","agent","postBody","Buffer","byteLength","charAt","substring","setStatusCode","statusCode","getData","getStatusCode","getError","evaluator","SegmentEvaluator","isGatewayServiceProvided","isUndefined","params","getQueryParams","getFromGatewayService","GET_USER_DATA","validateSegmentation","dsl","isSegmentationValid","SegmentOperandRegexEnum","SegmentOperandValueEnum","SegmentOperatorValueEnum","getKeyValue","subDsl","NOT","AND","OR","CUSTOM_VARIABLE","USER","UA","every","some","SegmentOperandEvaluator","evaluateCustomVariableDSL","evaluateUserDSL","evaluateUserAgentDSL","dslNodes","uaParserMap","keyCount","isUaParser","OPERATING_SYSTEM","BROWSER_AGENT","DEVICE_TYPE","DEVICE","Array","isArray","FEATURE_ID","featureIdObject","featureIdValue","parseInt","checkInUserStorage","result","checkUserAgentParser","locationMap","COUNTRY","REGION","CITY","addLocationValuesToMap","checkLocationPreSegmentation","valuesMatch","checkValuePresent","expectedMap","actualMap","index","toLowerCase","actualValue","startsWith","endsWith","wildcardPattern","slice","RegExp","replace","test","includes","expectedLocationMap","userLocation","entries","normalizedValue1","normalizeValue","normalizedValue2","trim","dslOperandValue","operandKey","operand","listIdRegex","match","tagValue","preProcessTagValue","listId","queryParamsObj","attribute","ATTRIBUTE_CHECK","res","preProcessOperandValue","operandType","operandValue","processedValues","processValues","extractResult","users","_vwoUserId","decodeURIComponent","matchWithRegex","LOWER_MATCH","LOWER_VALUE","extractOperandValue","WILDCARD_MATCH","startingStar","STARTING_STAR","endingStar","ENDING_STAR","STARTING_ENDING_STAR_VALUE","STARTING_STAR_VALUE","ENDING_STAR_VALUE","REGEX_MATCH","REGEX_VALUE","GREATER_THAN_MATCH","GREATER_THAN_VALUE","GREATER_THAN_EQUAL_TO_MATCH","GREATER_THAN_EQUAL_TO_VALUE","LESS_THAN_MATCH","LESS_THAN_VALUE","LESS_THAN_EQUAL_TO_MATCH","LESS_THAN_EQUAL_TO_VALUE","EQUAL_VALUE","regex","processedOperandValue","parseFloat","processedTagValue","indexOf","obj","Connector","connector","getConnector","isUserPartOfCampaign","trafficAllocation","PERSONALIZE","valueAssignedToUser","isUserPart","USER_PART_OF_CAMPAIGN","notPart","campaignKey","getVariation","bucketValue","checkInRange","bucketUserToVariation","USER_BUCKET_TO_VARIATION","getPreSegmentationDecision","campaignType","AB","SEGMENTATION_SKIP","SEGMENTATION_STATUS","getVariationAlloted","CampaignDecisionService","callback","integrations","isCallBackFunction","HooksService","expiry","networkTimeout","gatewayService","parsedUrl","URL","protocol","setSettingsExpiry","settingsTimeout","fetchSettingsAndCacheInStorage","clearTimeout","SETTINGS_FETCH_ERROR","getSettingsPath","s","forceFetch","fetchedSettings","SETTINGS_FETCH_SUCCESS","SETTINGS_SCHEMA_INVALID","storageData","storageInstance","isNull","STORED_DATA_ERROR","assignRangeValues","currentAllocation","stepFactor","_getVariationBucketRange","getGroupDetailsIfCampaignPartOfIt","groupId","groupName","assignRangeValuesMEG","variationWeight","ceil","min","VARIATION_RANGE_ALLOCATION","_handleRolloutCampaign","totalWeight","reduce","acc","campaignIds","group","findIndex","grp","featureKeys","isNaN","isDate","isRegex","isPromise","checkWhitelistingAndPreSeg","vwoUserId","getUUID","_checkCampaignWhitelisting","whitelistedVariation","WHITELISTING_SKIP","groupWinnerCampaignId","isPreSegmentationPassed","evaluateGroups","winnerCampaign","USER_CAMPAIGN_BUCKET_INFO","_evaluateWhitelisting","whitelistingResult","PASSED","FAILED","variationString","WHITELISTING_STATUS","targetedVariations","promises","SegmentEvaluatorResult","Promise","evaluationResult","all","scaleVariationWeights","getBucketingSeed","variationName","parse","random","filter","map","rulesLinkedCampaignModel","linkedCampaign","endpoint","GATEWAY_URL_ERROR","encodedParams","encodedValue","String","pattern","matches","VWO_VARIATION_SHOWN","getTrackUserPayloadData","nargs","template","getFeatureKeysFromGroup","groupCampaignIds","getCampaignsByGroupId","getFeatureKeysFromCampaignIds","featureToSkip","featureCampaignIds","getCampaignIdsFromFeatureKey","_isRolloutRuleForFeaturePassed","has","item","_getEligbleCampaigns","eligibleCampaigns","eligibleCampaignsWithStorage","_findWinnerCampaignAmongEligibleCampaigns","ruleToTestForTraffic","MEG_SKIP_ROLLOUT_EVALUATE_EXPERIMENTS","inEligibleCampaigns","campaignMapArray","from","MEG_CAMPAIGN_FOUND_IN_STORAGE","megAlgoNumber","et","MEG_WINNER_CAMPAIGN","algo","_normalizeWeightsAndFindWinningCampaign","_getCampaignUsingAdvancedAlgo","shortlistedCampaigns","calledCampaignIds","setCampaignAllocation","found","priorityOrder","p","wt","j","participatingCampaignList","clonedCampaign","_getEventBasePayload","visitorUserAgent","uuid","props","vwo_sdkName","vwo_sdkVersion","vwo_envKey","d","msgId","getCurrentUnixTimestampInMillis","visId","sessionId","getCurrentUnixTimestamp","visitor_ua","visitor_ip","event","time","visitor","vwo_fs_environment","sId","u","r","event_type","account_id","uId","sdk","getRandomNumber","ap","ed","sd","sv","setting","en","env","eTime","EVENTS","isFirst","IMPRESSION_FOR_TRACK_USER","isCustomEvent","prop","USER_AGENT","IP","NETWORK_CALL_FAILED","vwoClientInstance","setVariationAllocation","addLinkedCampaignsToSettings","addIsGatewayServiceRequiredFlag","baseUrl","generateUUID","namespace","DNS","VWO_NAMESPACE","userIdNamespace","uuidForUserIdAccountId","noop","sendRequest","customHeaders","xhr","XMLHttpRequest","headerName","onload","responseText","parsedResponse","statusText","onerror","ontimeout","open","setRequestHeader","send","defineProperty","enumerable","_nil","default","_parse","_stringify","_v","_v2","_v3","_v4","_validate","_version","_interopRequireDefault","__esModule","getOutputLength","inputLength8","safeAdd","x","y","lsw","md5cmn","q","b","num","cnt","md5ff","md5gg","md5hh","md5ii","unescape","Uint8Array","charCodeAt","input","output","length32","hexTab","hex","md5ToHexEncodedArray","len","olda","oldb","oldc","oldd","wordsToMd5","length8","Uint32Array","bytesToWords","_default","randomUUID","crypto","bind","arr","getRandomValues","rnds8","z","ROTL","K","H","N","M","W","e","T","unsafeStringify","byteToHex","offset","_rng","_nodeId","_clockseq","_lastMSecs","_lastNSecs","buf","node","clockseq","seedBytes","rng","msecs","now","nsecs","dt","tl","tmh","_md","hashfunc","_namespace","stringToBytes","_native","rnds","_sha","_regex","warnMessages","traceMessages","StructError","failure","failures","cached","rest","super","join","_cached","isPlainObject","getPrototypeOf","print","toFailure","struct","branch","refinement","toFailures","Symbol","iterator","run","coerce","mask","ctx","coercer","schema","valid","validator","ts","Set","add","refiner","Struct","assert","create","is","tuples","tuple","done","next","shiftIterator","never","knowns","Never","unknowns","delete","unknown","condition","refine","any","Element","Structs","schemas","getTime","defaulted","fallback","strict","ret","changed","deprecated","dynamic","fn","empty","expected","size","enums","values","description","func","Class","integer","Number","isInteger","intersection","S","lazy","literal","constant","Key","Value","max","threshold","exclusive","nullable","omit","subschema","partial","regexp","source","pick","record","of","trimmed","Elements","first","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","onInit"],"sourceRoot":""}